<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="12772"><g><title>cfree (6 samples, 0.05%)</title><rect x="0.0235%" y="357" width="0.0470%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="6"/><text x="0.2735%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="0.0391%" y="341" width="0.0313%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="4"/><text x="0.2891%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.0548%" y="325" width="0.0157%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="2"/><text x="0.3048%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (170 samples, 1.33%)</title><rect x="0.2271%" y="117" width="1.3310%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="170"/><text x="0.4771%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (170 samples, 1.33%)</title><rect x="0.2271%" y="101" width="1.3310%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="170"/><text x="0.4771%" y="111.50"></text></g><g><title>cfree (170 samples, 1.33%)</title><rect x="0.2271%" y="85" width="1.3310%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="170"/><text x="0.4771%" y="95.50"></text></g><g><title>[libc.so.6] (110 samples, 0.86%)</title><rect x="0.6968%" y="69" width="0.8613%" height="15" fill="rgb(207,160,47)" fg:x="89" fg:w="110"/><text x="0.9468%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (235 samples, 1.84%)</title><rect x="0.1253%" y="213" width="1.8400%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="235"/><text x="0.3753%" y="223.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::component::Component]&gt; (235 samples, 1.84%)</title><rect x="0.1253%" y="197" width="1.8400%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="235"/><text x="0.3753%" y="207.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::component::Component&gt; (222 samples, 1.74%)</title><rect x="0.2271%" y="181" width="1.7382%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="222"/><text x="0.4771%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (222 samples, 1.74%)</title><rect x="0.2271%" y="165" width="1.7382%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="222"/><text x="0.4771%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (222 samples, 1.74%)</title><rect x="0.2271%" y="149" width="1.7382%" height="15" fill="rgb(240,193,28)" fg:x="29" fg:w="222"/><text x="0.4771%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (222 samples, 1.74%)</title><rect x="0.2271%" y="133" width="1.7382%" height="15" fill="rgb(216,20,37)" fg:x="29" fg:w="222"/><text x="0.4771%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (52 samples, 0.41%)</title><rect x="1.5581%" y="117" width="0.4071%" height="15" fill="rgb(206,188,39)" fg:x="199" fg:w="52"/><text x="1.8081%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.02%)</title><rect x="1.9417%" y="101" width="0.0235%" height="15" fill="rgb(217,207,13)" fg:x="248" fg:w="3"/><text x="2.1917%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.02%)</title><rect x="1.9417%" y="85" width="0.0235%" height="15" fill="rgb(231,73,38)" fg:x="248" fg:w="3"/><text x="2.1917%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (315 samples, 2.47%)</title><rect x="1.9887%" y="181" width="2.4663%" height="15" fill="rgb(225,20,46)" fg:x="254" fg:w="315"/><text x="2.2387%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (315 samples, 2.47%)</title><rect x="1.9887%" y="165" width="2.4663%" height="15" fill="rgb(210,31,41)" fg:x="254" fg:w="315"/><text x="2.2387%" y="175.50">al..</text></g><g><title>cfree (305 samples, 2.39%)</title><rect x="2.0670%" y="149" width="2.3880%" height="15" fill="rgb(221,200,47)" fg:x="264" fg:w="305"/><text x="2.3170%" y="159.50">cf..</text></g><g><title>[libc.so.6] (273 samples, 2.14%)</title><rect x="2.3176%" y="133" width="2.1375%" height="15" fill="rgb(226,26,5)" fg:x="296" fg:w="273"/><text x="2.5676%" y="143.50">[..</text></g><g><title>[libc.so.6] (131 samples, 1.03%)</title><rect x="3.4294%" y="117" width="1.0257%" height="15" fill="rgb(249,33,26)" fg:x="438" fg:w="131"/><text x="3.6794%" y="127.50"></text></g><g><title>[libc.so.6] (60 samples, 0.47%)</title><rect x="3.9853%" y="101" width="0.4698%" height="15" fill="rgb(235,183,28)" fg:x="509" fg:w="60"/><text x="4.2353%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (566 samples, 4.43%)</title><rect x="0.0940%" y="277" width="4.4316%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="566"/><text x="0.3440%" y="287.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::field::Field]&gt; (566 samples, 4.43%)</title><rect x="0.0940%" y="261" width="4.4316%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="566"/><text x="0.3440%" y="271.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::field::Field&gt; (562 samples, 4.40%)</title><rect x="0.1253%" y="245" width="4.4003%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="562"/><text x="0.3753%" y="255.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::component::Component&gt;&gt; (562 samples, 4.40%)</title><rect x="0.1253%" y="229" width="4.4003%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="562"/><text x="0.3753%" y="239.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::component::Component&gt;&gt; (327 samples, 2.56%)</title><rect x="1.9652%" y="213" width="2.5603%" height="15" fill="rgb(225,111,53)" fg:x="251" fg:w="327"/><text x="2.2152%" y="223.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (327 samples, 2.56%)</title><rect x="1.9652%" y="197" width="2.5603%" height="15" fill="rgb(238,160,17)" fg:x="251" fg:w="327"/><text x="2.2152%" y="207.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.07%)</title><rect x="4.4551%" y="181" width="0.0705%" height="15" fill="rgb(214,148,48)" fg:x="569" fg:w="9"/><text x="4.7051%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::segment::Segment&gt;&gt; (876 samples, 6.86%)</title><rect x="0.0705%" y="357" width="6.8588%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="876"/><text x="0.3205%" y="367.50">core::ptr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (876 samples, 6.86%)</title><rect x="0.0705%" y="341" width="6.8588%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="876"/><text x="0.3205%" y="351.50">&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::segment::Segment]&gt; (875 samples, 6.85%)</title><rect x="0.0783%" y="325" width="6.8509%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="875"/><text x="0.3283%" y="335.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segment&gt; (873 samples, 6.84%)</title><rect x="0.0940%" y="309" width="6.8353%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="873"/><text x="0.3440%" y="319.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::field::Field&gt;&gt; (873 samples, 6.84%)</title><rect x="0.0940%" y="293" width="6.8353%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="873"/><text x="0.3440%" y="303.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::field::Field&gt;&gt; (307 samples, 2.40%)</title><rect x="4.5255%" y="277" width="2.4037%" height="15" fill="rgb(241,83,37)" fg:x="578" fg:w="307"/><text x="4.7755%" y="287.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (307 samples, 2.40%)</title><rect x="4.5255%" y="261" width="2.4037%" height="15" fill="rgb(233,36,39)" fg:x="578" fg:w="307"/><text x="4.7755%" y="271.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (307 samples, 2.40%)</title><rect x="4.5255%" y="245" width="2.4037%" height="15" fill="rgb(226,3,54)" fg:x="578" fg:w="307"/><text x="4.7755%" y="255.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (307 samples, 2.40%)</title><rect x="4.5255%" y="229" width="2.4037%" height="15" fill="rgb(245,192,40)" fg:x="578" fg:w="307"/><text x="4.7755%" y="239.50">al..</text></g><g><title>cfree (307 samples, 2.40%)</title><rect x="4.5255%" y="213" width="2.4037%" height="15" fill="rgb(238,167,29)" fg:x="578" fg:w="307"/><text x="4.7755%" y="223.50">cf..</text></g><g><title>[libc.so.6] (304 samples, 2.38%)</title><rect x="4.5490%" y="197" width="2.3802%" height="15" fill="rgb(232,182,51)" fg:x="581" fg:w="304"/><text x="4.7990%" y="207.50">[l..</text></g><g><title>[libc.so.6] (301 samples, 2.36%)</title><rect x="4.5725%" y="181" width="2.3567%" height="15" fill="rgb(231,60,39)" fg:x="584" fg:w="301"/><text x="4.8225%" y="191.50">[..</text></g><g><title>[libc.so.6] (146 samples, 1.14%)</title><rect x="5.7861%" y="165" width="1.1431%" height="15" fill="rgb(208,69,12)" fg:x="739" fg:w="146"/><text x="6.0361%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (171 samples, 1.34%)</title><rect x="7.0153%" y="165" width="1.3389%" height="15" fill="rgb(235,93,37)" fg:x="896" fg:w="171"/><text x="7.2653%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (171 samples, 1.34%)</title><rect x="7.0153%" y="149" width="1.3389%" height="15" fill="rgb(213,116,39)" fg:x="896" fg:w="171"/><text x="7.2653%" y="159.50"></text></g><g><title>cfree (169 samples, 1.32%)</title><rect x="7.0310%" y="133" width="1.3232%" height="15" fill="rgb(222,207,29)" fg:x="898" fg:w="169"/><text x="7.2810%" y="143.50"></text></g><g><title>[libc.so.6] (123 samples, 0.96%)</title><rect x="7.3912%" y="117" width="0.9630%" height="15" fill="rgb(206,96,30)" fg:x="944" fg:w="123"/><text x="7.6412%" y="127.50"></text></g><g><title>asm_sysvec_reschedule_ipi (6 samples, 0.05%)</title><rect x="8.3072%" y="101" width="0.0470%" height="15" fill="rgb(218,138,4)" fg:x="1061" fg:w="6"/><text x="8.5572%" y="111.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.05%)</title><rect x="8.3072%" y="85" width="0.0470%" height="15" fill="rgb(250,191,14)" fg:x="1061" fg:w="6"/><text x="8.5572%" y="95.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.05%)</title><rect x="8.3072%" y="69" width="0.0470%" height="15" fill="rgb(239,60,40)" fg:x="1061" fg:w="6"/><text x="8.5572%" y="79.50"></text></g><g><title>__rseq_handle_notify_resume (6 samples, 0.05%)</title><rect x="8.3072%" y="53" width="0.0470%" height="15" fill="rgb(206,27,48)" fg:x="1061" fg:w="6"/><text x="8.5572%" y="63.50"></text></g><g><title>__get_user_8 (6 samples, 0.05%)</title><rect x="8.3072%" y="37" width="0.0470%" height="15" fill="rgb(225,35,8)" fg:x="1061" fg:w="6"/><text x="8.5572%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (235 samples, 1.84%)</title><rect x="6.9527%" y="261" width="1.8400%" height="15" fill="rgb(250,213,24)" fg:x="888" fg:w="235"/><text x="7.2027%" y="271.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::component::Component]&gt; (235 samples, 1.84%)</title><rect x="6.9527%" y="245" width="1.8400%" height="15" fill="rgb(247,123,22)" fg:x="888" fg:w="235"/><text x="7.2027%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::component::Component&gt; (227 samples, 1.78%)</title><rect x="7.0153%" y="229" width="1.7773%" height="15" fill="rgb(231,138,38)" fg:x="896" fg:w="227"/><text x="7.2653%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (227 samples, 1.78%)</title><rect x="7.0153%" y="213" width="1.7773%" height="15" fill="rgb(231,145,46)" fg:x="896" fg:w="227"/><text x="7.2653%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (227 samples, 1.78%)</title><rect x="7.0153%" y="197" width="1.7773%" height="15" fill="rgb(251,118,11)" fg:x="896" fg:w="227"/><text x="7.2653%" y="207.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (227 samples, 1.78%)</title><rect x="7.0153%" y="181" width="1.7773%" height="15" fill="rgb(217,147,25)" fg:x="896" fg:w="227"/><text x="7.2653%" y="191.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (56 samples, 0.44%)</title><rect x="8.3542%" y="165" width="0.4385%" height="15" fill="rgb(247,81,37)" fg:x="1067" fg:w="56"/><text x="8.6042%" y="175.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.05%)</title><rect x="8.8083%" y="197" width="0.0470%" height="15" fill="rgb(209,12,38)" fg:x="1125" fg:w="6"/><text x="9.0583%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.05%)</title><rect x="8.8083%" y="181" width="0.0470%" height="15" fill="rgb(227,1,9)" fg:x="1125" fg:w="6"/><text x="9.0583%" y="191.50"></text></g><g><title>__rust_dealloc (3 samples, 0.02%)</title><rect x="8.8553%" y="197" width="0.0235%" height="15" fill="rgb(248,47,43)" fg:x="1131" fg:w="3"/><text x="9.1053%" y="207.50"></text></g><g><title>[libc.so.6] (22 samples, 0.17%)</title><rect x="9.8105%" y="165" width="0.1723%" height="15" fill="rgb(221,10,30)" fg:x="1253" fg:w="22"/><text x="10.0605%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (151 samples, 1.18%)</title><rect x="8.8083%" y="229" width="1.1823%" height="15" fill="rgb(210,229,1)" fg:x="1125" fg:w="151"/><text x="9.0583%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (151 samples, 1.18%)</title><rect x="8.8083%" y="213" width="1.1823%" height="15" fill="rgb(222,148,37)" fg:x="1125" fg:w="151"/><text x="9.0583%" y="223.50"></text></g><g><title>cfree (142 samples, 1.11%)</title><rect x="8.8788%" y="197" width="1.1118%" height="15" fill="rgb(234,67,33)" fg:x="1134" fg:w="142"/><text x="9.1288%" y="207.50"></text></g><g><title>[libc.so.6] (118 samples, 0.92%)</title><rect x="9.0667%" y="181" width="0.9239%" height="15" fill="rgb(247,98,35)" fg:x="1158" fg:w="118"/><text x="9.3167%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (394 samples, 3.08%)</title><rect x="6.9292%" y="325" width="3.0849%" height="15" fill="rgb(247,138,52)" fg:x="885" fg:w="394"/><text x="7.1792%" y="335.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::field::Field]&gt; (394 samples, 3.08%)</title><rect x="6.9292%" y="309" width="3.0849%" height="15" fill="rgb(213,79,30)" fg:x="885" fg:w="394"/><text x="7.1792%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::field::Field&gt; (392 samples, 3.07%)</title><rect x="6.9449%" y="293" width="3.0692%" height="15" fill="rgb(246,177,23)" fg:x="887" fg:w="392"/><text x="7.1949%" y="303.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::component::Component&gt;&gt; (392 samples, 3.07%)</title><rect x="6.9449%" y="277" width="3.0692%" height="15" fill="rgb(230,62,27)" fg:x="887" fg:w="392"/><text x="7.1949%" y="287.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::component::Component&gt;&gt; (156 samples, 1.22%)</title><rect x="8.7927%" y="261" width="1.2214%" height="15" fill="rgb(216,154,8)" fg:x="1123" fg:w="156"/><text x="9.0427%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 1.22%)</title><rect x="8.7927%" y="245" width="1.2214%" height="15" fill="rgb(244,35,45)" fg:x="1123" fg:w="156"/><text x="9.0427%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.02%)</title><rect x="9.9906%" y="229" width="0.0235%" height="15" fill="rgb(251,115,12)" fg:x="1276" fg:w="3"/><text x="10.2406%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::message::Message&gt; (1,282 samples, 10.04%)</title><rect x="0.0078%" y="517" width="10.0376%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="527.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;str,hl7_parser::segment::Segments&gt;&gt; (1,282 samples, 10.04%)</title><rect x="0.0078%" y="501" width="10.0376%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="511.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;str,hl7_parser::segment::Segments,std::collections::hash::map::RandomState&gt;&gt; (1,282 samples, 10.04%)</title><rect x="0.0078%" y="485" width="10.0376%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="495.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;str,hl7_parser::segment::Segments)&gt;&gt; (1,282 samples, 10.04%)</title><rect x="0.0078%" y="469" width="10.0376%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="479.50">core::ptr::drop..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,282 samples, 10.04%)</title><rect x="0.0078%" y="453" width="10.0376%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="463.50">&lt;hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1,282 samples, 10.04%)</title><rect x="0.0078%" y="437" width="10.0376%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="1282"/><text x="0.2578%" y="447.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,281 samples, 10.03%)</title><rect x="0.0157%" y="421" width="10.0298%" height="15" fill="rgb(242,79,21)" fg:x="2" fg:w="1281"/><text x="0.2657%" y="431.50">hashbrown::raw..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,281 samples, 10.03%)</title><rect x="0.0157%" y="405" width="10.0298%" height="15" fill="rgb(211,96,35)" fg:x="2" fg:w="1281"/><text x="0.2657%" y="415.50">core::ptr::mut..</text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,hl7_parser::segment::Segments)&gt; (1,281 samples, 10.03%)</title><rect x="0.0157%" y="389" width="10.0298%" height="15" fill="rgb(253,215,40)" fg:x="2" fg:w="1281"/><text x="0.2657%" y="399.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segments&gt; (1,281 samples, 10.03%)</title><rect x="0.0157%" y="373" width="10.0298%" height="15" fill="rgb(211,81,21)" fg:x="2" fg:w="1281"/><text x="0.2657%" y="383.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segment&gt; (398 samples, 3.12%)</title><rect x="6.9292%" y="357" width="3.1162%" height="15" fill="rgb(208,190,38)" fg:x="885" fg:w="398"/><text x="7.1792%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::field::Field&gt;&gt; (398 samples, 3.12%)</title><rect x="6.9292%" y="341" width="3.1162%" height="15" fill="rgb(235,213,38)" fg:x="885" fg:w="398"/><text x="7.1792%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::field::Field&gt;&gt; (4 samples, 0.03%)</title><rect x="10.0141%" y="325" width="0.0313%" height="15" fill="rgb(237,122,38)" fg:x="1279" fg:w="4"/><text x="10.2641%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="10.0141%" y="309" width="0.0313%" height="15" fill="rgb(244,218,35)" fg:x="1279" fg:w="4"/><text x="10.2641%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="10.0846%" y="485" width="0.0157%" height="15" fill="rgb(240,68,47)" fg:x="1288" fg:w="2"/><text x="10.3346%" y="495.50"></text></g><g><title>&lt;hl7_parser::segment::Segment as core::convert::From&lt;hl7_parser::header::Msh&gt;&gt;::from (2 samples, 0.02%)</title><rect x="10.0846%" y="469" width="0.0157%" height="15" fill="rgb(210,16,53)" fg:x="1288" fg:w="2"/><text x="10.3346%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="10.1002%" y="485" width="0.0235%" height="15" fill="rgb(235,124,12)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="10.1002%" y="469" width="0.0235%" height="15" fill="rgb(224,169,11)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.02%)</title><rect x="10.1002%" y="453" width="0.0235%" height="15" fill="rgb(250,166,2)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="10.1002%" y="437" width="0.0235%" height="15" fill="rgb(242,216,29)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="10.1002%" y="421" width="0.0235%" height="15" fill="rgb(230,116,27)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="10.1002%" y="405" width="0.0235%" height="15" fill="rgb(228,99,48)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="415.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="10.1002%" y="389" width="0.0235%" height="15" fill="rgb(253,11,6)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="399.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="10.1002%" y="373" width="0.0235%" height="15" fill="rgb(247,143,39)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="10.1002%" y="357" width="0.0235%" height="15" fill="rgb(236,97,10)" fg:x="1290" fg:w="3"/><text x="10.3502%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="10.1080%" y="341" width="0.0157%" height="15" fill="rgb(233,208,19)" fg:x="1291" fg:w="2"/><text x="10.3580%" y="351.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.5152%" y="213" width="0.0313%" height="15" fill="rgb(216,164,2)" fg:x="1343" fg:w="4"/><text x="10.7652%" y="223.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.5152%" y="197" width="0.0313%" height="15" fill="rgb(220,129,5)" fg:x="1343" fg:w="4"/><text x="10.7652%" y="207.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.03%)</title><rect x="10.5152%" y="181" width="0.0313%" height="15" fill="rgb(242,17,10)" fg:x="1343" fg:w="4"/><text x="10.7652%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::position (9 samples, 0.07%)</title><rect x="10.4839%" y="229" width="0.0705%" height="15" fill="rgb(242,107,0)" fg:x="1339" fg:w="9"/><text x="10.7339%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="10.6561%" y="197" width="0.0157%" height="15" fill="rgb(251,28,31)" fg:x="1361" fg:w="2"/><text x="10.9061%" y="207.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (4 samples, 0.03%)</title><rect x="10.6718%" y="197" width="0.0313%" height="15" fill="rgb(233,223,10)" fg:x="1363" fg:w="4"/><text x="10.9218%" y="207.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (37 samples, 0.29%)</title><rect x="10.4604%" y="277" width="0.2897%" height="15" fill="rgb(215,21,27)" fg:x="1336" fg:w="37"/><text x="10.7104%" y="287.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (37 samples, 0.29%)</title><rect x="10.4604%" y="261" width="0.2897%" height="15" fill="rgb(232,23,21)" fg:x="1336" fg:w="37"/><text x="10.7104%" y="271.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position (36 samples, 0.28%)</title><rect x="10.4682%" y="245" width="0.2819%" height="15" fill="rgb(244,5,23)" fg:x="1337" fg:w="36"/><text x="10.7182%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (25 samples, 0.20%)</title><rect x="10.5543%" y="229" width="0.1957%" height="15" fill="rgb(226,81,46)" fg:x="1348" fg:w="25"/><text x="10.8043%" y="239.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (17 samples, 0.13%)</title><rect x="10.6170%" y="213" width="0.1331%" height="15" fill="rgb(247,70,30)" fg:x="1356" fg:w="17"/><text x="10.8670%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (6 samples, 0.05%)</title><rect x="10.7031%" y="197" width="0.0470%" height="15" fill="rgb(212,68,19)" fg:x="1367" fg:w="6"/><text x="10.9531%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.05%)</title><rect x="10.7031%" y="181" width="0.0470%" height="15" fill="rgb(240,187,13)" fg:x="1367" fg:w="6"/><text x="10.9531%" y="191.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="10.7031%" y="165" width="0.0470%" height="15" fill="rgb(223,113,26)" fg:x="1367" fg:w="6"/><text x="10.9531%" y="175.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.04%)</title><rect x="10.7109%" y="149" width="0.0391%" height="15" fill="rgb(206,192,2)" fg:x="1368" fg:w="5"/><text x="10.9609%" y="159.50"></text></g><g><title>memchr::memchr::memchr::imp (5 samples, 0.04%)</title><rect x="10.7109%" y="133" width="0.0391%" height="15" fill="rgb(241,108,4)" fg:x="1368" fg:w="5"/><text x="10.9609%" y="143.50"></text></g><g><title>memchr::memchr::x86::memchr (5 samples, 0.04%)</title><rect x="10.7109%" y="117" width="0.0391%" height="15" fill="rgb(247,173,49)" fg:x="1368" fg:w="5"/><text x="10.9609%" y="127.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (4 samples, 0.03%)</title><rect x="10.7188%" y="101" width="0.0313%" height="15" fill="rgb(224,114,35)" fg:x="1369" fg:w="4"/><text x="10.9688%" y="111.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (4 samples, 0.03%)</title><rect x="10.7188%" y="85" width="0.0313%" height="15" fill="rgb(245,159,27)" fg:x="1369" fg:w="4"/><text x="10.9688%" y="95.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (6 samples, 0.05%)</title><rect x="10.8832%" y="245" width="0.0470%" height="15" fill="rgb(245,172,44)" fg:x="1390" fg:w="6"/><text x="11.1332%" y="255.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (6 samples, 0.05%)</title><rect x="10.8832%" y="229" width="0.0470%" height="15" fill="rgb(236,23,11)" fg:x="1390" fg:w="6"/><text x="11.1332%" y="239.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="10.8832%" y="213" width="0.0470%" height="15" fill="rgb(205,117,38)" fg:x="1390" fg:w="6"/><text x="11.1332%" y="223.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="10.8832%" y="197" width="0.0470%" height="15" fill="rgb(237,72,25)" fg:x="1390" fg:w="6"/><text x="11.1332%" y="207.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.05%)</title><rect x="10.8832%" y="181" width="0.0470%" height="15" fill="rgb(244,70,9)" fg:x="1390" fg:w="6"/><text x="11.1332%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="10.9067%" y="165" width="0.0235%" height="15" fill="rgb(217,125,39)" fg:x="1393" fg:w="3"/><text x="11.1567%" y="175.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (79 samples, 0.62%)</title><rect x="10.4291%" y="309" width="0.6185%" height="15" fill="rgb(235,36,10)" fg:x="1332" fg:w="79"/><text x="10.6791%" y="319.50"></text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}} (78 samples, 0.61%)</title><rect x="10.4369%" y="293" width="0.6107%" height="15" fill="rgb(251,123,47)" fg:x="1333" fg:w="78"/><text x="10.6869%" y="303.50"></text></g><g><title>nom_locate::position (38 samples, 0.30%)</title><rect x="10.7501%" y="277" width="0.2975%" height="15" fill="rgb(221,13,13)" fg:x="1373" fg:w="38"/><text x="11.0001%" y="287.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (28 samples, 0.22%)</title><rect x="10.8284%" y="261" width="0.2192%" height="15" fill="rgb(238,131,9)" fg:x="1383" fg:w="28"/><text x="11.0784%" y="271.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (15 samples, 0.12%)</title><rect x="10.9302%" y="245" width="0.1174%" height="15" fill="rgb(211,50,8)" fg:x="1396" fg:w="15"/><text x="11.1802%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (6 samples, 0.05%)</title><rect x="11.0006%" y="229" width="0.0470%" height="15" fill="rgb(245,182,24)" fg:x="1405" fg:w="6"/><text x="11.2506%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="11.0319%" y="213" width="0.0157%" height="15" fill="rgb(242,14,37)" fg:x="1409" fg:w="2"/><text x="11.2819%" y="223.50"></text></g><g><title>hl7_parser::parser::sub_components_parser::{{closure}} (125 samples, 0.98%)</title><rect x="10.3586%" y="341" width="0.9787%" height="15" fill="rgb(246,228,12)" fg:x="1323" fg:w="125"/><text x="10.6086%" y="351.50"></text></g><g><title>nom::multi::separated_list0::{{closure}} (125 samples, 0.98%)</title><rect x="10.3586%" y="325" width="0.9787%" height="15" fill="rgb(213,55,15)" fg:x="1323" fg:w="125"/><text x="10.6086%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.29%)</title><rect x="11.0476%" y="309" width="0.2897%" height="15" fill="rgb(209,9,3)" fg:x="1411" fg:w="37"/><text x="11.2976%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (37 samples, 0.29%)</title><rect x="11.0476%" y="293" width="0.2897%" height="15" fill="rgb(230,59,30)" fg:x="1411" fg:w="37"/><text x="11.2976%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (37 samples, 0.29%)</title><rect x="11.0476%" y="277" width="0.2897%" height="15" fill="rgb(209,121,21)" fg:x="1411" fg:w="37"/><text x="11.2976%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.28%)</title><rect x="11.0554%" y="261" width="0.2819%" height="15" fill="rgb(220,109,13)" fg:x="1412" fg:w="36"/><text x="11.3054%" y="271.50"></text></g><g><title>malloc (35 samples, 0.27%)</title><rect x="11.0633%" y="245" width="0.2740%" height="15" fill="rgb(232,18,1)" fg:x="1413" fg:w="35"/><text x="11.3133%" y="255.50"></text></g><g><title>[libc.so.6] (31 samples, 0.24%)</title><rect x="11.0946%" y="229" width="0.2427%" height="15" fill="rgb(215,41,42)" fg:x="1417" fg:w="31"/><text x="11.3446%" y="239.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (2 samples, 0.02%)</title><rect x="11.5722%" y="309" width="0.0157%" height="15" fill="rgb(224,123,36)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="319.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (2 samples, 0.02%)</title><rect x="11.5722%" y="293" width="0.0157%" height="15" fill="rgb(240,125,3)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="303.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="11.5722%" y="277" width="0.0157%" height="15" fill="rgb(205,98,50)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="287.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="11.5722%" y="261" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="271.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="11.5722%" y="245" width="0.0157%" height="15" fill="rgb(238,207,15)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="11.5722%" y="229" width="0.0157%" height="15" fill="rgb(213,199,42)" fg:x="1478" fg:w="2"/><text x="11.8222%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (3 samples, 0.02%)</title><rect x="11.9480%" y="277" width="0.0235%" height="15" fill="rgb(235,201,11)" fg:x="1526" fg:w="3"/><text x="12.1980%" y="287.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (5 samples, 0.04%)</title><rect x="11.9715%" y="277" width="0.0391%" height="15" fill="rgb(207,46,11)" fg:x="1529" fg:w="5"/><text x="12.2215%" y="287.50"></text></g><g><title>hl7_parser::parser::component_parser::{{closure}} (226 samples, 1.77%)</title><rect x="10.2568%" y="357" width="1.7695%" height="15" fill="rgb(241,35,35)" fg:x="1310" fg:w="226"/><text x="10.5068%" y="367.50"></text></g><g><title>nom_locate::position (88 samples, 0.69%)</title><rect x="11.3373%" y="341" width="0.6890%" height="15" fill="rgb(243,32,47)" fg:x="1448" fg:w="88"/><text x="11.5873%" y="351.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (81 samples, 0.63%)</title><rect x="11.3921%" y="325" width="0.6342%" height="15" fill="rgb(247,202,23)" fg:x="1455" fg:w="81"/><text x="11.6421%" y="335.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (56 samples, 0.44%)</title><rect x="11.5878%" y="309" width="0.4385%" height="15" fill="rgb(219,102,11)" fg:x="1480" fg:w="56"/><text x="11.8378%" y="319.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (36 samples, 0.28%)</title><rect x="11.7444%" y="293" width="0.2819%" height="15" fill="rgb(243,110,44)" fg:x="1500" fg:w="36"/><text x="11.9944%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="12.0106%" y="277" width="0.0157%" height="15" fill="rgb(222,74,54)" fg:x="1534" fg:w="2"/><text x="12.2606%" y="287.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (230 samples, 1.80%)</title><rect x="10.2490%" y="373" width="1.8008%" height="15" fill="rgb(216,99,12)" fg:x="1309" fg:w="230"/><text x="10.4990%" y="383.50">&lt;..</text></g><g><title>nom::character::complete::char::{{closure}} (3 samples, 0.02%)</title><rect x="12.0263%" y="357" width="0.0235%" height="15" fill="rgb(226,22,26)" fg:x="1536" fg:w="3"/><text x="12.2763%" y="367.50"></text></g><g><title>hl7_parser::parser::components_parser::{{closure}} (271 samples, 2.12%)</title><rect x="10.2412%" y="405" width="2.1218%" height="15" fill="rgb(217,163,10)" fg:x="1308" fg:w="271"/><text x="10.4912%" y="415.50">h..</text></g><g><title>nom::multi::separated_list0::{{closure}} (271 samples, 2.12%)</title><rect x="10.2412%" y="389" width="2.1218%" height="15" fill="rgb(213,25,53)" fg:x="1308" fg:w="271"/><text x="10.4912%" y="399.50">n..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (40 samples, 0.31%)</title><rect x="12.0498%" y="373" width="0.3132%" height="15" fill="rgb(252,105,26)" fg:x="1539" fg:w="40"/><text x="12.2998%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.31%)</title><rect x="12.0498%" y="357" width="0.3132%" height="15" fill="rgb(220,39,43)" fg:x="1539" fg:w="40"/><text x="12.2998%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (39 samples, 0.31%)</title><rect x="12.0576%" y="341" width="0.3054%" height="15" fill="rgb(229,68,48)" fg:x="1540" fg:w="39"/><text x="12.3076%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 0.31%)</title><rect x="12.0576%" y="325" width="0.3054%" height="15" fill="rgb(252,8,32)" fg:x="1540" fg:w="39"/><text x="12.3076%" y="335.50"></text></g><g><title>malloc (36 samples, 0.28%)</title><rect x="12.0811%" y="309" width="0.2819%" height="15" fill="rgb(223,20,43)" fg:x="1543" fg:w="36"/><text x="12.3311%" y="319.50"></text></g><g><title>[libc.so.6] (28 samples, 0.22%)</title><rect x="12.1438%" y="293" width="0.2192%" height="15" fill="rgb(229,81,49)" fg:x="1551" fg:w="28"/><text x="12.3938%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (4 samples, 0.03%)</title><rect x="12.8093%" y="341" width="0.0313%" height="15" fill="rgb(236,28,36)" fg:x="1636" fg:w="4"/><text x="13.0593%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (3 samples, 0.02%)</title><rect x="12.8406%" y="341" width="0.0235%" height="15" fill="rgb(249,185,26)" fg:x="1640" fg:w="3"/><text x="13.0906%" y="351.50"></text></g><g><title>hl7_parser::parser::field_parser::{{closure}} (339 samples, 2.65%)</title><rect x="10.2177%" y="421" width="2.6542%" height="15" fill="rgb(249,174,33)" fg:x="1305" fg:w="339"/><text x="10.4677%" y="431.50">hl..</text></g><g><title>nom_locate::position (65 samples, 0.51%)</title><rect x="12.3630%" y="405" width="0.5089%" height="15" fill="rgb(233,201,37)" fg:x="1579" fg:w="65"/><text x="12.6130%" y="415.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (58 samples, 0.45%)</title><rect x="12.4178%" y="389" width="0.4541%" height="15" fill="rgb(221,78,26)" fg:x="1586" fg:w="58"/><text x="12.6678%" y="399.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (50 samples, 0.39%)</title><rect x="12.4804%" y="373" width="0.3915%" height="15" fill="rgb(250,127,30)" fg:x="1594" fg:w="50"/><text x="12.7304%" y="383.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (38 samples, 0.30%)</title><rect x="12.5744%" y="357" width="0.2975%" height="15" fill="rgb(230,49,44)" fg:x="1606" fg:w="38"/><text x="12.8244%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (348 samples, 2.72%)</title><rect x="10.2177%" y="437" width="2.7247%" height="15" fill="rgb(229,67,23)" fg:x="1305" fg:w="348"/><text x="10.4677%" y="447.50">&lt;F..</text></g><g><title>nom::character::complete::char::{{closure}} (9 samples, 0.07%)</title><rect x="12.8719%" y="421" width="0.0705%" height="15" fill="rgb(249,83,47)" fg:x="1644" fg:w="9"/><text x="13.1219%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (8 samples, 0.06%)</title><rect x="12.8797%" y="405" width="0.0626%" height="15" fill="rgb(215,43,3)" fg:x="1645" fg:w="8"/><text x="13.1297%" y="415.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="12.9815%" y="293" width="0.0548%" height="15" fill="rgb(238,154,13)" fg:x="1658" fg:w="7"/><text x="13.2315%" y="303.50"></text></g><g><title>hl7_parser::parser::fields_parser::{{closure}} (371 samples, 2.90%)</title><rect x="10.1394%" y="469" width="2.9048%" height="15" fill="rgb(219,56,2)" fg:x="1295" fg:w="371"/><text x="10.3894%" y="479.50">hl..</text></g><g><title>nom::multi::separated_list0::{{closure}} (371 samples, 2.90%)</title><rect x="10.1394%" y="453" width="2.9048%" height="15" fill="rgb(233,0,4)" fg:x="1295" fg:w="371"/><text x="10.3894%" y="463.50">no..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.10%)</title><rect x="12.9424%" y="437" width="0.1018%" height="15" fill="rgb(235,30,7)" fg:x="1653" fg:w="13"/><text x="13.1924%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.10%)</title><rect x="12.9424%" y="421" width="0.1018%" height="15" fill="rgb(250,79,13)" fg:x="1653" fg:w="13"/><text x="13.1924%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.10%)</title><rect x="12.9424%" y="405" width="0.1018%" height="15" fill="rgb(211,146,34)" fg:x="1653" fg:w="13"/><text x="13.1924%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.10%)</title><rect x="12.9424%" y="389" width="0.1018%" height="15" fill="rgb(228,22,38)" fg:x="1653" fg:w="13"/><text x="13.1924%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.09%)</title><rect x="12.9502%" y="373" width="0.0940%" height="15" fill="rgb(235,168,5)" fg:x="1654" fg:w="12"/><text x="13.2002%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.09%)</title><rect x="12.9502%" y="357" width="0.0940%" height="15" fill="rgb(221,155,16)" fg:x="1654" fg:w="12"/><text x="13.2002%" y="367.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.09%)</title><rect x="12.9502%" y="341" width="0.0940%" height="15" fill="rgb(215,215,53)" fg:x="1654" fg:w="12"/><text x="13.2002%" y="351.50"></text></g><g><title>realloc (11 samples, 0.09%)</title><rect x="12.9580%" y="325" width="0.0861%" height="15" fill="rgb(223,4,10)" fg:x="1655" fg:w="11"/><text x="13.2080%" y="335.50"></text></g><g><title>[libc.so.6] (10 samples, 0.08%)</title><rect x="12.9659%" y="309" width="0.0783%" height="15" fill="rgb(234,103,6)" fg:x="1656" fg:w="10"/><text x="13.2159%" y="319.50"></text></g><g><title>hl7_parser::parser::parse_separators (6 samples, 0.05%)</title><rect x="13.0442%" y="469" width="0.0470%" height="15" fill="rgb(227,97,0)" fg:x="1666" fg:w="6"/><text x="13.2942%" y="479.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (4 samples, 0.03%)</title><rect x="13.0598%" y="453" width="0.0313%" height="15" fill="rgb(234,150,53)" fg:x="1668" fg:w="4"/><text x="13.3098%" y="463.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (4 samples, 0.03%)</title><rect x="13.0598%" y="437" width="0.0313%" height="15" fill="rgb(228,201,54)" fg:x="1668" fg:w="4"/><text x="13.3098%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (3 samples, 0.02%)</title><rect x="13.0676%" y="421" width="0.0235%" height="15" fill="rgb(222,22,37)" fg:x="1669" fg:w="3"/><text x="13.3176%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (2 samples, 0.02%)</title><rect x="13.1068%" y="437" width="0.0157%" height="15" fill="rgb(237,53,32)" fg:x="1674" fg:w="2"/><text x="13.3568%" y="447.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (2 samples, 0.02%)</title><rect x="13.1068%" y="421" width="0.0157%" height="15" fill="rgb(233,25,53)" fg:x="1674" fg:w="2"/><text x="13.3568%" y="431.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="13.1068%" y="405" width="0.0157%" height="15" fill="rgb(210,40,34)" fg:x="1674" fg:w="2"/><text x="13.3568%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="13.1068%" y="389" width="0.0157%" height="15" fill="rgb(241,220,44)" fg:x="1674" fg:w="2"/><text x="13.3568%" y="399.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="13.1068%" y="373" width="0.0157%" height="15" fill="rgb(235,28,35)" fg:x="1674" fg:w="2"/><text x="13.3568%" y="383.50"></text></g><g><title>hl7_parser::parser::parse_msh (386 samples, 3.02%)</title><rect x="10.1315%" y="485" width="3.0222%" height="15" fill="rgb(210,56,17)" fg:x="1294" fg:w="386"/><text x="10.3815%" y="495.50">hl7..</text></g><g><title>nom_locate::position (6 samples, 0.05%)</title><rect x="13.1068%" y="469" width="0.0470%" height="15" fill="rgb(224,130,29)" fg:x="1674" fg:w="6"/><text x="13.3568%" y="479.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (6 samples, 0.05%)</title><rect x="13.1068%" y="453" width="0.0470%" height="15" fill="rgb(235,212,8)" fg:x="1674" fg:w="6"/><text x="13.3568%" y="463.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (4 samples, 0.03%)</title><rect x="13.1225%" y="437" width="0.0313%" height="15" fill="rgb(223,33,50)" fg:x="1676" fg:w="4"/><text x="13.3725%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (4 samples, 0.03%)</title><rect x="13.1225%" y="421" width="0.0313%" height="15" fill="rgb(219,149,13)" fg:x="1676" fg:w="4"/><text x="13.3725%" y="431.50"></text></g><g><title>nom::multi::separated_list0 (2 samples, 0.02%)</title><rect x="13.1538%" y="485" width="0.0157%" height="15" fill="rgb(250,156,29)" fg:x="1680" fg:w="2"/><text x="13.4038%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.09%)</title><rect x="13.3025%" y="437" width="0.0861%" height="15" fill="rgb(216,193,19)" fg:x="1699" fg:w="11"/><text x="13.5525%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.14%)</title><rect x="16.5049%" y="373" width="0.1409%" height="15" fill="rgb(216,135,14)" fg:x="2108" fg:w="18"/><text x="16.7549%" y="383.50"></text></g><g><title>nom::multi::separated_list0 (7 samples, 0.05%)</title><rect x="16.6458%" y="357" width="0.0548%" height="15" fill="rgb(241,47,5)" fg:x="2126" fg:w="7"/><text x="16.8958%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (29 samples, 0.23%)</title><rect x="19.6524%" y="309" width="0.2271%" height="15" fill="rgb(233,42,35)" fg:x="2510" fg:w="29"/><text x="19.9024%" y="319.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.02%)</title><rect x="19.8794%" y="309" width="0.0157%" height="15" fill="rgb(231,13,6)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="319.50"></text></g><g><title>common_interrupt (2 samples, 0.02%)</title><rect x="19.8794%" y="293" width="0.0157%" height="15" fill="rgb(207,181,40)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="303.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="19.8794%" y="277" width="0.0157%" height="15" fill="rgb(254,173,49)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="287.50"></text></g><g><title>do_softirq_own_stack (2 samples, 0.02%)</title><rect x="19.8794%" y="261" width="0.0157%" height="15" fill="rgb(221,1,38)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="271.50"></text></g><g><title>asm_call_irq_on_stack (2 samples, 0.02%)</title><rect x="19.8794%" y="245" width="0.0157%" height="15" fill="rgb(206,124,46)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="255.50"></text></g><g><title>__do_softirq (2 samples, 0.02%)</title><rect x="19.8794%" y="229" width="0.0157%" height="15" fill="rgb(249,21,11)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="239.50"></text></g><g><title>net_rx_action (2 samples, 0.02%)</title><rect x="19.8794%" y="213" width="0.0157%" height="15" fill="rgb(222,201,40)" fg:x="2539" fg:w="2"/><text x="20.1294%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.36%)</title><rect x="23.8725%" y="245" width="0.3602%" height="15" fill="rgb(235,61,29)" fg:x="3049" fg:w="46"/><text x="24.1225%" y="255.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.22%)</title><rect x="25.4228%" y="181" width="0.2192%" height="15" fill="rgb(219,207,3)" fg:x="3247" fg:w="28"/><text x="25.6728%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.22%)</title><rect x="25.4228%" y="165" width="0.2192%" height="15" fill="rgb(222,56,46)" fg:x="3247" fg:w="28"/><text x="25.6728%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (28 samples, 0.22%)</title><rect x="25.4228%" y="149" width="0.2192%" height="15" fill="rgb(239,76,54)" fg:x="3247" fg:w="28"/><text x="25.6728%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="25.5168%" y="133" width="0.1253%" height="15" fill="rgb(231,124,27)" fg:x="3259" fg:w="16"/><text x="25.7668%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (66 samples, 0.52%)</title><rect x="25.6420%" y="181" width="0.5168%" height="15" fill="rgb(249,195,6)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (66 samples, 0.52%)</title><rect x="25.6420%" y="165" width="0.5168%" height="15" fill="rgb(237,174,47)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (66 samples, 0.52%)</title><rect x="25.6420%" y="149" width="0.5168%" height="15" fill="rgb(206,201,31)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="159.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (66 samples, 0.52%)</title><rect x="25.6420%" y="133" width="0.5168%" height="15" fill="rgb(231,57,52)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (66 samples, 0.52%)</title><rect x="25.6420%" y="117" width="0.5168%" height="15" fill="rgb(248,177,22)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (66 samples, 0.52%)</title><rect x="25.6420%" y="101" width="0.5168%" height="15" fill="rgb(215,211,37)" fg:x="3275" fg:w="66"/><text x="25.8920%" y="111.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::position (186 samples, 1.46%)</title><rect x="24.8356%" y="197" width="1.4563%" height="15" fill="rgb(241,128,51)" fg:x="3172" fg:w="186"/><text x="25.0856%" y="207.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}}::{{closure}} (17 samples, 0.13%)</title><rect x="26.1588%" y="181" width="0.1331%" height="15" fill="rgb(227,165,31)" fg:x="3341" fg:w="17"/><text x="26.4088%" y="191.50"></text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}}::{{closure}} (17 samples, 0.13%)</title><rect x="26.1588%" y="165" width="0.1331%" height="15" fill="rgb(228,167,24)" fg:x="3341" fg:w="17"/><text x="26.4088%" y="175.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (70 samples, 0.55%)</title><rect x="30.3241%" y="165" width="0.5481%" height="15" fill="rgb(228,143,12)" fg:x="3873" fg:w="70"/><text x="30.5741%" y="175.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (52 samples, 0.41%)</title><rect x="30.8722%" y="165" width="0.4071%" height="15" fill="rgb(249,149,8)" fg:x="3943" fg:w="52"/><text x="31.1222%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (4 samples, 0.03%)</title><rect x="31.2480%" y="149" width="0.0313%" height="15" fill="rgb(243,35,44)" fg:x="3991" fg:w="4"/><text x="31.4980%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (4 samples, 0.03%)</title><rect x="31.2480%" y="133" width="0.0313%" height="15" fill="rgb(246,89,9)" fg:x="3991" fg:w="4"/><text x="31.4980%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (4 samples, 0.03%)</title><rect x="31.2480%" y="117" width="0.0313%" height="15" fill="rgb(233,213,13)" fg:x="3991" fg:w="4"/><text x="31.4980%" y="127.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (93 samples, 0.73%)</title><rect x="31.2794%" y="165" width="0.7282%" height="15" fill="rgb(233,141,41)" fg:x="3995" fg:w="93"/><text x="31.5294%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (20 samples, 0.16%)</title><rect x="31.8509%" y="149" width="0.1566%" height="15" fill="rgb(239,167,4)" fg:x="4068" fg:w="20"/><text x="32.1009%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (20 samples, 0.16%)</title><rect x="31.8509%" y="133" width="0.1566%" height="15" fill="rgb(209,217,16)" fg:x="4068" fg:w="20"/><text x="32.1009%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (20 samples, 0.16%)</title><rect x="31.8509%" y="117" width="0.1566%" height="15" fill="rgb(219,88,35)" fg:x="4068" fg:w="20"/><text x="32.1009%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (4 samples, 0.03%)</title><rect x="31.9762%" y="101" width="0.0313%" height="15" fill="rgb(220,193,23)" fg:x="4084" fg:w="4"/><text x="32.2262%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="31.9762%" y="85" width="0.0313%" height="15" fill="rgb(230,90,52)" fg:x="4084" fg:w="4"/><text x="32.2262%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.03%)</title><rect x="31.9762%" y="69" width="0.0313%" height="15" fill="rgb(252,106,19)" fg:x="4084" fg:w="4"/><text x="32.2262%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="32.0075%" y="117" width="0.0235%" height="15" fill="rgb(206,74,20)" fg:x="4088" fg:w="3"/><text x="32.2575%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.03%)</title><rect x="32.0310%" y="69" width="0.0313%" height="15" fill="rgb(230,138,44)" fg:x="4091" fg:w="4"/><text x="32.2810%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.03%)</title><rect x="32.0310%" y="53" width="0.0313%" height="15" fill="rgb(235,182,43)" fg:x="4091" fg:w="4"/><text x="32.2810%" y="63.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (630 samples, 4.93%)</title><rect x="27.6073%" y="181" width="4.9327%" height="15" fill="rgb(242,16,51)" fg:x="3526" fg:w="630"/><text x="27.8573%" y="191.50">&lt;nom_l..</text></g><g><title>core::iter::traits::iterator::Iterator::count (68 samples, 0.53%)</title><rect x="32.0075%" y="165" width="0.5324%" height="15" fill="rgb(248,9,4)" fg:x="4088" fg:w="68"/><text x="32.2575%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (68 samples, 0.53%)</title><rect x="32.0075%" y="149" width="0.5324%" height="15" fill="rgb(210,31,22)" fg:x="4088" fg:w="68"/><text x="32.2575%" y="159.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.53%)</title><rect x="32.0075%" y="133" width="0.5324%" height="15" fill="rgb(239,54,39)" fg:x="4088" fg:w="68"/><text x="32.2575%" y="143.50"></text></g><g><title>memchr::memchr::memchr (65 samples, 0.51%)</title><rect x="32.0310%" y="117" width="0.5089%" height="15" fill="rgb(230,99,41)" fg:x="4091" fg:w="65"/><text x="32.2810%" y="127.50"></text></g><g><title>memchr::memchr::memchr::imp (65 samples, 0.51%)</title><rect x="32.0310%" y="101" width="0.5089%" height="15" fill="rgb(253,106,12)" fg:x="4091" fg:w="65"/><text x="32.2810%" y="111.50"></text></g><g><title>memchr::memchr::x86::memchr (65 samples, 0.51%)</title><rect x="32.0310%" y="85" width="0.5089%" height="15" fill="rgb(213,46,41)" fg:x="4091" fg:w="65"/><text x="32.2810%" y="95.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (61 samples, 0.48%)</title><rect x="32.0623%" y="69" width="0.4776%" height="15" fill="rgb(215,133,35)" fg:x="4095" fg:w="61"/><text x="32.3123%" y="79.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (49 samples, 0.38%)</title><rect x="32.1563%" y="53" width="0.3837%" height="15" fill="rgb(213,28,5)" fg:x="4107" fg:w="49"/><text x="32.4063%" y="63.50"></text></g><g><title>memchr::memchr::x86::sse2::forward_search1 (4 samples, 0.03%)</title><rect x="32.5086%" y="37" width="0.0313%" height="15" fill="rgb(215,77,49)" fg:x="4152" fg:w="4"/><text x="32.7586%" y="47.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (804 samples, 6.30%)</title><rect x="26.2919%" y="197" width="6.2950%" height="15" fill="rgb(248,100,22)" fg:x="3358" fg:w="804"/><text x="26.5419%" y="207.50">&lt;nom_loc..</text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.05%)</title><rect x="32.5399%" y="181" width="0.0470%" height="15" fill="rgb(208,67,9)" fg:x="4156" fg:w="6"/><text x="32.7899%" y="191.50"></text></g><g><title>zen_untrain_ret (6 samples, 0.05%)</title><rect x="32.5399%" y="165" width="0.0470%" height="15" fill="rgb(219,133,21)" fg:x="4156" fg:w="6"/><text x="32.7899%" y="175.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (1,068 samples, 8.36%)</title><rect x="24.2327%" y="245" width="8.3620%" height="15" fill="rgb(246,46,29)" fg:x="3095" fg:w="1068"/><text x="24.4827%" y="255.50">nom::bytes::..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (1,068 samples, 8.36%)</title><rect x="24.2327%" y="229" width="8.3620%" height="15" fill="rgb(246,185,52)" fg:x="3095" fg:w="1068"/><text x="24.4827%" y="239.50">&lt;nom_locate:..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position (1,068 samples, 8.36%)</title><rect x="24.2327%" y="213" width="8.3620%" height="15" fill="rgb(252,136,11)" fg:x="3095" fg:w="1068"/><text x="24.4827%" y="223.50">&lt;nom_locate:..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="35.4291%" y="229" width="0.0157%" height="15" fill="rgb(219,138,53)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="35.4291%" y="213" width="0.0157%" height="15" fill="rgb(211,51,23)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="223.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="35.4291%" y="197" width="0.0157%" height="15" fill="rgb(247,221,28)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="207.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.02%)</title><rect x="35.4291%" y="181" width="0.0157%" height="15" fill="rgb(251,222,45)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="191.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.02%)</title><rect x="35.4291%" y="165" width="0.0157%" height="15" fill="rgb(217,162,53)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="175.50"></text></g><g><title>tick_sched_timer (2 samples, 0.02%)</title><rect x="35.4291%" y="149" width="0.0157%" height="15" fill="rgb(229,93,14)" fg:x="4525" fg:w="2"/><text x="35.6791%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 0.89%)</title><rect x="37.7858%" y="133" width="0.8926%" height="15" fill="rgb(209,67,49)" fg:x="4826" fg:w="114"/><text x="38.0358%" y="143.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (157 samples, 1.23%)</title><rect x="37.4569%" y="213" width="1.2293%" height="15" fill="rgb(213,87,29)" fg:x="4784" fg:w="157"/><text x="37.7069%" y="223.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (157 samples, 1.23%)</title><rect x="37.4569%" y="197" width="1.2293%" height="15" fill="rgb(205,151,52)" fg:x="4784" fg:w="157"/><text x="37.7069%" y="207.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 1.23%)</title><rect x="37.4569%" y="181" width="1.2293%" height="15" fill="rgb(253,215,39)" fg:x="4784" fg:w="157"/><text x="37.7069%" y="191.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 1.23%)</title><rect x="37.4569%" y="165" width="1.2293%" height="15" fill="rgb(221,220,41)" fg:x="4784" fg:w="157"/><text x="37.7069%" y="175.50"></text></g><g><title>core::str::validations::next_code_point (157 samples, 1.23%)</title><rect x="37.4569%" y="149" width="1.2293%" height="15" fill="rgb(218,133,21)" fg:x="4784" fg:w="157"/><text x="37.7069%" y="159.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (52 samples, 0.41%)</title><rect x="43.6032%" y="181" width="0.4071%" height="15" fill="rgb(221,193,43)" fg:x="5569" fg:w="52"/><text x="43.8532%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (40 samples, 0.31%)</title><rect x="44.0103%" y="181" width="0.3132%" height="15" fill="rgb(240,128,52)" fg:x="5621" fg:w="40"/><text x="44.2603%" y="191.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (536 samples, 4.20%)</title><rect x="40.2991%" y="197" width="4.1967%" height="15" fill="rgb(253,114,12)" fg:x="5147" fg:w="536"/><text x="40.5491%" y="207.50">&lt;nom_..</text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (22 samples, 0.17%)</title><rect x="44.3235%" y="181" width="0.1723%" height="15" fill="rgb(215,223,47)" fg:x="5661" fg:w="22"/><text x="44.5735%" y="191.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (744 samples, 5.83%)</title><rect x="38.6862%" y="213" width="5.8252%" height="15" fill="rgb(248,225,23)" fg:x="4941" fg:w="744"/><text x="38.9362%" y="223.50">&lt;nom_lo..</text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}} (2,740 samples, 21.45%)</title><rect x="23.0661%" y="261" width="21.4532%" height="15" fill="rgb(250,108,0)" fg:x="2946" fg:w="2740"/><text x="23.3161%" y="271.50">hl7_parser::parser::sub_component_..</text></g><g><title>nom_locate::position (1,523 samples, 11.92%)</title><rect x="32.5947%" y="245" width="11.9245%" height="15" fill="rgb(228,208,7)" fg:x="4163" fg:w="1523"/><text x="32.8447%" y="255.50">nom_locate::positi..</text></g><g><title>nom::bytes::complete::take::{{closure}} (1,159 samples, 9.07%)</title><rect x="35.4447%" y="229" width="9.0745%" height="15" fill="rgb(244,45,10)" fg:x="4527" fg:w="1159"/><text x="35.6947%" y="239.50">nom::bytes::c..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2,796 samples, 21.89%)</title><rect x="22.8469%" y="277" width="21.8916%" height="15" fill="rgb(207,125,25)" fg:x="2918" fg:w="2796"/><text x="23.0969%" y="287.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;..</text></g><g><title>nom::character::complete::char::{{closure}} (28 samples, 0.22%)</title><rect x="44.5193%" y="261" width="0.2192%" height="15" fill="rgb(210,195,18)" fg:x="5686" fg:w="28"/><text x="44.7693%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.16%)</title><rect x="44.5819%" y="245" width="0.1566%" height="15" fill="rgb(249,80,12)" fg:x="5694" fg:w="20"/><text x="44.8319%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (20 samples, 0.16%)</title><rect x="44.5819%" y="229" width="0.1566%" height="15" fill="rgb(221,65,9)" fg:x="5694" fg:w="20"/><text x="44.8319%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="44.6524%" y="213" width="0.0861%" height="15" fill="rgb(235,49,36)" fg:x="5703" fg:w="11"/><text x="44.9024%" y="223.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="44.7385%" y="277" width="0.0470%" height="15" fill="rgb(225,32,20)" fg:x="5714" fg:w="6"/><text x="44.9885%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (40 samples, 0.31%)</title><rect x="45.8346%" y="229" width="0.3132%" height="15" fill="rgb(215,141,46)" fg:x="5854" fg:w="40"/><text x="46.0846%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (6 samples, 0.05%)</title><rect x="46.1478%" y="229" width="0.0470%" height="15" fill="rgb(250,160,47)" fg:x="5894" fg:w="6"/><text x="46.3978%" y="239.50"></text></g><g><title>__rdl_alloc (16 samples, 0.13%)</title><rect x="46.5315%" y="213" width="0.1253%" height="15" fill="rgb(216,222,40)" fg:x="5943" fg:w="16"/><text x="46.7815%" y="223.50"></text></g><g><title>__rust_alloc (23 samples, 0.18%)</title><rect x="46.6567%" y="213" width="0.1801%" height="15" fill="rgb(234,217,39)" fg:x="5959" fg:w="23"/><text x="46.9067%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (29 samples, 0.23%)</title><rect x="46.8368%" y="213" width="0.2271%" height="15" fill="rgb(207,178,40)" fg:x="5982" fg:w="29"/><text x="47.0868%" y="223.50"></text></g><g><title>[libc.so.6] (522 samples, 4.09%)</title><rect x="47.7842%" y="197" width="4.0871%" height="15" fill="rgb(221,136,13)" fg:x="6103" fg:w="522"/><text x="48.0342%" y="207.50">[lib..</text></g><g><title>[libc.so.6] (22 samples, 0.17%)</title><rect x="51.6990%" y="181" width="0.1723%" height="15" fill="rgb(249,199,10)" fg:x="6603" fg:w="22"/><text x="51.9490%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (726 samples, 5.68%)</title><rect x="46.1948%" y="229" width="5.6843%" height="15" fill="rgb(249,222,13)" fg:x="5900" fg:w="726"/><text x="46.4448%" y="239.50">alloc::..</text></g><g><title>malloc (615 samples, 4.82%)</title><rect x="47.0639%" y="213" width="4.8152%" height="15" fill="rgb(244,185,38)" fg:x="6011" fg:w="615"/><text x="47.3139%" y="223.50">malloc</text></g><g><title>core::alloc::layout::Layout::array (10 samples, 0.08%)</title><rect x="51.8791%" y="229" width="0.0783%" height="15" fill="rgb(236,202,9)" fg:x="6626" fg:w="10"/><text x="52.1291%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (10 samples, 0.08%)</title><rect x="51.8791%" y="213" width="0.0783%" height="15" fill="rgb(250,229,37)" fg:x="6626" fg:w="10"/><text x="52.1291%" y="223.50"></text></g><g><title>core::cmp::max (7 samples, 0.05%)</title><rect x="51.9574%" y="229" width="0.0548%" height="15" fill="rgb(206,174,23)" fg:x="6636" fg:w="7"/><text x="52.2074%" y="239.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.05%)</title><rect x="51.9574%" y="213" width="0.0548%" height="15" fill="rgb(211,33,43)" fg:x="6636" fg:w="7"/><text x="52.2074%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (816 samples, 6.39%)</title><rect x="45.7250%" y="261" width="6.3890%" height="15" fill="rgb(245,58,50)" fg:x="5840" fg:w="816"/><text x="45.9750%" y="271.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (812 samples, 6.36%)</title><rect x="45.7563%" y="245" width="6.3577%" height="15" fill="rgb(244,68,36)" fg:x="5844" fg:w="812"/><text x="46.0063%" y="255.50">alloc::r..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (13 samples, 0.10%)</title><rect x="52.0122%" y="229" width="0.1018%" height="15" fill="rgb(232,229,15)" fg:x="6643" fg:w="13"/><text x="52.2622%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (13 samples, 0.10%)</title><rect x="52.0122%" y="213" width="0.1018%" height="15" fill="rgb(254,30,23)" fg:x="6643" fg:w="13"/><text x="52.2622%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="52.1140%" y="261" width="0.0313%" height="15" fill="rgb(235,160,14)" fg:x="6656" fg:w="4"/><text x="52.3640%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="52.1140%" y="245" width="0.0313%" height="15" fill="rgb(212,155,44)" fg:x="6656" fg:w="4"/><text x="52.3640%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (943 samples, 7.38%)</title><rect x="44.7855%" y="277" width="7.3833%" height="15" fill="rgb(226,2,50)" fg:x="5720" fg:w="943"/><text x="45.0355%" y="287.50">alloc::vec..</text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="52.1531%" y="261" width="0.0157%" height="15" fill="rgb(234,177,6)" fg:x="6661" fg:w="2"/><text x="52.4031%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (10 samples, 0.08%)</title><rect x="52.1688%" y="277" width="0.0783%" height="15" fill="rgb(217,24,9)" fg:x="6663" fg:w="10"/><text x="52.4188%" y="287.50"></text></g><g><title>hl7_parser::parser::sub_components_parser::{{closure}} (4,134 samples, 32.37%)</title><rect x="19.8951%" y="309" width="32.3677%" height="15" fill="rgb(220,13,46)" fg:x="2541" fg:w="4134"/><text x="20.1451%" y="319.50">hl7_parser::parser::sub_components_parser::{{closure..</text></g><g><title>nom::multi::separated_list0::{{closure}} (4,134 samples, 32.37%)</title><rect x="19.8951%" y="293" width="32.3677%" height="15" fill="rgb(239,221,27)" fg:x="2541" fg:w="4134"/><text x="20.1451%" y="303.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>asm_common_interrupt (2 samples, 0.02%)</title><rect x="52.2471%" y="277" width="0.0157%" height="15" fill="rgb(222,198,25)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="287.50"></text></g><g><title>common_interrupt (2 samples, 0.02%)</title><rect x="52.2471%" y="261" width="0.0157%" height="15" fill="rgb(211,99,13)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="271.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="52.2471%" y="245" width="0.0157%" height="15" fill="rgb(232,111,31)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="255.50"></text></g><g><title>do_softirq_own_stack (2 samples, 0.02%)</title><rect x="52.2471%" y="229" width="0.0157%" height="15" fill="rgb(245,82,37)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="239.50"></text></g><g><title>asm_call_irq_on_stack (2 samples, 0.02%)</title><rect x="52.2471%" y="213" width="0.0157%" height="15" fill="rgb(227,149,46)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="223.50"></text></g><g><title>__do_softirq (2 samples, 0.02%)</title><rect x="52.2471%" y="197" width="0.0157%" height="15" fill="rgb(218,36,50)" fg:x="6673" fg:w="2"/><text x="52.4971%" y="207.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (104 samples, 0.81%)</title><rect x="58.1115%" y="277" width="0.8143%" height="15" fill="rgb(226,80,48)" fg:x="7422" fg:w="104"/><text x="58.3615%" y="287.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (104 samples, 0.81%)</title><rect x="58.1115%" y="261" width="0.8143%" height="15" fill="rgb(238,224,15)" fg:x="7422" fg:w="104"/><text x="58.3615%" y="271.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.81%)</title><rect x="58.1115%" y="245" width="0.8143%" height="15" fill="rgb(241,136,10)" fg:x="7422" fg:w="104"/><text x="58.3615%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.81%)</title><rect x="58.1115%" y="229" width="0.8143%" height="15" fill="rgb(208,32,45)" fg:x="7422" fg:w="104"/><text x="58.3615%" y="239.50"></text></g><g><title>core::str::validations::next_code_point (104 samples, 0.81%)</title><rect x="58.1115%" y="213" width="0.8143%" height="15" fill="rgb(207,135,9)" fg:x="7422" fg:w="104"/><text x="58.3615%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.44%)</title><rect x="58.4873%" y="197" width="0.4385%" height="15" fill="rgb(206,86,44)" fg:x="7470" fg:w="56"/><text x="58.7373%" y="207.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (119 samples, 0.93%)</title><rect x="64.7354%" y="245" width="0.9317%" height="15" fill="rgb(245,177,15)" fg:x="8268" fg:w="119"/><text x="64.9854%" y="255.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (172 samples, 1.35%)</title><rect x="65.6671%" y="245" width="1.3467%" height="15" fill="rgb(206,64,50)" fg:x="8387" fg:w="172"/><text x="65.9171%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (8 samples, 0.06%)</title><rect x="66.9511%" y="229" width="0.0626%" height="15" fill="rgb(234,36,40)" fg:x="8551" fg:w="8"/><text x="67.2011%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (8 samples, 0.06%)</title><rect x="66.9511%" y="213" width="0.0626%" height="15" fill="rgb(213,64,8)" fg:x="8551" fg:w="8"/><text x="67.2011%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (8 samples, 0.06%)</title><rect x="66.9511%" y="197" width="0.0626%" height="15" fill="rgb(210,75,36)" fg:x="8551" fg:w="8"/><text x="67.2011%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (8 samples, 0.06%)</title><rect x="66.9511%" y="181" width="0.0626%" height="15" fill="rgb(229,88,21)" fg:x="8551" fg:w="8"/><text x="67.2011%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (126 samples, 0.99%)</title><rect x="67.0138%" y="245" width="0.9865%" height="15" fill="rgb(252,204,47)" fg:x="8559" fg:w="126"/><text x="67.2638%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (1,160 samples, 9.08%)</title><rect x="58.9258%" y="277" width="9.0824%" height="15" fill="rgb(208,77,27)" fg:x="7526" fg:w="1160"/><text x="59.1758%" y="287.50">&lt;nom_locate::..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (657 samples, 5.14%)</title><rect x="62.8641%" y="261" width="5.1441%" height="15" fill="rgb(221,76,26)" fg:x="8029" fg:w="657"/><text x="63.1141%" y="271.50">&lt;nom_l..</text></g><g><title>hl7_parser::parser::component_parser::{{closure}} (6,457 samples, 50.56%)</title><rect x="17.4601%" y="325" width="50.5559%" height="15" fill="rgb(225,139,18)" fg:x="2230" fg:w="6457"/><text x="17.7101%" y="335.50">hl7_parser::parser::component_parser::{{closure}}</text></g><g><title>nom_locate::position (2,012 samples, 15.75%)</title><rect x="52.2628%" y="309" width="15.7532%" height="15" fill="rgb(230,137,11)" fg:x="6675" fg:w="2012"/><text x="52.5128%" y="319.50">nom_locate::position</text></g><g><title>nom::bytes::complete::take::{{closure}} (1,810 samples, 14.17%)</title><rect x="53.8443%" y="293" width="14.1716%" height="15" fill="rgb(212,28,1)" fg:x="6877" fg:w="1810"/><text x="54.0943%" y="303.50">nom::bytes::complete::..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="68.1726%" y="309" width="0.0861%" height="15" fill="rgb(248,164,17)" fg:x="8707" fg:w="11"/><text x="68.4226%" y="319.50"></text></g><g><title>core::str::validations::next_code_point (11 samples, 0.09%)</title><rect x="68.1726%" y="293" width="0.0861%" height="15" fill="rgb(222,171,42)" fg:x="8707" fg:w="11"/><text x="68.4226%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="68.2274%" y="277" width="0.0313%" height="15" fill="rgb(243,84,45)" fg:x="8714" fg:w="4"/><text x="68.4774%" y="287.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (7 samples, 0.05%)</title><rect x="68.3761%" y="293" width="0.0548%" height="15" fill="rgb(252,49,23)" fg:x="8733" fg:w="7"/><text x="68.6261%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (10 samples, 0.08%)</title><rect x="68.4309%" y="293" width="0.0783%" height="15" fill="rgb(215,19,7)" fg:x="8740" fg:w="10"/><text x="68.6809%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.02%)</title><rect x="68.4936%" y="277" width="0.0157%" height="15" fill="rgb(238,81,41)" fg:x="8748" fg:w="2"/><text x="68.7436%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.02%)</title><rect x="68.4936%" y="261" width="0.0157%" height="15" fill="rgb(210,199,37)" fg:x="8748" fg:w="2"/><text x="68.7436%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.02%)</title><rect x="68.4936%" y="245" width="0.0157%" height="15" fill="rgb(244,192,49)" fg:x="8748" fg:w="2"/><text x="68.7436%" y="255.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (12 samples, 0.09%)</title><rect x="68.5092%" y="293" width="0.0940%" height="15" fill="rgb(226,211,11)" fg:x="8750" fg:w="12"/><text x="68.7592%" y="303.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,578 samples, 51.50%)</title><rect x="17.1860%" y="341" width="51.5033%" height="15" fill="rgb(236,162,54)" fg:x="2195" fg:w="6578"/><text x="17.4360%" y="351.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (86 samples, 0.67%)</title><rect x="68.0160%" y="325" width="0.6733%" height="15" fill="rgb(220,229,9)" fg:x="8687" fg:w="86"/><text x="68.2660%" y="335.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (55 samples, 0.43%)</title><rect x="68.2587%" y="309" width="0.4306%" height="15" fill="rgb(250,87,22)" fg:x="8718" fg:w="55"/><text x="68.5087%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (11 samples, 0.09%)</title><rect x="68.6032%" y="293" width="0.0861%" height="15" fill="rgb(239,43,17)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.09%)</title><rect x="68.6032%" y="277" width="0.0861%" height="15" fill="rgb(231,177,25)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="287.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="68.6032%" y="261" width="0.0861%" height="15" fill="rgb(219,179,1)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="271.50"></text></g><g><title>memchr::memchr::memchr (11 samples, 0.09%)</title><rect x="68.6032%" y="245" width="0.0861%" height="15" fill="rgb(238,219,53)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="255.50"></text></g><g><title>memchr::memchr::memchr::imp (11 samples, 0.09%)</title><rect x="68.6032%" y="229" width="0.0861%" height="15" fill="rgb(232,167,36)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="239.50"></text></g><g><title>memchr::memchr::x86::memchr (11 samples, 0.09%)</title><rect x="68.6032%" y="213" width="0.0861%" height="15" fill="rgb(244,19,51)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="223.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (11 samples, 0.09%)</title><rect x="68.6032%" y="197" width="0.0861%" height="15" fill="rgb(224,6,22)" fg:x="8762" fg:w="11"/><text x="68.8532%" y="207.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (4 samples, 0.03%)</title><rect x="68.6580%" y="181" width="0.0313%" height="15" fill="rgb(224,145,5)" fg:x="8769" fg:w="4"/><text x="68.9080%" y="191.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (17 samples, 0.13%)</title><rect x="68.6893%" y="341" width="0.1331%" height="15" fill="rgb(234,130,49)" fg:x="8773" fg:w="17"/><text x="68.9393%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.36%)</title><rect x="69.5741%" y="293" width="0.3602%" height="15" fill="rgb(254,6,2)" fg:x="8886" fg:w="46"/><text x="69.8241%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.02%)</title><rect x="69.9342%" y="293" width="0.0235%" height="15" fill="rgb(208,96,46)" fg:x="8932" fg:w="3"/><text x="70.1842%" y="303.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="70.3805%" y="229" width="0.0235%" height="15" fill="rgb(239,3,39)" fg:x="8989" fg:w="3"/><text x="70.6305%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.02%)</title><rect x="70.3883%" y="213" width="0.0157%" height="15" fill="rgb(233,210,1)" fg:x="8990" fg:w="2"/><text x="70.6383%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="70.9286%" y="181" width="0.0235%" height="15" fill="rgb(244,137,37)" fg:x="9059" fg:w="3"/><text x="71.1786%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (74 samples, 0.58%)</title><rect x="70.3805%" y="277" width="0.5794%" height="15" fill="rgb(240,136,2)" fg:x="8989" fg:w="74"/><text x="70.6305%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (74 samples, 0.58%)</title><rect x="70.3805%" y="261" width="0.5794%" height="15" fill="rgb(239,18,37)" fg:x="8989" fg:w="74"/><text x="70.6305%" y="271.50"></text></g><g><title>alloc::alloc::realloc (74 samples, 0.58%)</title><rect x="70.3805%" y="245" width="0.5794%" height="15" fill="rgb(218,185,22)" fg:x="8989" fg:w="74"/><text x="70.6305%" y="255.50"></text></g><g><title>realloc (70 samples, 0.55%)</title><rect x="70.4118%" y="229" width="0.5481%" height="15" fill="rgb(225,218,4)" fg:x="8993" fg:w="70"/><text x="70.6618%" y="239.50"></text></g><g><title>[libc.so.6] (65 samples, 0.51%)</title><rect x="70.4510%" y="213" width="0.5089%" height="15" fill="rgb(230,182,32)" fg:x="8998" fg:w="65"/><text x="70.7010%" y="223.50"></text></g><g><title>[libc.so.6] (55 samples, 0.43%)</title><rect x="70.5293%" y="197" width="0.4306%" height="15" fill="rgb(242,56,43)" fg:x="9008" fg:w="55"/><text x="70.7793%" y="207.50"></text></g><g><title>__rdl_alloc (9 samples, 0.07%)</title><rect x="70.9599%" y="277" width="0.0705%" height="15" fill="rgb(233,99,24)" fg:x="9063" fg:w="9"/><text x="71.2099%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="71.0147%" y="261" width="0.0157%" height="15" fill="rgb(234,209,42)" fg:x="9070" fg:w="2"/><text x="71.2647%" y="271.50"></text></g><g><title>__rust_alloc (19 samples, 0.15%)</title><rect x="71.0304%" y="277" width="0.1488%" height="15" fill="rgb(227,7,12)" fg:x="9072" fg:w="19"/><text x="71.2804%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (34 samples, 0.27%)</title><rect x="71.1791%" y="277" width="0.2662%" height="15" fill="rgb(245,203,43)" fg:x="9091" fg:w="34"/><text x="71.4291%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (878 samples, 6.87%)</title><rect x="69.9577%" y="293" width="6.8744%" height="15" fill="rgb(238,205,33)" fg:x="8935" fg:w="878"/><text x="70.2077%" y="303.50">alloc::ra..</text></g><g><title>malloc (688 samples, 5.39%)</title><rect x="71.4453%" y="277" width="5.3868%" height="15" fill="rgb(231,56,7)" fg:x="9125" fg:w="688"/><text x="71.6953%" y="287.50">malloc</text></g><g><title>[libc.so.6] (604 samples, 4.73%)</title><rect x="72.1030%" y="261" width="4.7291%" height="15" fill="rgb(244,186,29)" fg:x="9209" fg:w="604"/><text x="72.3530%" y="271.50">[libc...</text></g><g><title>[libc.so.6] (41 samples, 0.32%)</title><rect x="76.5111%" y="245" width="0.3210%" height="15" fill="rgb(234,111,31)" fg:x="9772" fg:w="41"/><text x="76.7611%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (7 samples, 0.05%)</title><rect x="76.8321%" y="293" width="0.0548%" height="15" fill="rgb(241,149,10)" fg:x="9813" fg:w="7"/><text x="77.0821%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (7 samples, 0.05%)</title><rect x="76.8321%" y="277" width="0.0548%" height="15" fill="rgb(249,206,44)" fg:x="9813" fg:w="7"/><text x="77.0821%" y="287.50"></text></g><g><title>core::cmp::max (10 samples, 0.08%)</title><rect x="76.8869%" y="293" width="0.0783%" height="15" fill="rgb(251,153,30)" fg:x="9820" fg:w="10"/><text x="77.1369%" y="303.50"></text></g><g><title>core::cmp::Ord::max (10 samples, 0.08%)</title><rect x="76.8869%" y="277" width="0.0783%" height="15" fill="rgb(239,152,38)" fg:x="9820" fg:w="10"/><text x="77.1369%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (964 samples, 7.55%)</title><rect x="69.4410%" y="325" width="7.5478%" height="15" fill="rgb(249,139,47)" fg:x="8869" fg:w="964"/><text x="69.6910%" y="335.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (952 samples, 7.45%)</title><rect x="69.5349%" y="309" width="7.4538%" height="15" fill="rgb(244,64,35)" fg:x="8881" fg:w="952"/><text x="69.7849%" y="319.50">alloc::raw..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.02%)</title><rect x="76.9652%" y="293" width="0.0235%" height="15" fill="rgb(216,46,15)" fg:x="9830" fg:w="3"/><text x="77.2152%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.02%)</title><rect x="76.9652%" y="277" width="0.0235%" height="15" fill="rgb(250,74,19)" fg:x="9830" fg:w="3"/><text x="77.2152%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="76.9887%" y="325" width="0.0313%" height="15" fill="rgb(249,42,33)" fg:x="9833" fg:w="4"/><text x="77.2387%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="76.9887%" y="309" width="0.0313%" height="15" fill="rgb(242,149,17)" fg:x="9833" fg:w="4"/><text x="77.2387%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="77.0200%" y="325" width="0.0157%" height="15" fill="rgb(244,29,21)" fg:x="9837" fg:w="2"/><text x="77.2700%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="77.0200%" y="309" width="0.0157%" height="15" fill="rgb(220,130,37)" fg:x="9837" fg:w="2"/><text x="77.2700%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,164 samples, 9.11%)</title><rect x="68.8224%" y="341" width="9.1137%" height="15" fill="rgb(211,67,2)" fg:x="8790" fg:w="1164"/><text x="69.0724%" y="351.50">alloc::vec::V..</text></g><g><title>core::ptr::write (115 samples, 0.90%)</title><rect x="77.0357%" y="325" width="0.9004%" height="15" fill="rgb(235,68,52)" fg:x="9839" fg:w="115"/><text x="77.2857%" y="335.50"></text></g><g><title>hl7_parser::parser::components_parser::{{closure}} (7,835 samples, 61.35%)</title><rect x="16.6458%" y="373" width="61.3451%" height="15" fill="rgb(246,142,3)" fg:x="2126" fg:w="7835"/><text x="16.8958%" y="383.50">hl7_parser::parser::components_parser::{{closure}}</text></g><g><title>nom::multi::separated_list0::{{closure}} (7,828 samples, 61.29%)</title><rect x="16.7006%" y="357" width="61.2903%" height="15" fill="rgb(241,25,7)" fg:x="2133" fg:w="7828"/><text x="16.9506%" y="367.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (7 samples, 0.05%)</title><rect x="77.9361%" y="341" width="0.0548%" height="15" fill="rgb(242,119,39)" fg:x="9954" fg:w="7"/><text x="78.1861%" y="351.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (97 samples, 0.76%)</title><rect x="83.1115%" y="341" width="0.7595%" height="15" fill="rgb(241,98,45)" fg:x="10615" fg:w="97"/><text x="83.3615%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (97 samples, 0.76%)</title><rect x="83.1115%" y="325" width="0.7595%" height="15" fill="rgb(254,28,30)" fg:x="10615" fg:w="97"/><text x="83.3615%" y="335.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 0.76%)</title><rect x="83.1115%" y="309" width="0.7595%" height="15" fill="rgb(241,142,54)" fg:x="10615" fg:w="97"/><text x="83.3615%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 0.76%)</title><rect x="83.1115%" y="293" width="0.7595%" height="15" fill="rgb(222,85,15)" fg:x="10615" fg:w="97"/><text x="83.3615%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (97 samples, 0.76%)</title><rect x="83.1115%" y="277" width="0.7595%" height="15" fill="rgb(210,85,47)" fg:x="10615" fg:w="97"/><text x="83.3615%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.42%)</title><rect x="83.4482%" y="261" width="0.4228%" height="15" fill="rgb(224,206,25)" fg:x="10658" fg:w="54"/><text x="83.6982%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (75 samples, 0.59%)</title><rect x="90.9411%" y="309" width="0.5872%" height="15" fill="rgb(243,201,19)" fg:x="11615" fg:w="75"/><text x="91.1911%" y="319.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (97 samples, 0.76%)</title><rect x="91.5283%" y="309" width="0.7595%" height="15" fill="rgb(236,59,4)" fg:x="11690" fg:w="97"/><text x="91.7783%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.02%)</title><rect x="92.2722%" y="293" width="0.0157%" height="15" fill="rgb(254,179,45)" fg:x="11785" fg:w="2"/><text x="92.5222%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.02%)</title><rect x="92.2722%" y="277" width="0.0157%" height="15" fill="rgb(226,14,10)" fg:x="11785" fg:w="2"/><text x="92.5222%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.02%)</title><rect x="92.2722%" y="261" width="0.0157%" height="15" fill="rgb(244,27,41)" fg:x="11785" fg:w="2"/><text x="92.5222%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.02%)</title><rect x="92.2722%" y="245" width="0.0157%" height="15" fill="rgb(235,35,32)" fg:x="11785" fg:w="2"/><text x="92.5222%" y="255.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (38 samples, 0.30%)</title><rect x="92.2878%" y="309" width="0.2975%" height="15" fill="rgb(218,68,31)" fg:x="11787" fg:w="38"/><text x="92.5378%" y="319.50"></text></g><g><title>handle_edge_irq (2 samples, 0.02%)</title><rect x="92.5853%" y="277" width="0.0157%" height="15" fill="rgb(207,120,37)" fg:x="11825" fg:w="2"/><text x="92.8353%" y="287.50"></text></g><g><title>handle_irq_event (2 samples, 0.02%)</title><rect x="92.5853%" y="261" width="0.0157%" height="15" fill="rgb(227,98,0)" fg:x="11825" fg:w="2"/><text x="92.8353%" y="271.50"></text></g><g><title>asm_common_interrupt (4 samples, 0.03%)</title><rect x="92.5853%" y="309" width="0.0313%" height="15" fill="rgb(207,7,3)" fg:x="11825" fg:w="4"/><text x="92.8353%" y="319.50"></text></g><g><title>common_interrupt (4 samples, 0.03%)</title><rect x="92.5853%" y="293" width="0.0313%" height="15" fill="rgb(206,98,19)" fg:x="11825" fg:w="4"/><text x="92.8353%" y="303.50"></text></g><g><title>irq_exit_rcu (2 samples, 0.02%)</title><rect x="92.6010%" y="277" width="0.0157%" height="15" fill="rgb(217,5,26)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="287.50"></text></g><g><title>do_softirq_own_stack (2 samples, 0.02%)</title><rect x="92.6010%" y="261" width="0.0157%" height="15" fill="rgb(235,190,38)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="271.50"></text></g><g><title>asm_call_irq_on_stack (2 samples, 0.02%)</title><rect x="92.6010%" y="245" width="0.0157%" height="15" fill="rgb(247,86,24)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="255.50"></text></g><g><title>__do_softirq (2 samples, 0.02%)</title><rect x="92.6010%" y="229" width="0.0157%" height="15" fill="rgb(205,101,16)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="239.50"></text></g><g><title>net_rx_action (2 samples, 0.02%)</title><rect x="92.6010%" y="213" width="0.0157%" height="15" fill="rgb(246,168,33)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="223.50"></text></g><g><title>rtl8168_poll (2 samples, 0.02%)</title><rect x="92.6010%" y="197" width="0.0157%" height="15" fill="rgb(231,114,1)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="207.50"></text></g><g><title>napi_complete_done (2 samples, 0.02%)</title><rect x="92.6010%" y="181" width="0.0157%" height="15" fill="rgb(207,184,53)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="191.50"></text></g><g><title>netif_receive_skb_list_internal (2 samples, 0.02%)</title><rect x="92.6010%" y="165" width="0.0157%" height="15" fill="rgb(224,95,51)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="175.50"></text></g><g><title>__netif_receive_skb_list_core (2 samples, 0.02%)</title><rect x="92.6010%" y="149" width="0.0157%" height="15" fill="rgb(212,188,45)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="159.50"></text></g><g><title>ip_list_rcv (2 samples, 0.02%)</title><rect x="92.6010%" y="133" width="0.0157%" height="15" fill="rgb(223,154,38)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="143.50"></text></g><g><title>ip_sublist_rcv (2 samples, 0.02%)</title><rect x="92.6010%" y="117" width="0.0157%" height="15" fill="rgb(251,22,52)" fg:x="11827" fg:w="2"/><text x="92.8510%" y="127.50"></text></g><g><title>hl7_parser::parser::field_parser::{{closure}} (9,804 samples, 76.76%)</title><rect x="15.8628%" y="389" width="76.7617%" height="15" fill="rgb(229,209,22)" fg:x="2026" fg:w="9804"/><text x="16.1128%" y="399.50">hl7_parser::parser::field_parser::{{closure}}</text></g><g><title>nom_locate::position (1,869 samples, 14.63%)</title><rect x="77.9909%" y="373" width="14.6336%" height="15" fill="rgb(234,138,34)" fg:x="9961" fg:w="1869"/><text x="78.2409%" y="383.50">nom_locate::position</text></g><g><title>nom::bytes::complete::take::{{closure}} (1,633 samples, 12.79%)</title><rect x="79.8387%" y="357" width="12.7858%" height="15" fill="rgb(212,95,11)" fg:x="10197" fg:w="1633"/><text x="80.0887%" y="367.50">nom::bytes::complet..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (1,118 samples, 8.75%)</title><rect x="83.8710%" y="341" width="8.7535%" height="15" fill="rgb(240,179,47)" fg:x="10712" fg:w="1118"/><text x="84.1210%" y="351.50">&lt;nom_locate:..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (876 samples, 6.86%)</title><rect x="85.7657%" y="325" width="6.8588%" height="15" fill="rgb(240,163,11)" fg:x="10954" fg:w="876"/><text x="86.0157%" y="335.50">&lt;nom_loca..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="93.0081%" y="373" width="0.0470%" height="15" fill="rgb(236,37,12)" fg:x="11879" fg:w="6"/><text x="93.2581%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.05%)</title><rect x="93.0081%" y="357" width="0.0470%" height="15" fill="rgb(232,164,16)" fg:x="11879" fg:w="6"/><text x="93.2581%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="93.0316%" y="341" width="0.0235%" height="15" fill="rgb(244,205,15)" fg:x="11882" fg:w="3"/><text x="93.2816%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (27 samples, 0.21%)</title><rect x="94.7620%" y="357" width="0.2114%" height="15" fill="rgb(223,117,47)" fg:x="12103" fg:w="27"/><text x="95.0120%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (32 samples, 0.25%)</title><rect x="94.9734%" y="357" width="0.2505%" height="15" fill="rgb(244,107,35)" fg:x="12130" fg:w="32"/><text x="95.2234%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (39 samples, 0.31%)</title><rect x="95.2239%" y="357" width="0.3054%" height="15" fill="rgb(205,140,8)" fg:x="12162" fg:w="39"/><text x="95.4739%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (8 samples, 0.06%)</title><rect x="95.5449%" y="261" width="0.0626%" height="15" fill="rgb(228,84,46)" fg:x="12203" fg:w="8"/><text x="95.7949%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.06%)</title><rect x="95.5449%" y="245" width="0.0626%" height="15" fill="rgb(254,188,9)" fg:x="12203" fg:w="8"/><text x="95.7949%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (348 samples, 2.72%)</title><rect x="93.0551%" y="373" width="2.7247%" height="15" fill="rgb(206,112,54)" fg:x="11885" fg:w="348"/><text x="93.3051%" y="383.50">&lt;n..</text></g><g><title>core::iter::traits::iterator::Iterator::count (31 samples, 0.24%)</title><rect x="95.5371%" y="357" width="0.2427%" height="15" fill="rgb(216,84,49)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (31 samples, 0.24%)</title><rect x="95.5371%" y="341" width="0.2427%" height="15" fill="rgb(214,194,35)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="351.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.24%)</title><rect x="95.5371%" y="325" width="0.2427%" height="15" fill="rgb(249,28,3)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="335.50"></text></g><g><title>memchr::memchr::memchr (31 samples, 0.24%)</title><rect x="95.5371%" y="309" width="0.2427%" height="15" fill="rgb(222,56,52)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="319.50"></text></g><g><title>memchr::memchr::memchr::imp (31 samples, 0.24%)</title><rect x="95.5371%" y="293" width="0.2427%" height="15" fill="rgb(245,217,50)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="303.50"></text></g><g><title>memchr::memchr::x86::memchr (31 samples, 0.24%)</title><rect x="95.5371%" y="277" width="0.2427%" height="15" fill="rgb(213,201,24)" fg:x="12202" fg:w="31"/><text x="95.7871%" y="287.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (22 samples, 0.17%)</title><rect x="95.6076%" y="261" width="0.1723%" height="15" fill="rgb(248,116,28)" fg:x="12211" fg:w="22"/><text x="95.8576%" y="271.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (12 samples, 0.09%)</title><rect x="95.6859%" y="245" width="0.0940%" height="15" fill="rgb(219,72,43)" fg:x="12221" fg:w="12"/><text x="95.9359%" y="255.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.02%)</title><rect x="95.7798%" y="373" width="0.0157%" height="15" fill="rgb(209,138,14)" fg:x="12233" fg:w="2"/><text x="96.0298%" y="383.50"></text></g><g><title>common_interrupt (2 samples, 0.02%)</title><rect x="95.7798%" y="357" width="0.0157%" height="15" fill="rgb(222,18,33)" fg:x="12233" fg:w="2"/><text x="96.0298%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,236 samples, 80.14%)</title><rect x="15.6671%" y="405" width="80.1441%" height="15" fill="rgb(213,199,7)" fg:x="2001" fg:w="10236"/><text x="15.9171%" y="415.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (407 samples, 3.19%)</title><rect x="92.6245%" y="389" width="3.1867%" height="15" fill="rgb(250,110,10)" fg:x="11830" fg:w="407"/><text x="92.8745%" y="399.50">nom..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (20 samples, 0.16%)</title><rect x="95.8111%" y="405" width="0.1566%" height="15" fill="rgb(248,123,6)" fg:x="12237" fg:w="20"/><text x="96.0611%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.04%)</title><rect x="96.2731%" y="357" width="0.0391%" height="15" fill="rgb(206,91,31)" fg:x="12296" fg:w="5"/><text x="96.5231%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="96.3122%" y="357" width="0.0313%" height="15" fill="rgb(211,154,13)" fg:x="12301" fg:w="4"/><text x="96.5622%" y="367.50"></text></g><g><title>__rdl_realloc (5 samples, 0.04%)</title><rect x="96.3905%" y="293" width="0.0391%" height="15" fill="rgb(225,148,7)" fg:x="12311" fg:w="5"/><text x="96.6405%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.03%)</title><rect x="96.3984%" y="277" width="0.0313%" height="15" fill="rgb(220,160,43)" fg:x="12312" fg:w="4"/><text x="96.6484%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (194 samples, 1.52%)</title><rect x="96.3905%" y="341" width="1.5189%" height="15" fill="rgb(213,52,39)" fg:x="12311" fg:w="194"/><text x="96.6405%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (194 samples, 1.52%)</title><rect x="96.3905%" y="325" width="1.5189%" height="15" fill="rgb(243,137,7)" fg:x="12311" fg:w="194"/><text x="96.6405%" y="335.50"></text></g><g><title>alloc::alloc::realloc (194 samples, 1.52%)</title><rect x="96.3905%" y="309" width="1.5189%" height="15" fill="rgb(230,79,13)" fg:x="12311" fg:w="194"/><text x="96.6405%" y="319.50"></text></g><g><title>realloc (189 samples, 1.48%)</title><rect x="96.4297%" y="293" width="1.4798%" height="15" fill="rgb(247,105,23)" fg:x="12316" fg:w="189"/><text x="96.6797%" y="303.50"></text></g><g><title>[libc.so.6] (177 samples, 1.39%)</title><rect x="96.5236%" y="277" width="1.3858%" height="15" fill="rgb(223,179,41)" fg:x="12328" fg:w="177"/><text x="96.7736%" y="287.50"></text></g><g><title>[libc.so.6] (158 samples, 1.24%)</title><rect x="96.6724%" y="261" width="1.2371%" height="15" fill="rgb(218,9,34)" fg:x="12347" fg:w="158"/><text x="96.9224%" y="271.50"></text></g><g><title>[libc.so.6] (68 samples, 0.53%)</title><rect x="97.3771%" y="245" width="0.5324%" height="15" fill="rgb(222,106,8)" fg:x="12437" fg:w="68"/><text x="97.6271%" y="255.50"></text></g><g><title>[libc.so.6] (10 samples, 0.08%)</title><rect x="97.8312%" y="229" width="0.0783%" height="15" fill="rgb(211,220,0)" fg:x="12495" fg:w="10"/><text x="98.0812%" y="239.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="97.9173%" y="341" width="0.0235%" height="15" fill="rgb(229,52,16)" fg:x="12506" fg:w="3"/><text x="98.1673%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="97.9408%" y="341" width="0.0157%" height="15" fill="rgb(212,155,18)" fg:x="12509" fg:w="2"/><text x="98.1908%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (220 samples, 1.72%)</title><rect x="96.3514%" y="357" width="1.7225%" height="15" fill="rgb(242,21,14)" fg:x="12306" fg:w="220"/><text x="96.6014%" y="367.50"></text></g><g><title>malloc (15 samples, 0.12%)</title><rect x="97.9565%" y="341" width="0.1174%" height="15" fill="rgb(222,19,48)" fg:x="12511" fg:w="15"/><text x="98.2065%" y="351.50"></text></g><g><title>[libc.so.6] (13 samples, 0.10%)</title><rect x="97.9721%" y="325" width="0.1018%" height="15" fill="rgb(232,45,27)" fg:x="12513" fg:w="13"/><text x="98.2221%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (234 samples, 1.83%)</title><rect x="96.2496%" y="389" width="1.8321%" height="15" fill="rgb(249,103,42)" fg:x="12293" fg:w="234"/><text x="96.4996%" y="399.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (233 samples, 1.82%)</title><rect x="96.2574%" y="373" width="1.8243%" height="15" fill="rgb(246,81,33)" fg:x="12294" fg:w="233"/><text x="96.5074%" y="383.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.03%)</title><rect x="98.0817%" y="389" width="0.0313%" height="15" fill="rgb(252,33,42)" fg:x="12527" fg:w="4"/><text x="98.3317%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.03%)</title><rect x="98.0817%" y="373" width="0.0313%" height="15" fill="rgb(209,212,41)" fg:x="12527" fg:w="4"/><text x="98.3317%" y="383.50"></text></g><g><title>hl7_parser::parser::fields_parser::{{closure}} (10,837 samples, 84.85%)</title><rect x="13.3887%" y="437" width="84.8497%" height="15" fill="rgb(207,154,6)" fg:x="1710" fg:w="10837"/><text x="13.6387%" y="447.50">hl7_parser::parser::fields_parser::{{closure}}</text></g><g><title>nom::multi::separated_list0::{{closure}} (10,836 samples, 84.84%)</title><rect x="13.3965%" y="421" width="84.8418%" height="15" fill="rgb(223,64,47)" fg:x="1711" fg:w="10836"/><text x="13.6465%" y="431.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (290 samples, 2.27%)</title><rect x="95.9677%" y="405" width="2.2706%" height="15" fill="rgb(211,161,38)" fg:x="12257" fg:w="290"/><text x="96.2177%" y="415.50">a..</text></g><g><title>core::ptr::write (16 samples, 0.13%)</title><rect x="98.1131%" y="389" width="0.1253%" height="15" fill="rgb(219,138,40)" fg:x="12531" fg:w="16"/><text x="98.3631%" y="399.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="98.2697%" y="421" width="0.0313%" height="15" fill="rgb(241,228,46)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="431.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="98.2697%" y="405" width="0.0313%" height="15" fill="rgb(223,209,38)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="415.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="98.2697%" y="389" width="0.0313%" height="15" fill="rgb(236,164,45)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="98.2697%" y="373" width="0.0313%" height="15" fill="rgb(231,15,5)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.03%)</title><rect x="98.2697%" y="357" width="0.0313%" height="15" fill="rgb(252,35,15)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="98.2697%" y="341" width="0.0313%" height="15" fill="rgb(248,181,18)" fg:x="12551" fg:w="4"/><text x="98.5197%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="98.3401%" y="389" width="0.0157%" height="15" fill="rgb(233,39,42)" fg:x="12560" fg:w="2"/><text x="98.5901%" y="399.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (17 samples, 0.13%)</title><rect x="98.2383%" y="437" width="0.1331%" height="15" fill="rgb(238,110,33)" fg:x="12547" fg:w="17"/><text x="98.4883%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (9 samples, 0.07%)</title><rect x="98.3010%" y="421" width="0.0705%" height="15" fill="rgb(233,195,10)" fg:x="12555" fg:w="9"/><text x="98.5510%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (6 samples, 0.05%)</title><rect x="98.3245%" y="405" width="0.0470%" height="15" fill="rgb(254,105,3)" fg:x="12558" fg:w="6"/><text x="98.5745%" y="415.50"></text></g><g><title>nom::character::complete::char::{{closure}} (3 samples, 0.02%)</title><rect x="98.3714%" y="437" width="0.0235%" height="15" fill="rgb(221,225,9)" fg:x="12564" fg:w="3"/><text x="98.6214%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (3 samples, 0.02%)</title><rect x="98.3714%" y="421" width="0.0235%" height="15" fill="rgb(224,227,45)" fg:x="12564" fg:w="3"/><text x="98.6214%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (3 samples, 0.02%)</title><rect x="98.5437%" y="405" width="0.0235%" height="15" fill="rgb(229,198,43)" fg:x="12586" fg:w="3"/><text x="98.7937%" y="415.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (3 samples, 0.02%)</title><rect x="98.5437%" y="389" width="0.0235%" height="15" fill="rgb(206,209,35)" fg:x="12586" fg:w="3"/><text x="98.7937%" y="399.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="98.5437%" y="373" width="0.0235%" height="15" fill="rgb(245,195,53)" fg:x="12586" fg:w="3"/><text x="98.7937%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="98.5437%" y="357" width="0.0235%" height="15" fill="rgb(240,92,26)" fg:x="12586" fg:w="3"/><text x="98.7937%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.02%)</title><rect x="98.5437%" y="341" width="0.0235%" height="15" fill="rgb(207,40,23)" fg:x="12586" fg:w="3"/><text x="98.7937%" y="351.50"></text></g><g><title>hl7_parser::parser::segment_parser::{{closure}} (10,935 samples, 85.62%)</title><rect x="13.2712%" y="453" width="85.6170%" height="15" fill="rgb(223,111,35)" fg:x="1695" fg:w="10935"/><text x="13.5212%" y="463.50">hl7_parser::parser::segment_parser::{{closure}}</text></g><g><title>nom_locate::position (63 samples, 0.49%)</title><rect x="98.3949%" y="437" width="0.4933%" height="15" fill="rgb(229,147,28)" fg:x="12567" fg:w="63"/><text x="98.6449%" y="447.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (58 samples, 0.45%)</title><rect x="98.4341%" y="421" width="0.4541%" height="15" fill="rgb(211,29,28)" fg:x="12572" fg:w="58"/><text x="98.6841%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (41 samples, 0.32%)</title><rect x="98.5672%" y="405" width="0.3210%" height="15" fill="rgb(228,72,33)" fg:x="12589" fg:w="41"/><text x="98.8172%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (28 samples, 0.22%)</title><rect x="98.6690%" y="389" width="0.2192%" height="15" fill="rgb(205,214,31)" fg:x="12602" fg:w="28"/><text x="98.9190%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="98.9352%" y="437" width="0.0235%" height="15" fill="rgb(224,111,15)" fg:x="12636" fg:w="3"/><text x="99.1852%" y="447.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.02%)</title><rect x="98.9352%" y="421" width="0.0235%" height="15" fill="rgb(253,21,26)" fg:x="12636" fg:w="3"/><text x="99.1852%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="98.9430%" y="405" width="0.0157%" height="15" fill="rgb(245,139,43)" fg:x="12637" fg:w="2"/><text x="99.1930%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,960 samples, 85.81%)</title><rect x="13.2164%" y="469" width="85.8127%" height="15" fill="rgb(252,170,7)" fg:x="1688" fg:w="10960"/><text x="13.4664%" y="479.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (18 samples, 0.14%)</title><rect x="98.8882%" y="453" width="0.1409%" height="15" fill="rgb(231,118,14)" fg:x="12630" fg:w="18"/><text x="99.1382%" y="463.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (9 samples, 0.07%)</title><rect x="98.9587%" y="437" width="0.0705%" height="15" fill="rgb(238,83,0)" fg:x="12639" fg:w="9"/><text x="99.2087%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 0.02%)</title><rect x="99.0135%" y="421" width="0.0157%" height="15" fill="rgb(221,39,39)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.0135%" y="405" width="0.0157%" height="15" fill="rgb(222,119,46)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="415.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.0135%" y="389" width="0.0157%" height="15" fill="rgb(222,165,49)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="399.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="99.0135%" y="373" width="0.0157%" height="15" fill="rgb(219,113,52)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="383.50"></text></g><g><title>memchr::memchr::memchr::imp (2 samples, 0.02%)</title><rect x="99.0135%" y="357" width="0.0157%" height="15" fill="rgb(214,7,15)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="367.50"></text></g><g><title>memchr::memchr::x86::memchr (2 samples, 0.02%)</title><rect x="99.0135%" y="341" width="0.0157%" height="15" fill="rgb(235,32,4)" fg:x="12646" fg:w="2"/><text x="99.2635%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.08%)</title><rect x="99.0370%" y="453" width="0.0783%" height="15" fill="rgb(238,90,54)" fg:x="12649" fg:w="10"/><text x="99.2870%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.08%)</title><rect x="99.0370%" y="437" width="0.0783%" height="15" fill="rgb(213,208,19)" fg:x="12649" fg:w="10"/><text x="99.2870%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.07%)</title><rect x="99.0448%" y="421" width="0.0705%" height="15" fill="rgb(233,156,4)" fg:x="12650" fg:w="9"/><text x="99.2948%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.07%)</title><rect x="99.0448%" y="405" width="0.0705%" height="15" fill="rgb(207,194,5)" fg:x="12650" fg:w="9"/><text x="99.2948%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.07%)</title><rect x="99.0448%" y="389" width="0.0705%" height="15" fill="rgb(206,111,30)" fg:x="12650" fg:w="9"/><text x="99.2948%" y="399.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.07%)</title><rect x="99.0448%" y="373" width="0.0705%" height="15" fill="rgb(243,70,54)" fg:x="12650" fg:w="9"/><text x="99.2948%" y="383.50"></text></g><g><title>realloc (9 samples, 0.07%)</title><rect x="99.0448%" y="357" width="0.0705%" height="15" fill="rgb(242,28,8)" fg:x="12650" fg:w="9"/><text x="99.2948%" y="367.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="99.0604%" y="341" width="0.0548%" height="15" fill="rgb(219,106,18)" fg:x="12652" fg:w="7"/><text x="99.3104%" y="351.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="99.0683%" y="325" width="0.0470%" height="15" fill="rgb(244,222,10)" fg:x="12653" fg:w="6"/><text x="99.3183%" y="335.50"></text></g><g><title>nom::multi::separated_list0::{{closure}} (10,978 samples, 85.95%)</title><rect x="13.1694%" y="485" width="85.9536%" height="15" fill="rgb(236,179,52)" fg:x="1682" fg:w="10978"/><text x="13.4194%" y="495.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.09%)</title><rect x="99.0291%" y="469" width="0.0940%" height="15" fill="rgb(213,23,39)" fg:x="12648" fg:w="12"/><text x="99.2791%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.1544%" y="405" width="0.0235%" height="15" fill="rgb(238,48,10)" fg:x="12664" fg:w="3"/><text x="99.4044%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.1544%" y="389" width="0.0235%" height="15" fill="rgb(251,196,23)" fg:x="12664" fg:w="3"/><text x="99.4044%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.1544%" y="373" width="0.0235%" height="15" fill="rgb(250,152,24)" fg:x="12664" fg:w="3"/><text x="99.4044%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="99.1622%" y="357" width="0.0157%" height="15" fill="rgb(209,150,17)" fg:x="12665" fg:w="2"/><text x="99.4122%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="99.1622%" y="341" width="0.0157%" height="15" fill="rgb(234,202,34)" fg:x="12665" fg:w="2"/><text x="99.4122%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.06%)</title><rect x="99.1544%" y="437" width="0.0626%" height="15" fill="rgb(253,148,53)" fg:x="12664" fg:w="8"/><text x="99.4044%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.06%)</title><rect x="99.1544%" y="421" width="0.0626%" height="15" fill="rgb(218,129,16)" fg:x="12664" fg:w="8"/><text x="99.4044%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="99.1857%" y="405" width="0.0313%" height="15" fill="rgb(216,85,19)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.03%)</title><rect x="99.1857%" y="389" width="0.0313%" height="15" fill="rgb(235,228,7)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.1857%" y="373" width="0.0313%" height="15" fill="rgb(245,175,0)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.1857%" y="357" width="0.0313%" height="15" fill="rgb(208,168,36)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.1857%" y="341" width="0.0313%" height="15" fill="rgb(246,171,24)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.03%)</title><rect x="99.1857%" y="325" width="0.0313%" height="15" fill="rgb(215,142,24)" fg:x="12668" fg:w="4"/><text x="99.4357%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="99.1935%" y="309" width="0.0235%" height="15" fill="rgb(250,187,7)" fg:x="12669" fg:w="3"/><text x="99.4435%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.02%)</title><rect x="99.2484%" y="373" width="0.0157%" height="15" fill="rgb(228,66,33)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.02%)</title><rect x="99.2484%" y="357" width="0.0157%" height="15" fill="rgb(234,215,21)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="99.2484%" y="341" width="0.0157%" height="15" fill="rgb(222,191,20)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="99.2484%" y="325" width="0.0157%" height="15" fill="rgb(245,79,54)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="99.2484%" y="309" width="0.0157%" height="15" fill="rgb(240,10,37)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="99.2484%" y="293" width="0.0157%" height="15" fill="rgb(214,192,32)" fg:x="12676" fg:w="2"/><text x="99.4984%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.02%)</title><rect x="99.2484%" y="389" width="0.0235%" height="15" fill="rgb(209,36,54)" fg:x="12676" fg:w="3"/><text x="99.4984%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.03%)</title><rect x="99.2718%" y="389" width="0.0313%" height="15" fill="rgb(220,10,11)" fg:x="12679" fg:w="4"/><text x="99.5218%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="99.3032%" y="389" width="0.0391%" height="15" fill="rgb(221,106,17)" fg:x="12683" fg:w="5"/><text x="99.5532%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="99.3032%" y="373" width="0.0391%" height="15" fill="rgb(251,142,44)" fg:x="12683" fg:w="5"/><text x="99.5532%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="99.3032%" y="357" width="0.0391%" height="15" fill="rgb(238,13,15)" fg:x="12683" fg:w="5"/><text x="99.5532%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (30 samples, 0.23%)</title><rect x="99.1231%" y="485" width="0.2349%" height="15" fill="rgb(208,107,27)" fg:x="12660" fg:w="30"/><text x="99.3731%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (30 samples, 0.23%)</title><rect x="99.1231%" y="469" width="0.2349%" height="15" fill="rgb(205,136,37)" fg:x="12660" fg:w="30"/><text x="99.3731%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (29 samples, 0.23%)</title><rect x="99.1309%" y="453" width="0.2271%" height="15" fill="rgb(250,205,27)" fg:x="12661" fg:w="29"/><text x="99.3809%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 0.14%)</title><rect x="99.2170%" y="437" width="0.1409%" height="15" fill="rgb(210,80,43)" fg:x="12672" fg:w="18"/><text x="99.4670%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.14%)</title><rect x="99.2170%" y="421" width="0.1409%" height="15" fill="rgb(247,160,36)" fg:x="12672" fg:w="18"/><text x="99.4670%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.14%)</title><rect x="99.2170%" y="405" width="0.1409%" height="15" fill="rgb(234,13,49)" fg:x="12672" fg:w="18"/><text x="99.4670%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="99.3423%" y="389" width="0.0157%" height="15" fill="rgb(234,122,0)" fg:x="12688" fg:w="2"/><text x="99.5923%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="99.3423%" y="373" width="0.0157%" height="15" fill="rgb(207,146,38)" fg:x="12688" fg:w="2"/><text x="99.5923%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="99.4363%" y="357" width="0.0313%" height="15" fill="rgb(207,177,25)" fg:x="12700" fg:w="4"/><text x="99.6863%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="99.4128%" y="421" width="0.0783%" height="15" fill="rgb(211,178,42)" fg:x="12697" fg:w="10"/><text x="99.6628%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="99.4128%" y="405" width="0.0783%" height="15" fill="rgb(230,69,54)" fg:x="12697" fg:w="10"/><text x="99.6628%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="99.4128%" y="389" width="0.0783%" height="15" fill="rgb(214,135,41)" fg:x="12697" fg:w="10"/><text x="99.6628%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.06%)</title><rect x="99.4284%" y="373" width="0.0626%" height="15" fill="rgb(237,67,25)" fg:x="12699" fg:w="8"/><text x="99.6784%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.02%)</title><rect x="99.4676%" y="357" width="0.0235%" height="15" fill="rgb(222,189,50)" fg:x="12704" fg:w="3"/><text x="99.7176%" y="367.50"></text></g><g><title>hashbrown::map::make_insert_hash (12 samples, 0.09%)</title><rect x="99.4128%" y="453" width="0.0940%" height="15" fill="rgb(245,148,34)" fg:x="12697" fg:w="12"/><text x="99.6628%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.09%)</title><rect x="99.4128%" y="437" width="0.0940%" height="15" fill="rgb(222,29,6)" fg:x="12697" fg:w="12"/><text x="99.6628%" y="447.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="99.5302%" y="405" width="0.0157%" height="15" fill="rgb(221,189,43)" fg:x="12712" fg:w="2"/><text x="99.7802%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 0.05%)</title><rect x="99.5067%" y="453" width="0.0470%" height="15" fill="rgb(207,36,27)" fg:x="12709" fg:w="6"/><text x="99.7567%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.05%)</title><rect x="99.5067%" y="437" width="0.0470%" height="15" fill="rgb(217,90,24)" fg:x="12709" fg:w="6"/><text x="99.7567%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 0.05%)</title><rect x="99.5067%" y="421" width="0.0470%" height="15" fill="rgb(224,66,35)" fg:x="12709" fg:w="6"/><text x="99.7567%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 0.03%)</title><rect x="99.5694%" y="437" width="0.0313%" height="15" fill="rgb(221,13,50)" fg:x="12717" fg:w="4"/><text x="99.8194%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.03%)</title><rect x="99.5694%" y="421" width="0.0313%" height="15" fill="rgb(236,68,49)" fg:x="12717" fg:w="4"/><text x="99.8194%" y="431.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="99.5694%" y="405" width="0.0313%" height="15" fill="rgb(229,146,28)" fg:x="12717" fg:w="4"/><text x="99.8194%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="99.6398%" y="373" width="0.0235%" height="15" fill="rgb(225,31,38)" fg:x="12726" fg:w="3"/><text x="99.8898%" y="383.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="99.6398%" y="357" width="0.0235%" height="15" fill="rgb(250,208,3)" fg:x="12726" fg:w="3"/><text x="99.8898%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (2 samples, 0.02%)</title><rect x="99.6477%" y="341" width="0.0157%" height="15" fill="rgb(246,54,23)" fg:x="12727" fg:w="2"/><text x="99.8977%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="99.6712%" y="309" width="0.0548%" height="15" fill="rgb(243,76,11)" fg:x="12730" fg:w="7"/><text x="99.9212%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="99.6712%" y="293" width="0.0548%" height="15" fill="rgb(245,21,50)" fg:x="12730" fg:w="7"/><text x="99.9212%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="99.6712%" y="277" width="0.0548%" height="15" fill="rgb(228,9,43)" fg:x="12730" fg:w="7"/><text x="99.9212%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="99.6946%" y="261" width="0.0313%" height="15" fill="rgb(208,100,47)" fg:x="12733" fg:w="4"/><text x="99.9446%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="99.6946%" y="245" width="0.0313%" height="15" fill="rgb(232,26,8)" fg:x="12733" fg:w="4"/><text x="99.9446%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.02%)</title><rect x="99.7260%" y="309" width="0.0235%" height="15" fill="rgb(216,166,38)" fg:x="12737" fg:w="3"/><text x="99.9760%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (16 samples, 0.13%)</title><rect x="99.6633%" y="373" width="0.1253%" height="15" fill="rgb(251,202,51)" fg:x="12729" fg:w="16"/><text x="99.9133%" y="383.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (16 samples, 0.13%)</title><rect x="99.6633%" y="357" width="0.1253%" height="15" fill="rgb(254,216,34)" fg:x="12729" fg:w="16"/><text x="99.9133%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.13%)</title><rect x="99.6633%" y="341" width="0.1253%" height="15" fill="rgb(251,32,27)" fg:x="12729" fg:w="16"/><text x="99.9133%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.13%)</title><rect x="99.6633%" y="325" width="0.1253%" height="15" fill="rgb(208,127,28)" fg:x="12729" fg:w="16"/><text x="99.9133%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="99.7495%" y="309" width="0.0391%" height="15" fill="rgb(224,137,22)" fg:x="12740" fg:w="5"/><text x="99.9995%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="99.7573%" y="293" width="0.0313%" height="15" fill="rgb(254,70,32)" fg:x="12741" fg:w="4"/><text x="100.0073%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.03%)</title><rect x="99.7573%" y="277" width="0.0313%" height="15" fill="rgb(229,75,37)" fg:x="12741" fg:w="4"/><text x="100.0073%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.7573%" y="261" width="0.0313%" height="15" fill="rgb(252,64,23)" fg:x="12741" fg:w="4"/><text x="100.0073%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.7573%" y="245" width="0.0313%" height="15" fill="rgb(232,162,48)" fg:x="12741" fg:w="4"/><text x="100.0073%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="99.7573%" y="229" width="0.0313%" height="15" fill="rgb(246,160,12)" fg:x="12741" fg:w="4"/><text x="100.0073%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u8 (3 samples, 0.02%)</title><rect x="99.7651%" y="213" width="0.0235%" height="15" fill="rgb(247,166,0)" fg:x="12742" fg:w="3"/><text x="100.0151%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="99.7651%" y="197" width="0.0235%" height="15" fill="rgb(249,219,21)" fg:x="12742" fg:w="3"/><text x="100.0151%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="99.8277%" y="341" width="0.0157%" height="15" fill="rgb(205,209,3)" fg:x="12750" fg:w="2"/><text x="100.0777%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (9 samples, 0.07%)</title><rect x="99.7964%" y="357" width="0.0705%" height="15" fill="rgb(243,44,1)" fg:x="12746" fg:w="9"/><text x="100.0464%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.02%)</title><rect x="99.8434%" y="341" width="0.0235%" height="15" fill="rgb(206,159,16)" fg:x="12752" fg:w="3"/><text x="100.0934%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="99.8434%" y="325" width="0.0235%" height="15" fill="rgb(244,77,30)" fg:x="12752" fg:w="3"/><text x="100.0934%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (10 samples, 0.08%)</title><rect x="99.7964%" y="373" width="0.0783%" height="15" fill="rgb(218,69,12)" fg:x="12746" fg:w="10"/><text x="100.0464%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (36 samples, 0.28%)</title><rect x="99.6007%" y="437" width="0.2819%" height="15" fill="rgb(212,87,7)" fg:x="12721" fg:w="36"/><text x="99.8507%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (36 samples, 0.28%)</title><rect x="99.6007%" y="421" width="0.2819%" height="15" fill="rgb(245,114,25)" fg:x="12721" fg:w="36"/><text x="99.8507%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (34 samples, 0.27%)</title><rect x="99.6163%" y="405" width="0.2662%" height="15" fill="rgb(210,61,42)" fg:x="12723" fg:w="34"/><text x="99.8663%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (33 samples, 0.26%)</title><rect x="99.6242%" y="389" width="0.2584%" height="15" fill="rgb(211,52,33)" fg:x="12724" fg:w="33"/><text x="99.8742%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (69 samples, 0.54%)</title><rect x="99.3580%" y="485" width="0.5402%" height="15" fill="rgb(234,58,33)" fg:x="12690" fg:w="69"/><text x="99.6080%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 0.53%)</title><rect x="99.3658%" y="469" width="0.5324%" height="15" fill="rgb(220,115,36)" fg:x="12691" fg:w="68"/><text x="99.6158%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (44 samples, 0.34%)</title><rect x="99.5537%" y="453" width="0.3445%" height="15" fill="rgb(243,153,54)" fg:x="12715" fg:w="44"/><text x="99.8037%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="99.9217%" y="421" width="0.0157%" height="15" fill="rgb(251,47,18)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.02%)</title><rect x="99.9217%" y="405" width="0.0157%" height="15" fill="rgb(242,102,42)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.02%)</title><rect x="99.9217%" y="389" width="0.0157%" height="15" fill="rgb(234,31,38)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.02%)</title><rect x="99.9217%" y="373" width="0.0157%" height="15" fill="rgb(221,117,51)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.02%)</title><rect x="99.9217%" y="357" width="0.0157%" height="15" fill="rgb(212,20,18)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="99.9217%" y="341" width="0.0157%" height="15" fill="rgb(245,133,36)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="99.9217%" y="325" width="0.0157%" height="15" fill="rgb(212,6,19)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="99.9217%" y="309" width="0.0157%" height="15" fill="rgb(218,1,36)" fg:x="12762" fg:w="2"/><text x="100.1717%" y="319.50"></text></g><g><title>_start (12,764 samples, 99.94%)</title><rect x="0.0078%" y="789" width="99.9374%" height="15" fill="rgb(246,84,54)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="799.50">_start</text></g><g><title>__libc_start_main (12,764 samples, 99.94%)</title><rect x="0.0078%" y="773" width="99.9374%" height="15" fill="rgb(242,110,6)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="783.50">__libc_start_main</text></g><g><title>[libc.so.6] (12,764 samples, 99.94%)</title><rect x="0.0078%" y="757" width="99.9374%" height="15" fill="rgb(214,47,5)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="767.50">[libc.so.6]</text></g><g><title>main (12,764 samples, 99.94%)</title><rect x="0.0078%" y="741" width="99.9374%" height="15" fill="rgb(218,159,25)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (12,764 samples, 99.94%)</title><rect x="0.0078%" y="725" width="99.9374%" height="15" fill="rgb(215,211,28)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (12,764 samples, 99.94%)</title><rect x="0.0078%" y="709" width="99.9374%" height="15" fill="rgb(238,59,32)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,764 samples, 99.94%)</title><rect x="0.0078%" y="693" width="99.9374%" height="15" fill="rgb(226,82,3)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,764 samples, 99.94%)</title><rect x="0.0078%" y="677" width="99.9374%" height="15" fill="rgb(240,164,32)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (12,764 samples, 99.94%)</title><rect x="0.0078%" y="661" width="99.9374%" height="15" fill="rgb(232,46,7)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="671.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (12,764 samples, 99.94%)</title><rect x="0.0078%" y="645" width="99.9374%" height="15" fill="rgb(229,129,53)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,764 samples, 99.94%)</title><rect x="0.0078%" y="629" width="99.9374%" height="15" fill="rgb(234,188,29)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,764 samples, 99.94%)</title><rect x="0.0078%" y="613" width="99.9374%" height="15" fill="rgb(246,141,4)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,764 samples, 99.94%)</title><rect x="0.0078%" y="597" width="99.9374%" height="15" fill="rgb(229,23,39)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (12,764 samples, 99.94%)</title><rect x="0.0078%" y="581" width="99.9374%" height="15" fill="rgb(206,12,3)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,764 samples, 99.94%)</title><rect x="0.0078%" y="565" width="99.9374%" height="15" fill="rgb(252,226,20)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,764 samples, 99.94%)</title><rect x="0.0078%" y="549" width="99.9374%" height="15" fill="rgb(216,123,35)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>parse::main (12,764 samples, 99.94%)</title><rect x="0.0078%" y="533" width="99.9374%" height="15" fill="rgb(212,68,40)" fg:x="1" fg:w="12764"/><text x="0.2578%" y="543.50">parse::main</text></g><g><title>hl7_parser::message::Message::parse (11,481 samples, 89.89%)</title><rect x="10.0532%" y="517" width="89.8920%" height="15" fill="rgb(254,125,32)" fg:x="1284" fg:w="11481"/><text x="10.3032%" y="527.50">hl7_parser::message::Message::parse</text></g><g><title>hl7_parser::parser::parse_message (11,481 samples, 89.89%)</title><rect x="10.0532%" y="501" width="89.8920%" height="15" fill="rgb(253,97,22)" fg:x="1284" fg:w="11481"/><text x="10.3032%" y="511.50">hl7_parser::parser::parse_message</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.05%)</title><rect x="99.8982%" y="485" width="0.0470%" height="15" fill="rgb(241,101,14)" fg:x="12759" fg:w="6"/><text x="100.1482%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (6 samples, 0.05%)</title><rect x="99.8982%" y="469" width="0.0470%" height="15" fill="rgb(238,103,29)" fg:x="12759" fg:w="6"/><text x="100.1482%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.03%)</title><rect x="99.9139%" y="453" width="0.0313%" height="15" fill="rgb(233,195,47)" fg:x="12761" fg:w="4"/><text x="100.1639%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.02%)</title><rect x="99.9217%" y="437" width="0.0235%" height="15" fill="rgb(246,218,30)" fg:x="12762" fg:w="3"/><text x="100.1717%" y="447.50"></text></g><g><title>parse (12,766 samples, 99.95%)</title><rect x="0.0000%" y="805" width="99.9530%" height="15" fill="rgb(219,145,47)" fg:x="0" fg:w="12766"/><text x="0.2500%" y="815.50">parse</text></g><g><title>all (12,772 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,12,26)" fg:x="0" fg:w="12772"/><text x="0.2500%" y="831.50"></text></g><g><title>perf-exec (6 samples, 0.05%)</title><rect x="99.9530%" y="805" width="0.0470%" height="15" fill="rgb(214,87,16)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.05%)</title><rect x="99.9530%" y="789" width="0.0470%" height="15" fill="rgb(208,99,42)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.05%)</title><rect x="99.9530%" y="773" width="0.0470%" height="15" fill="rgb(253,99,2)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.05%)</title><rect x="99.9530%" y="757" width="0.0470%" height="15" fill="rgb(220,168,23)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="767.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.05%)</title><rect x="99.9530%" y="741" width="0.0470%" height="15" fill="rgb(242,38,24)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="751.50"></text></g><g><title>bprm_execve (6 samples, 0.05%)</title><rect x="99.9530%" y="725" width="0.0470%" height="15" fill="rgb(225,182,9)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="735.50"></text></g><g><title>load_elf_binary (6 samples, 0.05%)</title><rect x="99.9530%" y="709" width="0.0470%" height="15" fill="rgb(243,178,37)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="719.50"></text></g><g><title>begin_new_exec (6 samples, 0.05%)</title><rect x="99.9530%" y="693" width="0.0470%" height="15" fill="rgb(232,139,19)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="703.50"></text></g><g><title>perf_event_comm (6 samples, 0.05%)</title><rect x="99.9530%" y="677" width="0.0470%" height="15" fill="rgb(225,201,24)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="687.50"></text></g><g><title>perf_iterate_sb (6 samples, 0.05%)</title><rect x="99.9530%" y="661" width="0.0470%" height="15" fill="rgb(221,47,46)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="671.50"></text></g><g><title>__rcu_read_lock (6 samples, 0.05%)</title><rect x="99.9530%" y="645" width="0.0470%" height="15" fill="rgb(249,23,13)" fg:x="12766" fg:w="6"/><text x="100.2030%" y="655.50"></text></g></svg></svg>