<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="13112"><g><title>cfree (13 samples, 0.10%)</title><rect x="0.0305%" y="341" width="0.0991%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="13"/><text x="0.2805%" y="351.50"></text></g><g><title>[libc.so.6] (13 samples, 0.10%)</title><rect x="0.0305%" y="325" width="0.0991%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="13"/><text x="0.2805%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.1144%" y="309" width="0.0153%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="2"/><text x="0.3644%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (151 samples, 1.15%)</title><rect x="0.2746%" y="101" width="1.1516%" height="15" fill="rgb(248,212,6)" fg:x="36" fg:w="151"/><text x="0.5246%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (151 samples, 1.15%)</title><rect x="0.2746%" y="85" width="1.1516%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="151"/><text x="0.5246%" y="95.50"></text></g><g><title>cfree (150 samples, 1.14%)</title><rect x="0.2822%" y="69" width="1.1440%" height="15" fill="rgb(232,128,0)" fg:x="37" fg:w="150"/><text x="0.5322%" y="79.50"></text></g><g><title>[libc.so.6] (112 samples, 0.85%)</title><rect x="0.5720%" y="53" width="0.8542%" height="15" fill="rgb(207,160,47)" fg:x="75" fg:w="112"/><text x="0.8220%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (209 samples, 1.59%)</title><rect x="0.1754%" y="197" width="1.5940%" height="15" fill="rgb(228,23,34)" fg:x="23" fg:w="209"/><text x="0.4254%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::component::Component]&gt; (209 samples, 1.59%)</title><rect x="0.1754%" y="181" width="1.5940%" height="15" fill="rgb(218,30,26)" fg:x="23" fg:w="209"/><text x="0.4254%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::component::Component&gt; (196 samples, 1.49%)</title><rect x="0.2746%" y="165" width="1.4948%" height="15" fill="rgb(220,122,19)" fg:x="36" fg:w="196"/><text x="0.5246%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (196 samples, 1.49%)</title><rect x="0.2746%" y="149" width="1.4948%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="196"/><text x="0.5246%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (196 samples, 1.49%)</title><rect x="0.2746%" y="133" width="1.4948%" height="15" fill="rgb(240,193,28)" fg:x="36" fg:w="196"/><text x="0.5246%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (196 samples, 1.49%)</title><rect x="0.2746%" y="117" width="1.4948%" height="15" fill="rgb(216,20,37)" fg:x="36" fg:w="196"/><text x="0.5246%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (45 samples, 0.34%)</title><rect x="1.4262%" y="101" width="0.3432%" height="15" fill="rgb(206,188,39)" fg:x="187" fg:w="45"/><text x="1.6762%" y="111.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="1.8838%" y="133" width="0.0153%" height="15" fill="rgb(217,207,13)" fg:x="247" fg:w="2"/><text x="2.1338%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (311 samples, 2.37%)</title><rect x="1.7770%" y="165" width="2.3719%" height="15" fill="rgb(231,73,38)" fg:x="233" fg:w="311"/><text x="2.0270%" y="175.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (311 samples, 2.37%)</title><rect x="1.7770%" y="149" width="2.3719%" height="15" fill="rgb(225,20,46)" fg:x="233" fg:w="311"/><text x="2.0270%" y="159.50">al..</text></g><g><title>cfree (295 samples, 2.25%)</title><rect x="1.8990%" y="133" width="2.2498%" height="15" fill="rgb(210,31,41)" fg:x="249" fg:w="295"/><text x="2.1490%" y="143.50">c..</text></g><g><title>[libc.so.6] (260 samples, 1.98%)</title><rect x="2.1660%" y="117" width="1.9829%" height="15" fill="rgb(221,200,47)" fg:x="284" fg:w="260"/><text x="2.4160%" y="127.50">[..</text></g><g><title>[libc.so.6] (116 samples, 0.88%)</title><rect x="3.2642%" y="101" width="0.8847%" height="15" fill="rgb(226,26,5)" fg:x="428" fg:w="116"/><text x="3.5142%" y="111.50"></text></g><g><title>[libc.so.6] (66 samples, 0.50%)</title><rect x="3.6455%" y="85" width="0.5034%" height="15" fill="rgb(249,33,26)" fg:x="478" fg:w="66"/><text x="3.8955%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (533 samples, 4.06%)</title><rect x="0.1449%" y="261" width="4.0650%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="533"/><text x="0.3949%" y="271.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::field::Field]&gt; (533 samples, 4.06%)</title><rect x="0.1449%" y="245" width="4.0650%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="533"/><text x="0.3949%" y="255.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::field::Field&gt; (529 samples, 4.03%)</title><rect x="0.1754%" y="229" width="4.0345%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="529"/><text x="0.4254%" y="239.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::component::Component&gt;&gt; (529 samples, 4.03%)</title><rect x="0.1754%" y="213" width="4.0345%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="529"/><text x="0.4254%" y="223.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::component::Component&gt;&gt; (320 samples, 2.44%)</title><rect x="1.7694%" y="197" width="2.4405%" height="15" fill="rgb(249,31,29)" fg:x="232" fg:w="320"/><text x="2.0194%" y="207.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (320 samples, 2.44%)</title><rect x="1.7694%" y="181" width="2.4405%" height="15" fill="rgb(225,111,53)" fg:x="232" fg:w="320"/><text x="2.0194%" y="191.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.06%)</title><rect x="4.1489%" y="165" width="0.0610%" height="15" fill="rgb(238,160,17)" fg:x="544" fg:w="8"/><text x="4.3989%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (316 samples, 2.41%)</title><rect x="4.2099%" y="229" width="2.4100%" height="15" fill="rgb(214,148,48)" fg:x="552" fg:w="316"/><text x="4.4599%" y="239.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (316 samples, 2.41%)</title><rect x="4.2099%" y="213" width="2.4100%" height="15" fill="rgb(232,36,49)" fg:x="552" fg:w="316"/><text x="4.4599%" y="223.50">al..</text></g><g><title>cfree (316 samples, 2.41%)</title><rect x="4.2099%" y="197" width="2.4100%" height="15" fill="rgb(209,103,24)" fg:x="552" fg:w="316"/><text x="4.4599%" y="207.50">cf..</text></g><g><title>[libc.so.6] (313 samples, 2.39%)</title><rect x="4.2328%" y="181" width="2.3871%" height="15" fill="rgb(229,88,8)" fg:x="555" fg:w="313"/><text x="4.4828%" y="191.50">[l..</text></g><g><title>[libc.so.6] (305 samples, 2.33%)</title><rect x="4.2938%" y="165" width="2.3261%" height="15" fill="rgb(213,181,19)" fg:x="563" fg:w="305"/><text x="4.5438%" y="175.50">[..</text></g><g><title>[libc.so.6] (139 samples, 1.06%)</title><rect x="5.5598%" y="149" width="1.0601%" height="15" fill="rgb(254,191,54)" fg:x="729" fg:w="139"/><text x="5.8098%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::segment::Segment&gt;&gt; (852 samples, 6.50%)</title><rect x="0.1297%" y="341" width="6.4979%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="852"/><text x="0.3797%" y="351.50">core::ptr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (852 samples, 6.50%)</title><rect x="0.1297%" y="325" width="6.4979%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="852"/><text x="0.3797%" y="335.50">&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::segment::Segment]&gt; (852 samples, 6.50%)</title><rect x="0.1297%" y="309" width="6.4979%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="852"/><text x="0.3797%" y="319.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segment&gt; (850 samples, 6.48%)</title><rect x="0.1449%" y="293" width="6.4826%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="850"/><text x="0.3949%" y="303.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::field::Field&gt;&gt; (850 samples, 6.48%)</title><rect x="0.1449%" y="277" width="6.4826%" height="15" fill="rgb(238,167,29)" fg:x="19" fg:w="850"/><text x="0.3949%" y="287.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::field::Field&gt;&gt; (317 samples, 2.42%)</title><rect x="4.2099%" y="261" width="2.4176%" height="15" fill="rgb(232,182,51)" fg:x="552" fg:w="317"/><text x="4.4599%" y="271.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (317 samples, 2.42%)</title><rect x="4.2099%" y="245" width="2.4176%" height="15" fill="rgb(231,60,39)" fg:x="552" fg:w="317"/><text x="4.4599%" y="255.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (154 samples, 1.17%)</title><rect x="6.7343%" y="149" width="1.1745%" height="15" fill="rgb(208,69,12)" fg:x="883" fg:w="154"/><text x="6.9843%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (154 samples, 1.17%)</title><rect x="6.7343%" y="133" width="1.1745%" height="15" fill="rgb(235,93,37)" fg:x="883" fg:w="154"/><text x="6.9843%" y="143.50"></text></g><g><title>cfree (151 samples, 1.15%)</title><rect x="6.7572%" y="117" width="1.1516%" height="15" fill="rgb(213,116,39)" fg:x="886" fg:w="151"/><text x="7.0072%" y="127.50"></text></g><g><title>[libc.so.6] (106 samples, 0.81%)</title><rect x="7.1004%" y="101" width="0.8084%" height="15" fill="rgb(222,207,29)" fg:x="931" fg:w="106"/><text x="7.3504%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (200 samples, 1.53%)</title><rect x="6.6580%" y="245" width="1.5253%" height="15" fill="rgb(206,96,30)" fg:x="873" fg:w="200"/><text x="6.9080%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::component::Component]&gt; (200 samples, 1.53%)</title><rect x="6.6580%" y="229" width="1.5253%" height="15" fill="rgb(218,138,4)" fg:x="873" fg:w="200"/><text x="6.9080%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::component::Component&gt; (190 samples, 1.45%)</title><rect x="6.7343%" y="213" width="1.4491%" height="15" fill="rgb(250,191,14)" fg:x="883" fg:w="190"/><text x="6.9843%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (190 samples, 1.45%)</title><rect x="6.7343%" y="197" width="1.4491%" height="15" fill="rgb(239,60,40)" fg:x="883" fg:w="190"/><text x="6.9843%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::sub_component::SubComponent&gt;&gt; (190 samples, 1.45%)</title><rect x="6.7343%" y="181" width="1.4491%" height="15" fill="rgb(206,27,48)" fg:x="883" fg:w="190"/><text x="6.9843%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 samples, 1.45%)</title><rect x="6.7343%" y="165" width="1.4491%" height="15" fill="rgb(225,35,8)" fg:x="883" fg:w="190"/><text x="6.9843%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (36 samples, 0.27%)</title><rect x="7.9088%" y="149" width="0.2746%" height="15" fill="rgb(250,213,24)" fg:x="1037" fg:w="36"/><text x="8.1588%" y="159.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="8.2444%" y="181" width="0.0153%" height="15" fill="rgb(247,123,22)" fg:x="1081" fg:w="2"/><text x="8.4944%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="8.2444%" y="165" width="0.0153%" height="15" fill="rgb(231,138,38)" fg:x="1081" fg:w="2"/><text x="8.4944%" y="175.50"></text></g><g><title>__rust_dealloc (13 samples, 0.10%)</title><rect x="8.2596%" y="181" width="0.0991%" height="15" fill="rgb(231,145,46)" fg:x="1083" fg:w="13"/><text x="8.5096%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (146 samples, 1.11%)</title><rect x="8.2367%" y="213" width="1.1135%" height="15" fill="rgb(251,118,11)" fg:x="1080" fg:w="146"/><text x="8.4867%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (146 samples, 1.11%)</title><rect x="8.2367%" y="197" width="1.1135%" height="15" fill="rgb(217,147,25)" fg:x="1080" fg:w="146"/><text x="8.4867%" y="207.50"></text></g><g><title>cfree (130 samples, 0.99%)</title><rect x="8.3588%" y="181" width="0.9915%" height="15" fill="rgb(247,81,37)" fg:x="1096" fg:w="130"/><text x="8.6088%" y="191.50"></text></g><g><title>[libc.so.6] (111 samples, 0.85%)</title><rect x="8.5037%" y="165" width="0.8466%" height="15" fill="rgb(209,12,38)" fg:x="1115" fg:w="111"/><text x="8.7537%" y="175.50"></text></g><g><title>[libc.so.6] (14 samples, 0.11%)</title><rect x="9.2434%" y="149" width="0.1068%" height="15" fill="rgb(227,1,9)" fg:x="1212" fg:w="14"/><text x="9.4934%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (359 samples, 2.74%)</title><rect x="6.6275%" y="309" width="2.7379%" height="15" fill="rgb(248,47,43)" fg:x="869" fg:w="359"/><text x="6.8775%" y="319.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[hl7_parser::field::Field]&gt; (359 samples, 2.74%)</title><rect x="6.6275%" y="293" width="2.7379%" height="15" fill="rgb(221,10,30)" fg:x="869" fg:w="359"/><text x="6.8775%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::field::Field&gt; (357 samples, 2.72%)</title><rect x="6.6428%" y="277" width="2.7227%" height="15" fill="rgb(210,229,1)" fg:x="871" fg:w="357"/><text x="6.8928%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::component::Component&gt;&gt; (357 samples, 2.72%)</title><rect x="6.6428%" y="261" width="2.7227%" height="15" fill="rgb(222,148,37)" fg:x="871" fg:w="357"/><text x="6.8928%" y="271.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::component::Component&gt;&gt; (155 samples, 1.18%)</title><rect x="8.1833%" y="245" width="1.1821%" height="15" fill="rgb(234,67,33)" fg:x="1073" fg:w="155"/><text x="8.4333%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (155 samples, 1.18%)</title><rect x="8.1833%" y="229" width="1.1821%" height="15" fill="rgb(247,98,35)" fg:x="1073" fg:w="155"/><text x="8.4333%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="9.3502%" y="213" width="0.0153%" height="15" fill="rgb(247,138,52)" fg:x="1226" fg:w="2"/><text x="9.6002%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1,229 samples, 9.37%)</title><rect x="0.0153%" y="421" width="9.3731%" height="15" fill="rgb(213,79,30)" fg:x="2" fg:w="1229"/><text x="0.2653%" y="431.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,229 samples, 9.37%)</title><rect x="0.0153%" y="405" width="9.3731%" height="15" fill="rgb(246,177,23)" fg:x="2" fg:w="1229"/><text x="0.2653%" y="415.50">hashbrown::ra..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,229 samples, 9.37%)</title><rect x="0.0153%" y="389" width="9.3731%" height="15" fill="rgb(230,62,27)" fg:x="2" fg:w="1229"/><text x="0.2653%" y="399.50">core::ptr::mu..</text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,hl7_parser::segment::Segments)&gt; (1,229 samples, 9.37%)</title><rect x="0.0153%" y="373" width="9.3731%" height="15" fill="rgb(216,154,8)" fg:x="2" fg:w="1229"/><text x="0.2653%" y="383.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segments&gt; (1,229 samples, 9.37%)</title><rect x="0.0153%" y="357" width="9.3731%" height="15" fill="rgb(244,35,45)" fg:x="2" fg:w="1229"/><text x="0.2653%" y="367.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::segment::Segment&gt; (362 samples, 2.76%)</title><rect x="6.6275%" y="341" width="2.7608%" height="15" fill="rgb(251,115,12)" fg:x="869" fg:w="362"/><text x="6.8775%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;hl7_parser::field::Field&gt;&gt; (362 samples, 2.76%)</title><rect x="6.6275%" y="325" width="2.7608%" height="15" fill="rgb(240,54,50)" fg:x="869" fg:w="362"/><text x="6.8775%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;hl7_parser::field::Field&gt;&gt; (3 samples, 0.02%)</title><rect x="9.3655%" y="309" width="0.0229%" height="15" fill="rgb(233,84,52)" fg:x="1228" fg:w="3"/><text x="9.6155%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="9.3655%" y="293" width="0.0229%" height="15" fill="rgb(207,117,47)" fg:x="1228" fg:w="3"/><text x="9.6155%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hl7_parser::message::Message&gt; (1,232 samples, 9.40%)</title><rect x="0.0076%" y="501" width="9.3960%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="1232"/><text x="0.2576%" y="511.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;str,hl7_parser::segment::Segments&gt;&gt; (1,232 samples, 9.40%)</title><rect x="0.0076%" y="485" width="9.3960%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="1232"/><text x="0.2576%" y="495.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;str,hl7_parser::segment::Segments,std::collections::hash::map::RandomState&gt;&gt; (1,232 samples, 9.40%)</title><rect x="0.0076%" y="469" width="9.3960%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="1232"/><text x="0.2576%" y="479.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;str,hl7_parser::segment::Segments)&gt;&gt; (1,232 samples, 9.40%)</title><rect x="0.0076%" y="453" width="9.3960%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="1232"/><text x="0.2576%" y="463.50">core::ptr::dr..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,232 samples, 9.40%)</title><rect x="0.0076%" y="437" width="9.3960%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="1232"/><text x="0.2576%" y="447.50">&lt;hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="9.3883%" y="421" width="0.0153%" height="15" fill="rgb(253,215,40)" fg:x="1231" fg:w="2"/><text x="9.6383%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="9.3883%" y="405" width="0.0153%" height="15" fill="rgb(211,81,21)" fg:x="1231" fg:w="2"/><text x="9.6383%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="9.4417%" y="469" width="0.0153%" height="15" fill="rgb(208,190,38)" fg:x="1238" fg:w="2"/><text x="9.6917%" y="479.50"></text></g><g><title>&lt;hl7_parser::segment::Segment as core::convert::From&lt;hl7_parser::header::MSH&gt;&gt;::from (2 samples, 0.02%)</title><rect x="9.4417%" y="453" width="0.0153%" height="15" fill="rgb(235,213,38)" fg:x="1238" fg:w="2"/><text x="9.6917%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="9.4570%" y="469" width="0.0153%" height="15" fill="rgb(237,122,38)" fg:x="1240" fg:w="2"/><text x="9.7070%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="9.4570%" y="453" width="0.0153%" height="15" fill="rgb(244,218,35)" fg:x="1240" fg:w="2"/><text x="9.7070%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="9.4570%" y="437" width="0.0153%" height="15" fill="rgb(240,68,47)" fg:x="1240" fg:w="2"/><text x="9.7070%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="9.4570%" y="421" width="0.0153%" height="15" fill="rgb(210,16,53)" fg:x="1240" fg:w="2"/><text x="9.7070%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.03%)</title><rect x="9.4722%" y="469" width="0.0305%" height="15" fill="rgb(235,124,12)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="9.4722%" y="453" width="0.0305%" height="15" fill="rgb(224,169,11)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="9.4722%" y="437" width="0.0305%" height="15" fill="rgb(250,166,2)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="9.4722%" y="421" width="0.0305%" height="15" fill="rgb(242,216,29)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.03%)</title><rect x="9.4722%" y="405" width="0.0305%" height="15" fill="rgb(230,116,27)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.03%)</title><rect x="9.4722%" y="389" width="0.0305%" height="15" fill="rgb(228,99,48)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="399.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.03%)</title><rect x="9.4722%" y="373" width="0.0305%" height="15" fill="rgb(253,11,6)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="383.50"></text></g><g><title>realloc (4 samples, 0.03%)</title><rect x="9.4722%" y="357" width="0.0305%" height="15" fill="rgb(247,143,39)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="9.4722%" y="341" width="0.0305%" height="15" fill="rgb(236,97,10)" fg:x="1242" fg:w="4"/><text x="9.7222%" y="351.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="9.4799%" y="325" width="0.0229%" height="15" fill="rgb(233,208,19)" fg:x="1243" fg:w="3"/><text x="9.7299%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="9.5180%" y="453" width="0.0153%" height="15" fill="rgb(216,164,2)" fg:x="1248" fg:w="2"/><text x="9.7680%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="9.8536%" y="261" width="0.0153%" height="15" fill="rgb(220,129,5)" fg:x="1292" fg:w="2"/><text x="10.1036%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::position (10 samples, 0.08%)</title><rect x="9.9070%" y="213" width="0.0763%" height="15" fill="rgb(242,17,10)" fg:x="1299" fg:w="10"/><text x="10.1570%" y="223.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="9.9680%" y="197" width="0.0153%" height="15" fill="rgb(242,107,0)" fg:x="1307" fg:w="2"/><text x="10.2180%" y="207.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="9.9680%" y="181" width="0.0153%" height="15" fill="rgb(251,28,31)" fg:x="1307" fg:w="2"/><text x="10.2180%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="9.9680%" y="165" width="0.0153%" height="15" fill="rgb(233,223,10)" fg:x="1307" fg:w="2"/><text x="10.2180%" y="175.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="10.0824%" y="181" width="0.0153%" height="15" fill="rgb(215,21,27)" fg:x="1322" fg:w="2"/><text x="10.3324%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (4 samples, 0.03%)</title><rect x="10.0976%" y="181" width="0.0305%" height="15" fill="rgb(232,23,21)" fg:x="1324" fg:w="4"/><text x="10.3476%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (6 samples, 0.05%)</title><rect x="10.1281%" y="181" width="0.0458%" height="15" fill="rgb(244,5,23)" fg:x="1328" fg:w="6"/><text x="10.3781%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.02%)</title><rect x="10.1586%" y="165" width="0.0153%" height="15" fill="rgb(226,81,46)" fg:x="1332" fg:w="2"/><text x="10.4086%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (2 samples, 0.02%)</title><rect x="10.1586%" y="149" width="0.0153%" height="15" fill="rgb(247,70,30)" fg:x="1332" fg:w="2"/><text x="10.4086%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (2 samples, 0.02%)</title><rect x="10.1586%" y="133" width="0.0153%" height="15" fill="rgb(212,68,19)" fg:x="1332" fg:w="2"/><text x="10.4086%" y="143.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (42 samples, 0.32%)</title><rect x="9.8688%" y="261" width="0.3203%" height="15" fill="rgb(240,187,13)" fg:x="1294" fg:w="42"/><text x="10.1188%" y="271.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (42 samples, 0.32%)</title><rect x="9.8688%" y="245" width="0.3203%" height="15" fill="rgb(223,113,26)" fg:x="1294" fg:w="42"/><text x="10.1188%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position (42 samples, 0.32%)</title><rect x="9.8688%" y="229" width="0.3203%" height="15" fill="rgb(206,192,2)" fg:x="1294" fg:w="42"/><text x="10.1188%" y="239.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (27 samples, 0.21%)</title><rect x="9.9832%" y="213" width="0.2059%" height="15" fill="rgb(241,108,4)" fg:x="1309" fg:w="27"/><text x="10.2332%" y="223.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (23 samples, 0.18%)</title><rect x="10.0137%" y="197" width="0.1754%" height="15" fill="rgb(247,173,49)" fg:x="1313" fg:w="23"/><text x="10.2637%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 0.02%)</title><rect x="10.1739%" y="181" width="0.0153%" height="15" fill="rgb(224,114,35)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="10.1739%" y="165" width="0.0153%" height="15" fill="rgb(245,159,27)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="175.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="10.1739%" y="149" width="0.0153%" height="15" fill="rgb(245,172,44)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="159.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="10.1739%" y="133" width="0.0153%" height="15" fill="rgb(236,23,11)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="143.50"></text></g><g><title>memchr::memchr::memchr::imp (2 samples, 0.02%)</title><rect x="10.1739%" y="117" width="0.0153%" height="15" fill="rgb(205,117,38)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="127.50"></text></g><g><title>memchr::memchr::x86::memchr (2 samples, 0.02%)</title><rect x="10.1739%" y="101" width="0.0153%" height="15" fill="rgb(237,72,25)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="111.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (2 samples, 0.02%)</title><rect x="10.1739%" y="85" width="0.0153%" height="15" fill="rgb(244,70,9)" fg:x="1334" fg:w="2"/><text x="10.4239%" y="95.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="10.2959%" y="229" width="0.0305%" height="15" fill="rgb(217,125,39)" fg:x="1350" fg:w="4"/><text x="10.5459%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="10.2959%" y="213" width="0.0305%" height="15" fill="rgb(235,36,10)" fg:x="1350" fg:w="4"/><text x="10.5459%" y="223.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.2959%" y="197" width="0.0305%" height="15" fill="rgb(251,123,47)" fg:x="1350" fg:w="4"/><text x="10.5459%" y="207.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.2959%" y="181" width="0.0305%" height="15" fill="rgb(221,13,13)" fg:x="1350" fg:w="4"/><text x="10.5459%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.03%)</title><rect x="10.2959%" y="165" width="0.0305%" height="15" fill="rgb(238,131,9)" fg:x="1350" fg:w="4"/><text x="10.5459%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="10.3035%" y="149" width="0.0229%" height="15" fill="rgb(211,50,8)" fg:x="1351" fg:w="3"/><text x="10.5535%" y="159.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (4 samples, 0.03%)</title><rect x="10.4790%" y="197" width="0.0305%" height="15" fill="rgb(245,182,24)" fg:x="1374" fg:w="4"/><text x="10.7290%" y="207.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (91 samples, 0.69%)</title><rect x="9.8307%" y="293" width="0.6940%" height="15" fill="rgb(242,14,37)" fg:x="1289" fg:w="91"/><text x="10.0807%" y="303.50"></text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}} (90 samples, 0.69%)</title><rect x="9.8383%" y="277" width="0.6864%" height="15" fill="rgb(246,228,12)" fg:x="1290" fg:w="90"/><text x="10.0883%" y="287.50"></text></g><g><title>nom_locate::position (44 samples, 0.34%)</title><rect x="10.1891%" y="261" width="0.3356%" height="15" fill="rgb(213,55,15)" fg:x="1336" fg:w="44"/><text x="10.4391%" y="271.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (34 samples, 0.26%)</title><rect x="10.2654%" y="245" width="0.2593%" height="15" fill="rgb(209,9,3)" fg:x="1346" fg:w="34"/><text x="10.5154%" y="255.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (26 samples, 0.20%)</title><rect x="10.3264%" y="229" width="0.1983%" height="15" fill="rgb(230,59,30)" fg:x="1354" fg:w="26"/><text x="10.5764%" y="239.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (18 samples, 0.14%)</title><rect x="10.3874%" y="213" width="0.1373%" height="15" fill="rgb(209,121,21)" fg:x="1362" fg:w="18"/><text x="10.6374%" y="223.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="10.5095%" y="197" width="0.0153%" height="15" fill="rgb(220,109,13)" fg:x="1378" fg:w="2"/><text x="10.7595%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.24%)</title><rect x="10.5628%" y="277" width="0.2364%" height="15" fill="rgb(232,18,1)" fg:x="1385" fg:w="31"/><text x="10.8128%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (30 samples, 0.23%)</title><rect x="10.5705%" y="261" width="0.2288%" height="15" fill="rgb(215,41,42)" fg:x="1386" fg:w="30"/><text x="10.8205%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.23%)</title><rect x="10.5705%" y="245" width="0.2288%" height="15" fill="rgb(224,123,36)" fg:x="1386" fg:w="30"/><text x="10.8205%" y="255.50"></text></g><g><title>malloc (28 samples, 0.21%)</title><rect x="10.5857%" y="229" width="0.2135%" height="15" fill="rgb(240,125,3)" fg:x="1388" fg:w="28"/><text x="10.8357%" y="239.50"></text></g><g><title>[libc.so.6] (24 samples, 0.18%)</title><rect x="10.6162%" y="213" width="0.1830%" height="15" fill="rgb(205,98,50)" fg:x="1392" fg:w="24"/><text x="10.8662%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="10.7764%" y="197" width="0.0229%" height="15" fill="rgb(205,185,37)" fg:x="1413" fg:w="3"/><text x="11.0264%" y="207.50"></text></g><g><title>hl7_parser::parser::sub_components_parser::{{closure}} (138 samples, 1.05%)</title><rect x="9.7544%" y="325" width="1.0525%" height="15" fill="rgb(238,207,15)" fg:x="1279" fg:w="138"/><text x="10.0044%" y="335.50"></text></g><g><title>nom::multi::separated_list0::{{closure}} (138 samples, 1.05%)</title><rect x="9.7544%" y="309" width="1.0525%" height="15" fill="rgb(213,199,42)" fg:x="1279" fg:w="138"/><text x="10.0044%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.28%)</title><rect x="10.5247%" y="293" width="0.2822%" height="15" fill="rgb(235,201,11)" fg:x="1380" fg:w="37"/><text x="10.7747%" y="303.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="10.9137%" y="293" width="0.0305%" height="15" fill="rgb(207,46,11)" fg:x="1431" fg:w="4"/><text x="11.1637%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (4 samples, 0.03%)</title><rect x="10.9137%" y="277" width="0.0305%" height="15" fill="rgb(241,35,35)" fg:x="1431" fg:w="4"/><text x="11.1637%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.9137%" y="261" width="0.0305%" height="15" fill="rgb(243,32,47)" fg:x="1431" fg:w="4"/><text x="11.1637%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="10.9137%" y="245" width="0.0305%" height="15" fill="rgb(247,202,23)" fg:x="1431" fg:w="4"/><text x="11.1637%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.03%)</title><rect x="10.9137%" y="229" width="0.0305%" height="15" fill="rgb(219,102,11)" fg:x="1431" fg:w="4"/><text x="11.1637%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="10.9289%" y="213" width="0.0153%" height="15" fill="rgb(243,110,44)" fg:x="1433" fg:w="2"/><text x="11.1789%" y="223.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="11.2187%" y="261" width="0.0153%" height="15" fill="rgb(222,74,54)" fg:x="1471" fg:w="2"/><text x="11.4687%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (5 samples, 0.04%)</title><rect x="11.2340%" y="261" width="0.0381%" height="15" fill="rgb(216,99,12)" fg:x="1473" fg:w="5"/><text x="11.4840%" y="271.50"></text></g><g><title>hl7_parser::parser::component_parser::{{closure}} (213 samples, 1.62%)</title><rect x="9.6553%" y="341" width="1.6245%" height="15" fill="rgb(226,22,26)" fg:x="1266" fg:w="213"/><text x="9.9053%" y="351.50"></text></g><g><title>nom_locate::position (62 samples, 0.47%)</title><rect x="10.8069%" y="325" width="0.4728%" height="15" fill="rgb(217,163,10)" fg:x="1417" fg:w="62"/><text x="11.0569%" y="335.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (58 samples, 0.44%)</title><rect x="10.8374%" y="309" width="0.4423%" height="15" fill="rgb(213,25,53)" fg:x="1421" fg:w="58"/><text x="11.0874%" y="319.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (44 samples, 0.34%)</title><rect x="10.9442%" y="293" width="0.3356%" height="15" fill="rgb(252,105,26)" fg:x="1435" fg:w="44"/><text x="11.1942%" y="303.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (30 samples, 0.23%)</title><rect x="11.0509%" y="277" width="0.2288%" height="15" fill="rgb(220,39,43)" fg:x="1449" fg:w="30"/><text x="11.3009%" y="287.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (215 samples, 1.64%)</title><rect x="9.6553%" y="357" width="1.6397%" height="15" fill="rgb(229,68,48)" fg:x="1266" fg:w="215"/><text x="9.9053%" y="367.50"></text></g><g><title>nom::character::complete::char::{{closure}} (2 samples, 0.02%)</title><rect x="11.2797%" y="341" width="0.0153%" height="15" fill="rgb(252,8,32)" fg:x="1479" fg:w="2"/><text x="11.5297%" y="351.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="11.2797%" y="325" width="0.0153%" height="15" fill="rgb(223,20,43)" fg:x="1479" fg:w="2"/><text x="11.5297%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 0.30%)</title><rect x="11.3026%" y="309" width="0.2974%" height="15" fill="rgb(229,81,49)" fg:x="1482" fg:w="39"/><text x="11.5526%" y="319.50"></text></g><g><title>malloc (37 samples, 0.28%)</title><rect x="11.3179%" y="293" width="0.2822%" height="15" fill="rgb(236,28,36)" fg:x="1484" fg:w="37"/><text x="11.5679%" y="303.50"></text></g><g><title>[libc.so.6] (32 samples, 0.24%)</title><rect x="11.3560%" y="277" width="0.2441%" height="15" fill="rgb(249,185,26)" fg:x="1489" fg:w="32"/><text x="11.6060%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (41 samples, 0.31%)</title><rect x="11.2950%" y="357" width="0.3127%" height="15" fill="rgb(249,174,33)" fg:x="1481" fg:w="41"/><text x="11.5450%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.31%)</title><rect x="11.3026%" y="341" width="0.3051%" height="15" fill="rgb(233,201,37)" fg:x="1482" fg:w="40"/><text x="11.5526%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (40 samples, 0.31%)</title><rect x="11.3026%" y="325" width="0.3051%" height="15" fill="rgb(221,78,26)" fg:x="1482" fg:w="40"/><text x="11.5526%" y="335.50"></text></g><g><title>hl7_parser::parser::components_parser::{{closure}} (259 samples, 1.98%)</title><rect x="9.6400%" y="389" width="1.9753%" height="15" fill="rgb(250,127,30)" fg:x="1264" fg:w="259"/><text x="9.8900%" y="399.50">h..</text></g><g><title>nom::multi::separated_list0::{{closure}} (259 samples, 1.98%)</title><rect x="9.6400%" y="373" width="1.9753%" height="15" fill="rgb(230,49,44)" fg:x="1264" fg:w="259"/><text x="9.8900%" y="383.50">n..</text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (3 samples, 0.02%)</title><rect x="12.1034%" y="325" width="0.0229%" height="15" fill="rgb(229,67,23)" fg:x="1587" fg:w="3"/><text x="12.3534%" y="335.50"></text></g><g><title>hl7_parser::parser::field_parser::{{closure}} (332 samples, 2.53%)</title><rect x="9.6095%" y="405" width="2.5320%" height="15" fill="rgb(249,83,47)" fg:x="1260" fg:w="332"/><text x="9.8595%" y="415.50">hl..</text></g><g><title>nom_locate::position (69 samples, 0.53%)</title><rect x="11.6153%" y="389" width="0.5262%" height="15" fill="rgb(215,43,3)" fg:x="1523" fg:w="69"/><text x="11.8653%" y="399.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (55 samples, 0.42%)</title><rect x="11.7221%" y="373" width="0.4195%" height="15" fill="rgb(238,154,13)" fg:x="1537" fg:w="55"/><text x="11.9721%" y="383.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (37 samples, 0.28%)</title><rect x="11.8594%" y="357" width="0.2822%" height="15" fill="rgb(219,56,2)" fg:x="1555" fg:w="37"/><text x="12.1094%" y="367.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (14 samples, 0.11%)</title><rect x="12.0348%" y="341" width="0.1068%" height="15" fill="rgb(233,0,4)" fg:x="1578" fg:w="14"/><text x="12.2848%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="12.1263%" y="325" width="0.0153%" height="15" fill="rgb(235,30,7)" fg:x="1590" fg:w="2"/><text x="12.3763%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="12.1797%" y="373" width="0.0153%" height="15" fill="rgb(250,79,13)" fg:x="1597" fg:w="2"/><text x="12.4297%" y="383.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="12.1949%" y="373" width="0.0153%" height="15" fill="rgb(211,146,34)" fg:x="1599" fg:w="2"/><text x="12.4449%" y="383.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (3 samples, 0.02%)</title><rect x="12.2102%" y="373" width="0.0229%" height="15" fill="rgb(228,22,38)" fg:x="1601" fg:w="3"/><text x="12.4602%" y="383.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (347 samples, 2.65%)</title><rect x="9.6019%" y="421" width="2.6464%" height="15" fill="rgb(235,168,5)" fg:x="1259" fg:w="347"/><text x="9.8519%" y="431.50">&lt;F..</text></g><g><title>nom::character::complete::char::{{closure}} (14 samples, 0.11%)</title><rect x="12.1415%" y="405" width="0.1068%" height="15" fill="rgb(221,155,16)" fg:x="1592" fg:w="14"/><text x="12.3915%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (14 samples, 0.11%)</title><rect x="12.1415%" y="389" width="0.1068%" height="15" fill="rgb(215,215,53)" fg:x="1592" fg:w="14"/><text x="12.3915%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 0.02%)</title><rect x="12.2331%" y="373" width="0.0153%" height="15" fill="rgb(223,4,10)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="12.2331%" y="357" width="0.0153%" height="15" fill="rgb(234,103,6)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="367.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="12.2331%" y="341" width="0.0153%" height="15" fill="rgb(227,97,0)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="351.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="12.2331%" y="325" width="0.0153%" height="15" fill="rgb(234,150,53)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="335.50"></text></g><g><title>memchr::memchr::memchr::imp (2 samples, 0.02%)</title><rect x="12.2331%" y="309" width="0.0153%" height="15" fill="rgb(228,201,54)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="319.50"></text></g><g><title>memchr::memchr::x86::memchr (2 samples, 0.02%)</title><rect x="12.2331%" y="293" width="0.0153%" height="15" fill="rgb(222,22,37)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="303.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (2 samples, 0.02%)</title><rect x="12.2331%" y="277" width="0.0153%" height="15" fill="rgb(237,53,32)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="287.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (2 samples, 0.02%)</title><rect x="12.2331%" y="261" width="0.0153%" height="15" fill="rgb(233,25,53)" fg:x="1604" fg:w="2"/><text x="12.4831%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (16 samples, 0.12%)</title><rect x="12.2712%" y="357" width="0.1220%" height="15" fill="rgb(210,40,34)" fg:x="1609" fg:w="16"/><text x="12.5212%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (16 samples, 0.12%)</title><rect x="12.2712%" y="341" width="0.1220%" height="15" fill="rgb(241,220,44)" fg:x="1609" fg:w="16"/><text x="12.5212%" y="351.50"></text></g><g><title>alloc::alloc::realloc (16 samples, 0.12%)</title><rect x="12.2712%" y="325" width="0.1220%" height="15" fill="rgb(235,28,35)" fg:x="1609" fg:w="16"/><text x="12.5212%" y="335.50"></text></g><g><title>realloc (15 samples, 0.11%)</title><rect x="12.2788%" y="309" width="0.1144%" height="15" fill="rgb(210,56,17)" fg:x="1610" fg:w="15"/><text x="12.5288%" y="319.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="12.2788%" y="293" width="0.1144%" height="15" fill="rgb(224,130,29)" fg:x="1610" fg:w="15"/><text x="12.5288%" y="303.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="12.2788%" y="277" width="0.1144%" height="15" fill="rgb(235,212,8)" fg:x="1610" fg:w="15"/><text x="12.5288%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.14%)</title><rect x="12.2559%" y="405" width="0.1449%" height="15" fill="rgb(223,33,50)" fg:x="1607" fg:w="19"/><text x="12.5059%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.14%)</title><rect x="12.2559%" y="389" width="0.1449%" height="15" fill="rgb(219,149,13)" fg:x="1607" fg:w="19"/><text x="12.5059%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.13%)</title><rect x="12.2712%" y="373" width="0.1297%" height="15" fill="rgb(250,156,29)" fg:x="1609" fg:w="17"/><text x="12.5212%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.15%)</title><rect x="12.2559%" y="421" width="0.1525%" height="15" fill="rgb(216,193,19)" fg:x="1607" fg:w="20"/><text x="12.5059%" y="431.50"></text></g><g><title>hl7_parser::parser::fields_parser::{{closure}} (378 samples, 2.88%)</title><rect x="9.5409%" y="453" width="2.8829%" height="15" fill="rgb(216,135,14)" fg:x="1251" fg:w="378"/><text x="9.7909%" y="463.50">hl..</text></g><g><title>nom::multi::separated_list0::{{closure}} (378 samples, 2.88%)</title><rect x="9.5409%" y="437" width="2.8829%" height="15" fill="rgb(241,47,5)" fg:x="1251" fg:w="378"/><text x="9.7909%" y="447.50">no..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="12.4085%" y="421" width="0.0153%" height="15" fill="rgb(233,42,35)" fg:x="1627" fg:w="2"/><text x="12.6585%" y="431.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="12.4390%" y="389" width="0.0153%" height="15" fill="rgb(231,13,6)" fg:x="1631" fg:w="2"/><text x="12.6890%" y="399.50"></text></g><g><title>hl7_parser::parser::parse_separators (5 samples, 0.04%)</title><rect x="12.4237%" y="453" width="0.0381%" height="15" fill="rgb(207,181,40)" fg:x="1629" fg:w="5"/><text x="12.6737%" y="463.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (5 samples, 0.04%)</title><rect x="12.4237%" y="437" width="0.0381%" height="15" fill="rgb(254,173,49)" fg:x="1629" fg:w="5"/><text x="12.6737%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (5 samples, 0.04%)</title><rect x="12.4237%" y="421" width="0.0381%" height="15" fill="rgb(221,1,38)" fg:x="1629" fg:w="5"/><text x="12.6737%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (4 samples, 0.03%)</title><rect x="12.4314%" y="405" width="0.0305%" height="15" fill="rgb(206,124,46)" fg:x="1630" fg:w="4"/><text x="12.6814%" y="415.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (2 samples, 0.02%)</title><rect x="12.4619%" y="453" width="0.0153%" height="15" fill="rgb(249,21,11)" fg:x="1634" fg:w="2"/><text x="12.7119%" y="463.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (2 samples, 0.02%)</title><rect x="12.4619%" y="437" width="0.0153%" height="15" fill="rgb(222,201,40)" fg:x="1634" fg:w="2"/><text x="12.7119%" y="447.50"></text></g><g><title>hl7_parser::parser::parse_msh (394 samples, 3.00%)</title><rect x="9.5027%" y="469" width="3.0049%" height="15" fill="rgb(235,61,29)" fg:x="1246" fg:w="394"/><text x="9.7527%" y="479.50">hl7..</text></g><g><title>nom_locate::position (3 samples, 0.02%)</title><rect x="12.4847%" y="453" width="0.0229%" height="15" fill="rgb(219,207,3)" fg:x="1637" fg:w="3"/><text x="12.7347%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.12%)</title><rect x="12.7898%" y="421" width="0.1220%" height="15" fill="rgb(222,56,46)" fg:x="1677" fg:w="16"/><text x="13.0398%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.11%)</title><rect x="16.0998%" y="357" width="0.1144%" height="15" fill="rgb(239,76,54)" fg:x="2111" fg:w="15"/><text x="16.3498%" y="367.50"></text></g><g><title>nom::multi::separated_list0 (11 samples, 0.08%)</title><rect x="16.2142%" y="341" width="0.0839%" height="15" fill="rgb(231,124,27)" fg:x="2126" fg:w="11"/><text x="16.4642%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (26 samples, 0.20%)</title><rect x="19.0665%" y="293" width="0.1983%" height="15" fill="rgb(249,195,6)" fg:x="2500" fg:w="26"/><text x="19.3165%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (31 samples, 0.24%)</title><rect x="23.0476%" y="229" width="0.2364%" height="15" fill="rgb(237,174,47)" fg:x="3022" fg:w="31"/><text x="23.2976%" y="239.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.24%)</title><rect x="25.8771%" y="165" width="0.2364%" height="15" fill="rgb(206,201,31)" fg:x="3393" fg:w="31"/><text x="26.1271%" y="175.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.24%)</title><rect x="25.8771%" y="149" width="0.2364%" height="15" fill="rgb(231,57,52)" fg:x="3393" fg:w="31"/><text x="26.1271%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (31 samples, 0.24%)</title><rect x="25.8771%" y="133" width="0.2364%" height="15" fill="rgb(248,177,22)" fg:x="3393" fg:w="31"/><text x="26.1271%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.14%)</title><rect x="25.9686%" y="117" width="0.1449%" height="15" fill="rgb(215,211,37)" fg:x="3405" fg:w="19"/><text x="26.2186%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (42 samples, 0.32%)</title><rect x="26.1135%" y="165" width="0.3203%" height="15" fill="rgb(241,128,51)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (42 samples, 0.32%)</title><rect x="26.1135%" y="149" width="0.3203%" height="15" fill="rgb(227,165,31)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (42 samples, 0.32%)</title><rect x="26.1135%" y="133" width="0.3203%" height="15" fill="rgb(228,167,24)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="143.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (42 samples, 0.32%)</title><rect x="26.1135%" y="117" width="0.3203%" height="15" fill="rgb(228,143,12)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 0.32%)</title><rect x="26.1135%" y="101" width="0.3203%" height="15" fill="rgb(249,149,8)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (42 samples, 0.32%)</title><rect x="26.1135%" y="85" width="0.3203%" height="15" fill="rgb(243,35,44)" fg:x="3424" fg:w="42"/><text x="26.3635%" y="95.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::position (173 samples, 1.32%)</title><rect x="25.2593%" y="181" width="1.3194%" height="15" fill="rgb(246,89,9)" fg:x="3312" fg:w="173"/><text x="25.5093%" y="191.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}}::{{closure}} (19 samples, 0.14%)</title><rect x="26.4338%" y="165" width="0.1449%" height="15" fill="rgb(233,213,13)" fg:x="3466" fg:w="19"/><text x="26.6838%" y="175.50"></text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}}::{{closure}} (19 samples, 0.14%)</title><rect x="26.4338%" y="149" width="0.1449%" height="15" fill="rgb(233,141,41)" fg:x="3466" fg:w="19"/><text x="26.6838%" y="159.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (77 samples, 0.59%)</title><rect x="30.7352%" y="149" width="0.5872%" height="15" fill="rgb(239,167,4)" fg:x="4030" fg:w="77"/><text x="30.9852%" y="159.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (77 samples, 0.59%)</title><rect x="31.3225%" y="149" width="0.5872%" height="15" fill="rgb(209,217,16)" fg:x="4107" fg:w="77"/><text x="31.5725%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (16 samples, 0.12%)</title><rect x="31.7877%" y="133" width="0.1220%" height="15" fill="rgb(219,88,35)" fg:x="4168" fg:w="16"/><text x="32.0377%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (16 samples, 0.12%)</title><rect x="31.7877%" y="117" width="0.1220%" height="15" fill="rgb(220,193,23)" fg:x="4168" fg:w="16"/><text x="32.0377%" y="127.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (16 samples, 0.12%)</title><rect x="31.7877%" y="101" width="0.1220%" height="15" fill="rgb(230,90,52)" fg:x="4168" fg:w="16"/><text x="32.0377%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (3 samples, 0.02%)</title><rect x="31.8868%" y="85" width="0.0229%" height="15" fill="rgb(252,106,19)" fg:x="4181" fg:w="3"/><text x="32.1368%" y="95.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (92 samples, 0.70%)</title><rect x="31.9097%" y="149" width="0.7016%" height="15" fill="rgb(206,74,20)" fg:x="4184" fg:w="92"/><text x="32.1597%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (24 samples, 0.18%)</title><rect x="32.4283%" y="133" width="0.1830%" height="15" fill="rgb(230,138,44)" fg:x="4252" fg:w="24"/><text x="32.6783%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (24 samples, 0.18%)</title><rect x="32.4283%" y="117" width="0.1830%" height="15" fill="rgb(235,182,43)" fg:x="4252" fg:w="24"/><text x="32.6783%" y="127.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (24 samples, 0.18%)</title><rect x="32.4283%" y="101" width="0.1830%" height="15" fill="rgb(242,16,51)" fg:x="4252" fg:w="24"/><text x="32.6783%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (5 samples, 0.04%)</title><rect x="32.5732%" y="85" width="0.0381%" height="15" fill="rgb(248,9,4)" fg:x="4271" fg:w="5"/><text x="32.8232%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.04%)</title><rect x="32.5732%" y="69" width="0.0381%" height="15" fill="rgb(210,31,22)" fg:x="4271" fg:w="5"/><text x="32.8232%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.04%)</title><rect x="32.5732%" y="53" width="0.0381%" height="15" fill="rgb(239,54,39)" fg:x="4271" fg:w="5"/><text x="32.8232%" y="63.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (5 samples, 0.04%)</title><rect x="32.6113%" y="53" width="0.0381%" height="15" fill="rgb(230,99,41)" fg:x="4276" fg:w="5"/><text x="32.8613%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="32.6113%" y="37" width="0.0381%" height="15" fill="rgb(253,106,12)" fg:x="4276" fg:w="5"/><text x="32.8613%" y="47.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (1,284 samples, 9.79%)</title><rect x="23.2840%" y="229" width="9.7926%" height="15" fill="rgb(213,46,41)" fg:x="3053" fg:w="1284"/><text x="23.5340%" y="239.50">nom::bytes::co..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (1,284 samples, 9.79%)</title><rect x="23.2840%" y="213" width="9.7926%" height="15" fill="rgb(215,133,35)" fg:x="3053" fg:w="1284"/><text x="23.5340%" y="223.50">&lt;nom_locate::L..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTakeAtPosition&gt;::split_at_position (1,097 samples, 8.37%)</title><rect x="24.7102%" y="197" width="8.3664%" height="15" fill="rgb(213,28,5)" fg:x="3240" fg:w="1097"/><text x="24.9602%" y="207.50">&lt;nom_locate:..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (852 samples, 6.50%)</title><rect x="26.5787%" y="181" width="6.4979%" height="15" fill="rgb(215,77,49)" fg:x="3485" fg:w="852"/><text x="26.8287%" y="191.50">&lt;nom_loca..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (675 samples, 5.15%)</title><rect x="27.9286%" y="165" width="5.1480%" height="15" fill="rgb(248,100,22)" fg:x="3662" fg:w="675"/><text x="28.1786%" y="175.50">&lt;nom_l..</text></g><g><title>core::iter::traits::iterator::Iterator::count (61 samples, 0.47%)</title><rect x="32.6113%" y="149" width="0.4652%" height="15" fill="rgb(208,67,9)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.47%)</title><rect x="32.6113%" y="133" width="0.4652%" height="15" fill="rgb(219,133,21)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="143.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.47%)</title><rect x="32.6113%" y="117" width="0.4652%" height="15" fill="rgb(246,46,29)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="127.50"></text></g><g><title>memchr::memchr::memchr (61 samples, 0.47%)</title><rect x="32.6113%" y="101" width="0.4652%" height="15" fill="rgb(246,185,52)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="111.50"></text></g><g><title>memchr::memchr::memchr::imp (61 samples, 0.47%)</title><rect x="32.6113%" y="85" width="0.4652%" height="15" fill="rgb(252,136,11)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="95.50"></text></g><g><title>memchr::memchr::x86::memchr (61 samples, 0.47%)</title><rect x="32.6113%" y="69" width="0.4652%" height="15" fill="rgb(219,138,53)" fg:x="4276" fg:w="61"/><text x="32.8613%" y="79.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (56 samples, 0.43%)</title><rect x="32.6495%" y="53" width="0.4271%" height="15" fill="rgb(211,51,23)" fg:x="4281" fg:w="56"/><text x="32.8995%" y="63.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (45 samples, 0.34%)</title><rect x="32.7334%" y="37" width="0.3432%" height="15" fill="rgb(247,221,28)" fg:x="4292" fg:w="45"/><text x="32.9834%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.83%)</title><rect x="38.1864%" y="117" width="0.8313%" height="15" fill="rgb(251,222,45)" fg:x="5007" fg:w="109"/><text x="38.4364%" y="127.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (177 samples, 1.35%)</title><rect x="37.6754%" y="197" width="1.3499%" height="15" fill="rgb(217,162,53)" fg:x="4940" fg:w="177"/><text x="37.9254%" y="207.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (177 samples, 1.35%)</title><rect x="37.6754%" y="181" width="1.3499%" height="15" fill="rgb(229,93,14)" fg:x="4940" fg:w="177"/><text x="37.9254%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (177 samples, 1.35%)</title><rect x="37.6754%" y="165" width="1.3499%" height="15" fill="rgb(209,67,49)" fg:x="4940" fg:w="177"/><text x="37.9254%" y="175.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (177 samples, 1.35%)</title><rect x="37.6754%" y="149" width="1.3499%" height="15" fill="rgb(213,87,29)" fg:x="4940" fg:w="177"/><text x="37.9254%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (177 samples, 1.35%)</title><rect x="37.6754%" y="133" width="1.3499%" height="15" fill="rgb(205,151,52)" fg:x="4940" fg:w="177"/><text x="37.9254%" y="143.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (53 samples, 0.40%)</title><rect x="43.3801%" y="165" width="0.4042%" height="15" fill="rgb(253,215,39)" fg:x="5688" fg:w="53"/><text x="43.6301%" y="175.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (40 samples, 0.31%)</title><rect x="43.7843%" y="165" width="0.3051%" height="15" fill="rgb(221,220,41)" fg:x="5741" fg:w="40"/><text x="44.0343%" y="175.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (690 samples, 5.26%)</title><rect x="39.0253%" y="197" width="5.2624%" height="15" fill="rgb(218,133,21)" fg:x="5117" fg:w="690"/><text x="39.2753%" y="207.50">&lt;nom_l..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (489 samples, 3.73%)</title><rect x="40.5583%" y="181" width="3.7294%" height="15" fill="rgb(221,193,43)" fg:x="5318" fg:w="489"/><text x="40.8083%" y="191.50">&lt;nom..</text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (26 samples, 0.20%)</title><rect x="44.0894%" y="165" width="0.1983%" height="15" fill="rgb(240,128,52)" fg:x="5781" fg:w="26"/><text x="44.3394%" y="175.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="44.2877%" y="165" width="0.0153%" height="15" fill="rgb(253,114,12)" fg:x="5807" fg:w="2"/><text x="44.5377%" y="175.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.02%)</title><rect x="44.2877%" y="149" width="0.0153%" height="15" fill="rgb(215,223,47)" fg:x="5807" fg:w="2"/><text x="44.5377%" y="159.50"></text></g><g><title>hl7_parser::parser::sub_component_parser::{{closure}} (2,964 samples, 22.61%)</title><rect x="21.7053%" y="245" width="22.6052%" height="15" fill="rgb(248,225,23)" fg:x="2846" fg:w="2964"/><text x="21.9553%" y="255.50">hl7_parser::parser::sub_component_pa..</text></g><g><title>nom_locate::position (1,473 samples, 11.23%)</title><rect x="33.0766%" y="229" width="11.2340%" height="15" fill="rgb(250,108,0)" fg:x="4337" fg:w="1473"/><text x="33.3266%" y="239.50">nom_locate::posit..</text></g><g><title>nom::bytes::complete::take::{{closure}} (1,119 samples, 8.53%)</title><rect x="35.7764%" y="213" width="8.5342%" height="15" fill="rgb(228,208,7)" fg:x="4691" fg:w="1119"/><text x="36.0264%" y="223.50">nom::bytes::..</text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.02%)</title><rect x="44.2877%" y="197" width="0.0229%" height="15" fill="rgb(244,45,10)" fg:x="5807" fg:w="3"/><text x="44.5377%" y="207.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.02%)</title><rect x="44.2877%" y="181" width="0.0229%" height="15" fill="rgb(207,125,25)" fg:x="5807" fg:w="3"/><text x="44.5377%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="44.4478%" y="197" width="0.1068%" height="15" fill="rgb(210,195,18)" fg:x="5828" fg:w="14"/><text x="44.6978%" y="207.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,016 samples, 23.00%)</title><rect x="21.5604%" y="261" width="23.0018%" height="15" fill="rgb(249,80,12)" fg:x="2827" fg:w="3016"/><text x="21.8104%" y="271.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;:..</text></g><g><title>nom::character::complete::char::{{closure}} (33 samples, 0.25%)</title><rect x="44.3106%" y="245" width="0.2517%" height="15" fill="rgb(221,65,9)" fg:x="5810" fg:w="33"/><text x="44.5606%" y="255.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.22%)</title><rect x="44.3411%" y="229" width="0.2212%" height="15" fill="rgb(235,49,36)" fg:x="5814" fg:w="29"/><text x="44.5911%" y="239.50"></text></g><g><title>core::str::validations::next_code_point (29 samples, 0.22%)</title><rect x="44.3411%" y="213" width="0.2212%" height="15" fill="rgb(225,32,20)" fg:x="5814" fg:w="29"/><text x="44.5911%" y="223.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (10 samples, 0.08%)</title><rect x="44.5622%" y="261" width="0.0763%" height="15" fill="rgb(215,141,46)" fg:x="5843" fg:w="10"/><text x="44.8122%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (32 samples, 0.24%)</title><rect x="45.5232%" y="213" width="0.2441%" height="15" fill="rgb(250,160,47)" fg:x="5969" fg:w="32"/><text x="45.7732%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.02%)</title><rect x="45.7672%" y="213" width="0.0229%" height="15" fill="rgb(216,222,40)" fg:x="6001" fg:w="3"/><text x="46.0172%" y="223.50"></text></g><g><title>__rdl_alloc (10 samples, 0.08%)</title><rect x="46.2172%" y="197" width="0.0763%" height="15" fill="rgb(234,217,39)" fg:x="6060" fg:w="10"/><text x="46.4672%" y="207.50"></text></g><g><title>__rust_alloc (23 samples, 0.18%)</title><rect x="46.2935%" y="197" width="0.1754%" height="15" fill="rgb(207,178,40)" fg:x="6070" fg:w="23"/><text x="46.5435%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (26 samples, 0.20%)</title><rect x="46.4689%" y="197" width="0.1983%" height="15" fill="rgb(221,136,13)" fg:x="6093" fg:w="26"/><text x="46.7189%" y="207.50"></text></g><g><title>[libc.so.6] (35 samples, 0.27%)</title><rect x="50.3813%" y="165" width="0.2669%" height="15" fill="rgb(249,199,10)" fg:x="6606" fg:w="35"/><text x="50.6313%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (638 samples, 4.87%)</title><rect x="45.7901%" y="213" width="4.8658%" height="15" fill="rgb(249,222,13)" fg:x="6004" fg:w="638"/><text x="46.0401%" y="223.50">alloc:..</text></g><g><title>malloc (523 samples, 3.99%)</title><rect x="46.6672%" y="197" width="3.9887%" height="15" fill="rgb(244,185,38)" fg:x="6119" fg:w="523"/><text x="46.9172%" y="207.50">mall..</text></g><g><title>[libc.so.6] (446 samples, 3.40%)</title><rect x="47.2544%" y="181" width="3.4015%" height="15" fill="rgb(236,202,9)" fg:x="6196" fg:w="446"/><text x="47.5044%" y="191.50">[li..</text></g><g><title>core::alloc::layout::Layout::array (12 samples, 0.09%)</title><rect x="50.6559%" y="213" width="0.0915%" height="15" fill="rgb(250,229,37)" fg:x="6642" fg:w="12"/><text x="50.9059%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (12 samples, 0.09%)</title><rect x="50.6559%" y="197" width="0.0915%" height="15" fill="rgb(206,174,23)" fg:x="6642" fg:w="12"/><text x="50.9059%" y="207.50"></text></g><g><title>core::cmp::max (10 samples, 0.08%)</title><rect x="50.7474%" y="213" width="0.0763%" height="15" fill="rgb(211,33,43)" fg:x="6654" fg:w="10"/><text x="50.9974%" y="223.50"></text></g><g><title>core::cmp::Ord::max (10 samples, 0.08%)</title><rect x="50.7474%" y="197" width="0.0763%" height="15" fill="rgb(245,58,50)" fg:x="6654" fg:w="10"/><text x="50.9974%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (725 samples, 5.53%)</title><rect x="45.3935%" y="245" width="5.5293%" height="15" fill="rgb(244,68,36)" fg:x="5952" fg:w="725"/><text x="45.6435%" y="255.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (717 samples, 5.47%)</title><rect x="45.4545%" y="229" width="5.4683%" height="15" fill="rgb(232,229,15)" fg:x="5960" fg:w="717"/><text x="45.7045%" y="239.50">alloc::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (13 samples, 0.10%)</title><rect x="50.8237%" y="213" width="0.0991%" height="15" fill="rgb(254,30,23)" fg:x="6664" fg:w="13"/><text x="51.0737%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (13 samples, 0.10%)</title><rect x="50.8237%" y="197" width="0.0991%" height="15" fill="rgb(235,160,14)" fg:x="6664" fg:w="13"/><text x="51.0737%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.05%)</title><rect x="50.9228%" y="245" width="0.0458%" height="15" fill="rgb(212,155,44)" fg:x="6677" fg:w="6"/><text x="51.1728%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.05%)</title><rect x="50.9228%" y="229" width="0.0458%" height="15" fill="rgb(226,2,50)" fg:x="6677" fg:w="6"/><text x="51.1728%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (837 samples, 6.38%)</title><rect x="44.6385%" y="261" width="6.3835%" height="15" fill="rgb(234,177,6)" fg:x="5853" fg:w="837"/><text x="44.8885%" y="271.50">alloc::v..</text></g><g><title>core::ptr::write (7 samples, 0.05%)</title><rect x="50.9686%" y="245" width="0.0534%" height="15" fill="rgb(217,24,9)" fg:x="6683" fg:w="7"/><text x="51.2186%" y="255.50"></text></g><g><title>hl7_parser::parser::sub_components_parser::{{closure}} (4,175 samples, 31.84%)</title><rect x="19.2724%" y="293" width="31.8411%" height="15" fill="rgb(220,13,46)" fg:x="2527" fg:w="4175"/><text x="19.5224%" y="303.50">hl7_parser::parser::sub_components_parser::{{closur..</text></g><g><title>nom::multi::separated_list0::{{closure}} (4,175 samples, 31.84%)</title><rect x="19.2724%" y="277" width="31.8411%" height="15" fill="rgb(239,221,27)" fg:x="2527" fg:w="4175"/><text x="19.5224%" y="287.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (12 samples, 0.09%)</title><rect x="51.0220%" y="261" width="0.0915%" height="15" fill="rgb(222,198,25)" fg:x="6690" fg:w="12"/><text x="51.2720%" y="271.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (122 samples, 0.93%)</title><rect x="57.2605%" y="261" width="0.9304%" height="15" fill="rgb(211,99,13)" fg:x="7508" fg:w="122"/><text x="57.5105%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (122 samples, 0.93%)</title><rect x="57.2605%" y="245" width="0.9304%" height="15" fill="rgb(232,111,31)" fg:x="7508" fg:w="122"/><text x="57.5105%" y="255.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 0.93%)</title><rect x="57.2605%" y="229" width="0.9304%" height="15" fill="rgb(245,82,37)" fg:x="7508" fg:w="122"/><text x="57.5105%" y="239.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 0.93%)</title><rect x="57.2605%" y="213" width="0.9304%" height="15" fill="rgb(227,149,46)" fg:x="7508" fg:w="122"/><text x="57.5105%" y="223.50"></text></g><g><title>core::str::validations::next_code_point (122 samples, 0.93%)</title><rect x="57.2605%" y="197" width="0.9304%" height="15" fill="rgb(218,36,50)" fg:x="7508" fg:w="122"/><text x="57.5105%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.54%)</title><rect x="57.6495%" y="181" width="0.5415%" height="15" fill="rgb(226,80,48)" fg:x="7559" fg:w="71"/><text x="57.8995%" y="191.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (105 samples, 0.80%)</title><rect x="66.4201%" y="229" width="0.8008%" height="15" fill="rgb(238,224,15)" fg:x="8709" fg:w="105"/><text x="66.6701%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (143 samples, 1.09%)</title><rect x="67.2209%" y="229" width="1.0906%" height="15" fill="rgb(241,136,10)" fg:x="8814" fg:w="143"/><text x="67.4709%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (6 samples, 0.05%)</title><rect x="68.2657%" y="213" width="0.0458%" height="15" fill="rgb(208,32,45)" fg:x="8951" fg:w="6"/><text x="68.5157%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (6 samples, 0.05%)</title><rect x="68.2657%" y="197" width="0.0458%" height="15" fill="rgb(207,135,9)" fg:x="8951" fg:w="6"/><text x="68.5157%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (6 samples, 0.05%)</title><rect x="68.2657%" y="181" width="0.0458%" height="15" fill="rgb(206,86,44)" fg:x="8951" fg:w="6"/><text x="68.5157%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (6 samples, 0.05%)</title><rect x="68.2657%" y="165" width="0.0458%" height="15" fill="rgb(245,177,15)" fg:x="8951" fg:w="6"/><text x="68.5157%" y="175.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (1,372 samples, 10.46%)</title><rect x="58.1910%" y="261" width="10.4637%" height="15" fill="rgb(206,64,50)" fg:x="7630" fg:w="1372"/><text x="58.4410%" y="271.50">&lt;nom_locate::Lo..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (1,040 samples, 7.93%)</title><rect x="60.7230%" y="245" width="7.9317%" height="15" fill="rgb(234,36,40)" fg:x="7962" fg:w="1040"/><text x="60.9730%" y="255.50">&lt;nom_locate..</text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (45 samples, 0.34%)</title><rect x="68.3115%" y="229" width="0.3432%" height="15" fill="rgb(213,64,8)" fg:x="8957" fg:w="45"/><text x="68.5615%" y="239.50"></text></g><g><title>hl7_parser::parser::component_parser::{{closure}} (6,797 samples, 51.84%)</title><rect x="16.8319%" y="309" width="51.8380%" height="15" fill="rgb(210,75,36)" fg:x="2207" fg:w="6797"/><text x="17.0819%" y="319.50">hl7_parser::parser::component_parser::{{closure}}</text></g><g><title>nom_locate::position (2,302 samples, 17.56%)</title><rect x="51.1135%" y="293" width="17.5564%" height="15" fill="rgb(229,88,21)" fg:x="6702" fg:w="2302"/><text x="51.3635%" y="303.50">nom_locate::position</text></g><g><title>nom::bytes::complete::take::{{closure}} (2,091 samples, 15.95%)</title><rect x="52.7227%" y="277" width="15.9472%" height="15" fill="rgb(252,204,47)" fg:x="6913" fg:w="2091"/><text x="52.9727%" y="287.50">nom::bytes::complete::tak..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.20%)</title><rect x="68.9216%" y="293" width="0.1983%" height="15" fill="rgb(208,77,27)" fg:x="9037" fg:w="26"/><text x="69.1716%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (26 samples, 0.20%)</title><rect x="68.9216%" y="277" width="0.1983%" height="15" fill="rgb(221,76,26)" fg:x="9037" fg:w="26"/><text x="69.1716%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="69.0207%" y="261" width="0.0991%" height="15" fill="rgb(225,139,18)" fg:x="9050" fg:w="13"/><text x="69.2707%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (6 samples, 0.05%)</title><rect x="69.4783%" y="277" width="0.0458%" height="15" fill="rgb(230,137,11)" fg:x="9110" fg:w="6"/><text x="69.7283%" y="287.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (10 samples, 0.08%)</title><rect x="69.5241%" y="277" width="0.0763%" height="15" fill="rgb(212,28,1)" fg:x="9116" fg:w="10"/><text x="69.7741%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.02%)</title><rect x="69.5851%" y="261" width="0.0153%" height="15" fill="rgb(248,164,17)" fg:x="9124" fg:w="2"/><text x="69.8351%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.02%)</title><rect x="69.5851%" y="245" width="0.0153%" height="15" fill="rgb(222,171,42)" fg:x="9124" fg:w="2"/><text x="69.8351%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.02%)</title><rect x="69.5851%" y="229" width="0.0153%" height="15" fill="rgb(243,84,45)" fg:x="9124" fg:w="2"/><text x="69.8351%" y="239.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (11 samples, 0.08%)</title><rect x="69.6004%" y="277" width="0.0839%" height="15" fill="rgb(252,49,23)" fg:x="9126" fg:w="11"/><text x="69.8504%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (5 samples, 0.04%)</title><rect x="69.6843%" y="181" width="0.0381%" height="15" fill="rgb(215,19,7)" fg:x="9137" fg:w="5"/><text x="69.9343%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.04%)</title><rect x="69.6843%" y="165" width="0.0381%" height="15" fill="rgb(238,81,41)" fg:x="9137" fg:w="5"/><text x="69.9343%" y="175.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,970 samples, 53.16%)</title><rect x="16.6260%" y="325" width="53.1574%" height="15" fill="rgb(210,199,37)" fg:x="2180" fg:w="6970"/><text x="16.8760%" y="335.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (146 samples, 1.11%)</title><rect x="68.6699%" y="309" width="1.1135%" height="15" fill="rgb(244,192,49)" fg:x="9004" fg:w="146"/><text x="68.9199%" y="319.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (87 samples, 0.66%)</title><rect x="69.1199%" y="293" width="0.6635%" height="15" fill="rgb(226,211,11)" fg:x="9063" fg:w="87"/><text x="69.3699%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (13 samples, 0.10%)</title><rect x="69.6843%" y="277" width="0.0991%" height="15" fill="rgb(236,162,54)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.10%)</title><rect x="69.6843%" y="261" width="0.0991%" height="15" fill="rgb(220,229,9)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="271.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="69.6843%" y="245" width="0.0991%" height="15" fill="rgb(250,87,22)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="255.50"></text></g><g><title>memchr::memchr::memchr (13 samples, 0.10%)</title><rect x="69.6843%" y="229" width="0.0991%" height="15" fill="rgb(239,43,17)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="239.50"></text></g><g><title>memchr::memchr::memchr::imp (13 samples, 0.10%)</title><rect x="69.6843%" y="213" width="0.0991%" height="15" fill="rgb(231,177,25)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="223.50"></text></g><g><title>memchr::memchr::x86::memchr (13 samples, 0.10%)</title><rect x="69.6843%" y="197" width="0.0991%" height="15" fill="rgb(219,179,1)" fg:x="9137" fg:w="13"/><text x="69.9343%" y="207.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (8 samples, 0.06%)</title><rect x="69.7224%" y="181" width="0.0610%" height="15" fill="rgb(238,219,53)" fg:x="9142" fg:w="8"/><text x="69.9724%" y="191.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (5 samples, 0.04%)</title><rect x="69.7453%" y="165" width="0.0381%" height="15" fill="rgb(232,167,36)" fg:x="9145" fg:w="5"/><text x="69.9953%" y="175.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (16 samples, 0.12%)</title><rect x="69.7834%" y="325" width="0.1220%" height="15" fill="rgb(244,19,51)" fg:x="9150" fg:w="16"/><text x="70.0334%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 0.27%)</title><rect x="70.5156%" y="277" width="0.2669%" height="15" fill="rgb(224,6,22)" fg:x="9246" fg:w="35"/><text x="70.7656%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (10 samples, 0.08%)</title><rect x="70.7825%" y="277" width="0.0763%" height="15" fill="rgb(224,145,5)" fg:x="9281" fg:w="10"/><text x="71.0325%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (5 samples, 0.04%)</title><rect x="70.8588%" y="277" width="0.0381%" height="15" fill="rgb(234,130,49)" fg:x="9291" fg:w="5"/><text x="71.1088%" y="287.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="71.2553%" y="213" width="0.0153%" height="15" fill="rgb(254,6,2)" fg:x="9343" fg:w="2"/><text x="71.5053%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.02%)</title><rect x="71.2553%" y="197" width="0.0153%" height="15" fill="rgb(208,96,46)" fg:x="9343" fg:w="2"/><text x="71.5053%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (67 samples, 0.51%)</title><rect x="71.2553%" y="261" width="0.5110%" height="15" fill="rgb(239,3,39)" fg:x="9343" fg:w="67"/><text x="71.5053%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (67 samples, 0.51%)</title><rect x="71.2553%" y="245" width="0.5110%" height="15" fill="rgb(233,210,1)" fg:x="9343" fg:w="67"/><text x="71.5053%" y="255.50"></text></g><g><title>alloc::alloc::realloc (67 samples, 0.51%)</title><rect x="71.2553%" y="229" width="0.5110%" height="15" fill="rgb(244,137,37)" fg:x="9343" fg:w="67"/><text x="71.5053%" y="239.50"></text></g><g><title>realloc (65 samples, 0.50%)</title><rect x="71.2706%" y="213" width="0.4957%" height="15" fill="rgb(240,136,2)" fg:x="9345" fg:w="65"/><text x="71.5206%" y="223.50"></text></g><g><title>[libc.so.6] (54 samples, 0.41%)</title><rect x="71.3545%" y="197" width="0.4118%" height="15" fill="rgb(239,18,37)" fg:x="9356" fg:w="54"/><text x="71.6045%" y="207.50"></text></g><g><title>[libc.so.6] (44 samples, 0.34%)</title><rect x="71.4308%" y="181" width="0.3356%" height="15" fill="rgb(218,185,22)" fg:x="9366" fg:w="44"/><text x="71.6808%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="71.7511%" y="165" width="0.0153%" height="15" fill="rgb(225,218,4)" fg:x="9408" fg:w="2"/><text x="72.0011%" y="175.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="71.7663%" y="261" width="0.0229%" height="15" fill="rgb(230,182,32)" fg:x="9410" fg:w="3"/><text x="72.0163%" y="271.50"></text></g><g><title>__rust_alloc (13 samples, 0.10%)</title><rect x="71.7892%" y="261" width="0.0991%" height="15" fill="rgb(242,56,43)" fg:x="9413" fg:w="13"/><text x="72.0392%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (45 samples, 0.34%)</title><rect x="71.8883%" y="261" width="0.3432%" height="15" fill="rgb(233,99,24)" fg:x="9426" fg:w="45"/><text x="72.1383%" y="271.50"></text></g><g><title>asm_sysvec_call_function_single (6 samples, 0.05%)</title><rect x="72.1858%" y="245" width="0.0458%" height="15" fill="rgb(234,209,42)" fg:x="9465" fg:w="6"/><text x="72.4358%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.05%)</title><rect x="72.1858%" y="229" width="0.0458%" height="15" fill="rgb(227,7,12)" fg:x="9465" fg:w="6"/><text x="72.4358%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.05%)</title><rect x="72.1858%" y="213" width="0.0458%" height="15" fill="rgb(245,203,43)" fg:x="9465" fg:w="6"/><text x="72.4358%" y="223.50"></text></g><g><title>__rseq_handle_notify_resume (6 samples, 0.05%)</title><rect x="72.1858%" y="197" width="0.0458%" height="15" fill="rgb(238,205,33)" fg:x="9465" fg:w="6"/><text x="72.4358%" y="207.50"></text></g><g><title>__get_user_8 (6 samples, 0.05%)</title><rect x="72.1858%" y="181" width="0.0458%" height="15" fill="rgb(231,56,7)" fg:x="9465" fg:w="6"/><text x="72.4358%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (719 samples, 5.48%)</title><rect x="70.8969%" y="277" width="5.4835%" height="15" fill="rgb(244,186,29)" fg:x="9296" fg:w="719"/><text x="71.1469%" y="287.50">alloc::..</text></g><g><title>malloc (544 samples, 4.15%)</title><rect x="72.2315%" y="261" width="4.1489%" height="15" fill="rgb(234,111,31)" fg:x="9471" fg:w="544"/><text x="72.4815%" y="271.50">malloc</text></g><g><title>[libc.so.6] (475 samples, 3.62%)</title><rect x="72.7578%" y="245" width="3.6226%" height="15" fill="rgb(241,149,10)" fg:x="9540" fg:w="475"/><text x="73.0078%" y="255.50">[lib..</text></g><g><title>[libc.so.6] (44 samples, 0.34%)</title><rect x="76.0448%" y="229" width="0.3356%" height="15" fill="rgb(249,206,44)" fg:x="9971" fg:w="44"/><text x="76.2948%" y="239.50"></text></g><g><title>core::cmp::max (14 samples, 0.11%)</title><rect x="76.3804%" y="277" width="0.1068%" height="15" fill="rgb(251,153,30)" fg:x="10015" fg:w="14"/><text x="76.6304%" y="287.50"></text></g><g><title>core::cmp::Ord::max (14 samples, 0.11%)</title><rect x="76.3804%" y="261" width="0.1068%" height="15" fill="rgb(239,152,38)" fg:x="10015" fg:w="14"/><text x="76.6304%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (810 samples, 6.18%)</title><rect x="70.3554%" y="309" width="6.1775%" height="15" fill="rgb(249,139,47)" fg:x="9225" fg:w="810"/><text x="70.6054%" y="319.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (805 samples, 6.14%)</title><rect x="70.3935%" y="293" width="6.1394%" height="15" fill="rgb(244,64,35)" fg:x="9230" fg:w="805"/><text x="70.6435%" y="303.50">alloc::r..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (6 samples, 0.05%)</title><rect x="76.4872%" y="277" width="0.0458%" height="15" fill="rgb(216,46,15)" fg:x="10029" fg:w="6"/><text x="76.7372%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (6 samples, 0.05%)</title><rect x="76.4872%" y="261" width="0.0458%" height="15" fill="rgb(250,74,19)" fg:x="10029" fg:w="6"/><text x="76.7372%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="76.5329%" y="309" width="0.0229%" height="15" fill="rgb(249,42,33)" fg:x="10035" fg:w="3"/><text x="76.7829%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="76.5329%" y="293" width="0.0229%" height="15" fill="rgb(242,149,17)" fg:x="10035" fg:w="3"/><text x="76.7829%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.04%)</title><rect x="76.5558%" y="309" width="0.0381%" height="15" fill="rgb(244,29,21)" fg:x="10038" fg:w="5"/><text x="76.8058%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.04%)</title><rect x="76.5558%" y="293" width="0.0381%" height="15" fill="rgb(220,130,37)" fg:x="10038" fg:w="5"/><text x="76.8058%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,008 samples, 7.69%)</title><rect x="69.9054%" y="325" width="7.6876%" height="15" fill="rgb(211,67,2)" fg:x="9166" fg:w="1008"/><text x="70.1554%" y="335.50">alloc::vec:..</text></g><g><title>core::ptr::write (131 samples, 1.00%)</title><rect x="76.5940%" y="309" width="0.9991%" height="15" fill="rgb(235,68,52)" fg:x="10043" fg:w="131"/><text x="76.8440%" y="319.50"></text></g><g><title>nom::multi::separated_list0::{{closure}} (8,047 samples, 61.37%)</title><rect x="16.2980%" y="341" width="61.3713%" height="15" fill="rgb(246,142,3)" fg:x="2137" fg:w="8047"/><text x="16.5480%" y="351.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (10 samples, 0.08%)</title><rect x="77.5930%" y="325" width="0.0763%" height="15" fill="rgb(241,25,7)" fg:x="10174" fg:w="10"/><text x="77.8430%" y="335.50"></text></g><g><title>hl7_parser::parser::components_parser::{{closure}} (8,059 samples, 61.46%)</title><rect x="16.2142%" y="357" width="61.4628%" height="15" fill="rgb(242,119,39)" fg:x="2126" fg:w="8059"/><text x="16.4642%" y="367.50">hl7_parser::parser::components_parser::{{closure}}</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (85 samples, 0.65%)</title><rect x="83.0156%" y="325" width="0.6483%" height="15" fill="rgb(241,98,45)" fg:x="10885" fg:w="85"/><text x="83.2656%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (85 samples, 0.65%)</title><rect x="83.0156%" y="309" width="0.6483%" height="15" fill="rgb(254,28,30)" fg:x="10885" fg:w="85"/><text x="83.2656%" y="319.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.65%)</title><rect x="83.0156%" y="293" width="0.6483%" height="15" fill="rgb(241,142,54)" fg:x="10885" fg:w="85"/><text x="83.2656%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.65%)</title><rect x="83.0156%" y="277" width="0.6483%" height="15" fill="rgb(222,85,15)" fg:x="10885" fg:w="85"/><text x="83.2656%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (85 samples, 0.65%)</title><rect x="83.0156%" y="261" width="0.6483%" height="15" fill="rgb(210,85,47)" fg:x="10885" fg:w="85"/><text x="83.2656%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.32%)</title><rect x="83.3435%" y="245" width="0.3203%" height="15" fill="rgb(224,206,25)" fg:x="10928" fg:w="42"/><text x="83.5935%" y="255.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (90 samples, 0.69%)</title><rect x="91.4506%" y="293" width="0.6864%" height="15" fill="rgb(243,201,19)" fg:x="11991" fg:w="90"/><text x="91.7006%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (92 samples, 0.70%)</title><rect x="92.1370%" y="293" width="0.7016%" height="15" fill="rgb(236,59,4)" fg:x="12081" fg:w="92"/><text x="92.3870%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (40 samples, 0.31%)</title><rect x="92.8386%" y="293" width="0.3051%" height="15" fill="rgb(254,179,45)" fg:x="12173" fg:w="40"/><text x="93.0886%" y="303.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (913 samples, 6.96%)</title><rect x="86.1959%" y="309" width="6.9631%" height="15" fill="rgb(226,14,10)" fg:x="11302" fg:w="913"/><text x="86.4459%" y="319.50">&lt;nom_loca..</text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="93.1437%" y="293" width="0.0153%" height="15" fill="rgb(244,27,41)" fg:x="12213" fg:w="2"/><text x="93.3937%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="93.1437%" y="277" width="0.0153%" height="15" fill="rgb(235,35,32)" fg:x="12213" fg:w="2"/><text x="93.3937%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="93.1437%" y="261" width="0.0153%" height="15" fill="rgb(218,68,31)" fg:x="12213" fg:w="2"/><text x="93.3937%" y="271.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.02%)</title><rect x="93.1437%" y="245" width="0.0153%" height="15" fill="rgb(207,120,37)" fg:x="12213" fg:w="2"/><text x="93.3937%" y="255.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.02%)</title><rect x="93.1437%" y="229" width="0.0153%" height="15" fill="rgb(227,98,0)" fg:x="12213" fg:w="2"/><text x="93.3937%" y="239.50"></text></g><g><title>hl7_parser::parser::field_parser::{{closure}} (10,181 samples, 77.65%)</title><rect x="15.5201%" y="373" width="77.6464%" height="15" fill="rgb(207,7,3)" fg:x="2035" fg:w="10181"/><text x="15.7701%" y="383.50">hl7_parser::parser::field_parser::{{closure}}</text></g><g><title>nom_locate::position (2,031 samples, 15.49%)</title><rect x="77.6769%" y="357" width="15.4896%" height="15" fill="rgb(206,98,19)" fg:x="10185" fg:w="2031"/><text x="77.9269%" y="367.50">nom_locate::position</text></g><g><title>nom::bytes::complete::take::{{closure}} (1,822 samples, 13.90%)</title><rect x="79.2709%" y="341" width="13.8957%" height="15" fill="rgb(217,5,26)" fg:x="10394" fg:w="1822"/><text x="79.5209%" y="351.50">nom::bytes::complete:..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (1,246 samples, 9.50%)</title><rect x="83.6638%" y="325" width="9.5027%" height="15" fill="rgb(235,190,38)" fg:x="10970" fg:w="1246"/><text x="83.9138%" y="335.50">&lt;nom_locate::L..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="93.4335%" y="357" width="0.0534%" height="15" fill="rgb(247,86,24)" fg:x="12251" fg:w="7"/><text x="93.6835%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.05%)</title><rect x="93.4335%" y="341" width="0.0534%" height="15" fill="rgb(205,101,16)" fg:x="12251" fg:w="7"/><text x="93.6835%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="93.4716%" y="325" width="0.0153%" height="15" fill="rgb(246,168,33)" fg:x="12256" fg:w="2"/><text x="93.7216%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (32 samples, 0.24%)</title><rect x="95.2181%" y="341" width="0.2441%" height="15" fill="rgb(231,114,1)" fg:x="12485" fg:w="32"/><text x="95.4681%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (28 samples, 0.21%)</title><rect x="95.4622%" y="341" width="0.2135%" height="15" fill="rgb(207,184,53)" fg:x="12517" fg:w="28"/><text x="95.7122%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (29 samples, 0.22%)</title><rect x="95.6757%" y="341" width="0.2212%" height="15" fill="rgb(224,95,51)" fg:x="12545" fg:w="29"/><text x="95.9257%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (7 samples, 0.05%)</title><rect x="95.9045%" y="245" width="0.0534%" height="15" fill="rgb(212,188,45)" fg:x="12575" fg:w="7"/><text x="96.1545%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.05%)</title><rect x="95.9045%" y="229" width="0.0534%" height="15" fill="rgb(223,154,38)" fg:x="12575" fg:w="7"/><text x="96.1545%" y="239.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (354 samples, 2.70%)</title><rect x="93.4869%" y="357" width="2.6998%" height="15" fill="rgb(251,22,52)" fg:x="12258" fg:w="354"/><text x="93.7369%" y="367.50">&lt;n..</text></g><g><title>core::iter::traits::iterator::Iterator::count (37 samples, 0.28%)</title><rect x="95.9045%" y="341" width="0.2822%" height="15" fill="rgb(229,209,22)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.28%)</title><rect x="95.9045%" y="325" width="0.2822%" height="15" fill="rgb(234,138,34)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="335.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.28%)</title><rect x="95.9045%" y="309" width="0.2822%" height="15" fill="rgb(212,95,11)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="319.50"></text></g><g><title>memchr::memchr::memchr (37 samples, 0.28%)</title><rect x="95.9045%" y="293" width="0.2822%" height="15" fill="rgb(240,179,47)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="303.50"></text></g><g><title>memchr::memchr::memchr::imp (37 samples, 0.28%)</title><rect x="95.9045%" y="277" width="0.2822%" height="15" fill="rgb(240,163,11)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="287.50"></text></g><g><title>memchr::memchr::x86::memchr (37 samples, 0.28%)</title><rect x="95.9045%" y="261" width="0.2822%" height="15" fill="rgb(236,37,12)" fg:x="12575" fg:w="37"/><text x="96.1545%" y="271.50"></text></g><g><title>memchr::memchr::x86::avx::memchr (30 samples, 0.23%)</title><rect x="95.9579%" y="245" width="0.2288%" height="15" fill="rgb(232,164,16)" fg:x="12582" fg:w="30"/><text x="96.2079%" y="255.50"></text></g><g><title>memchr::memchr::x86::sse2::memchr (21 samples, 0.16%)</title><rect x="96.0265%" y="229" width="0.1602%" height="15" fill="rgb(244,205,15)" fg:x="12591" fg:w="21"/><text x="96.2765%" y="239.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,611 samples, 80.93%)</title><rect x="15.2685%" y="389" width="80.9259%" height="15" fill="rgb(223,117,47)" fg:x="2002" fg:w="10611"/><text x="15.5185%" y="399.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (397 samples, 3.03%)</title><rect x="93.1666%" y="373" width="3.0278%" height="15" fill="rgb(244,107,35)" fg:x="12216" fg:w="397"/><text x="93.4166%" y="383.50">nom..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (26 samples, 0.20%)</title><rect x="96.1943%" y="389" width="0.1983%" height="15" fill="rgb(205,140,8)" fg:x="12613" fg:w="26"/><text x="96.4443%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.05%)</title><rect x="96.7434%" y="341" width="0.0458%" height="15" fill="rgb(228,84,46)" fg:x="12685" fg:w="6"/><text x="96.9934%" y="351.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="96.8502%" y="277" width="0.0229%" height="15" fill="rgb(254,188,9)" fg:x="12699" fg:w="3"/><text x="97.1002%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (204 samples, 1.56%)</title><rect x="96.8502%" y="325" width="1.5558%" height="15" fill="rgb(206,112,54)" fg:x="12699" fg:w="204"/><text x="97.1002%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (204 samples, 1.56%)</title><rect x="96.8502%" y="309" width="1.5558%" height="15" fill="rgb(216,84,49)" fg:x="12699" fg:w="204"/><text x="97.1002%" y="319.50"></text></g><g><title>alloc::alloc::realloc (204 samples, 1.56%)</title><rect x="96.8502%" y="293" width="1.5558%" height="15" fill="rgb(214,194,35)" fg:x="12699" fg:w="204"/><text x="97.1002%" y="303.50"></text></g><g><title>realloc (201 samples, 1.53%)</title><rect x="96.8731%" y="277" width="1.5329%" height="15" fill="rgb(249,28,3)" fg:x="12702" fg:w="201"/><text x="97.1231%" y="287.50"></text></g><g><title>[libc.so.6] (193 samples, 1.47%)</title><rect x="96.9341%" y="261" width="1.4719%" height="15" fill="rgb(222,56,52)" fg:x="12710" fg:w="193"/><text x="97.1841%" y="271.50"></text></g><g><title>[libc.so.6] (184 samples, 1.40%)</title><rect x="97.0027%" y="245" width="1.4033%" height="15" fill="rgb(245,217,50)" fg:x="12719" fg:w="184"/><text x="97.2527%" y="255.50"></text></g><g><title>[libc.so.6] (56 samples, 0.43%)</title><rect x="97.9790%" y="229" width="0.4271%" height="15" fill="rgb(213,201,24)" fg:x="12847" fg:w="56"/><text x="98.2290%" y="239.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="98.3450%" y="213" width="0.0610%" height="15" fill="rgb(248,116,28)" fg:x="12895" fg:w="8"/><text x="98.5950%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (229 samples, 1.75%)</title><rect x="96.8045%" y="341" width="1.7465%" height="15" fill="rgb(219,72,43)" fg:x="12693" fg:w="229"/><text x="97.0545%" y="351.50"></text></g><g><title>malloc (17 samples, 0.13%)</title><rect x="98.4213%" y="325" width="0.1297%" height="15" fill="rgb(209,138,14)" fg:x="12905" fg:w="17"/><text x="98.6713%" y="335.50"></text></g><g><title>[libc.so.6] (14 samples, 0.11%)</title><rect x="98.4442%" y="309" width="0.1068%" height="15" fill="rgb(222,18,33)" fg:x="12908" fg:w="14"/><text x="98.6942%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="98.5204%" y="293" width="0.0305%" height="15" fill="rgb(213,199,7)" fg:x="12918" fg:w="4"/><text x="98.7704%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (240 samples, 1.83%)</title><rect x="96.7358%" y="373" width="1.8304%" height="15" fill="rgb(250,110,10)" fg:x="12684" fg:w="240"/><text x="96.9858%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (240 samples, 1.83%)</title><rect x="96.7358%" y="357" width="1.8304%" height="15" fill="rgb(248,123,6)" fg:x="12684" fg:w="240"/><text x="96.9858%" y="367.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.03%)</title><rect x="98.5662%" y="373" width="0.0305%" height="15" fill="rgb(206,91,31)" fg:x="12924" fg:w="4"/><text x="98.8162%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.03%)</title><rect x="98.5662%" y="357" width="0.0305%" height="15" fill="rgb(211,154,13)" fg:x="12924" fg:w="4"/><text x="98.8162%" y="367.50"></text></g><g><title>hl7_parser::parser::fields_parser::{{closure}} (11,250 samples, 85.80%)</title><rect x="12.9118%" y="421" width="85.7993%" height="15" fill="rgb(225,148,7)" fg:x="1693" fg:w="11250"/><text x="13.1618%" y="431.50">hl7_parser::parser::fields_parser::{{closure}}</text></g><g><title>nom::multi::separated_list0::{{closure}} (11,245 samples, 85.76%)</title><rect x="12.9500%" y="405" width="85.7611%" height="15" fill="rgb(220,160,43)" fg:x="1698" fg:w="11245"/><text x="13.2000%" y="415.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (304 samples, 2.32%)</title><rect x="96.3926%" y="389" width="2.3185%" height="15" fill="rgb(213,52,39)" fg:x="12639" fg:w="304"/><text x="96.6426%" y="399.50">a..</text></g><g><title>core::ptr::write (15 samples, 0.11%)</title><rect x="98.5967%" y="373" width="0.1144%" height="15" fill="rgb(243,137,7)" fg:x="12928" fg:w="15"/><text x="98.8467%" y="383.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (3 samples, 0.02%)</title><rect x="98.7950%" y="373" width="0.0229%" height="15" fill="rgb(230,79,13)" fg:x="12954" fg:w="3"/><text x="99.0450%" y="383.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="98.8255%" y="373" width="0.0153%" height="15" fill="rgb(247,105,23)" fg:x="12958" fg:w="2"/><text x="99.0755%" y="383.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (18 samples, 0.14%)</title><rect x="98.7111%" y="421" width="0.1373%" height="15" fill="rgb(223,179,41)" fg:x="12943" fg:w="18"/><text x="98.9611%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (17 samples, 0.13%)</title><rect x="98.7187%" y="405" width="0.1297%" height="15" fill="rgb(218,9,34)" fg:x="12944" fg:w="17"/><text x="98.9687%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (11 samples, 0.08%)</title><rect x="98.7645%" y="389" width="0.0839%" height="15" fill="rgb(222,106,8)" fg:x="12950" fg:w="11"/><text x="99.0145%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="98.8865%" y="389" width="0.0153%" height="15" fill="rgb(211,220,0)" fg:x="12966" fg:w="2"/><text x="99.1365%" y="399.50"></text></g><g><title>nom::character::complete::char::{{closure}} (10 samples, 0.08%)</title><rect x="98.8484%" y="421" width="0.0763%" height="15" fill="rgb(229,52,16)" fg:x="12961" fg:w="10"/><text x="99.0984%" y="431.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (10 samples, 0.08%)</title><rect x="98.8484%" y="405" width="0.0763%" height="15" fill="rgb(212,155,18)" fg:x="12961" fg:w="10"/><text x="99.0984%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputIter&gt;::slice_index (6 samples, 0.05%)</title><rect x="99.0772%" y="389" width="0.0458%" height="15" fill="rgb(242,21,14)" fg:x="12991" fg:w="6"/><text x="99.3272%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::slice_index (6 samples, 0.05%)</title><rect x="99.0772%" y="373" width="0.0458%" height="15" fill="rgb(222,19,48)" fg:x="12991" fg:w="6"/><text x="99.3272%" y="383.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="99.0772%" y="357" width="0.0458%" height="15" fill="rgb(232,45,27)" fg:x="12991" fg:w="6"/><text x="99.3272%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="99.0772%" y="341" width="0.0458%" height="15" fill="rgb(249,103,42)" fg:x="12991" fg:w="6"/><text x="99.3272%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.05%)</title><rect x="99.0772%" y="325" width="0.0458%" height="15" fill="rgb(246,81,33)" fg:x="12991" fg:w="6"/><text x="99.3272%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::Offset&gt;::offset (2 samples, 0.02%)</title><rect x="99.2068%" y="357" width="0.0153%" height="15" fill="rgb(252,33,42)" fg:x="13008" fg:w="2"/><text x="99.4568%" y="367.50"></text></g><g><title>hl7_parser::parser::segment_parser::{{closure}} (11,352 samples, 86.58%)</title><rect x="12.6678%" y="437" width="86.5772%" height="15" fill="rgb(209,212,41)" fg:x="1661" fg:w="11352"/><text x="12.9178%" y="447.50">hl7_parser::parser::segment_parser::{{closure}}</text></g><g><title>nom_locate::position (42 samples, 0.32%)</title><rect x="98.9246%" y="421" width="0.3203%" height="15" fill="rgb(207,154,6)" fg:x="12971" fg:w="42"/><text x="99.1746%" y="431.50"></text></g><g><title>nom::bytes::complete::take::{{closure}} (32 samples, 0.24%)</title><rect x="99.0009%" y="405" width="0.2441%" height="15" fill="rgb(223,64,47)" fg:x="12981" fg:w="32"/><text x="99.2509%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::InputTake&gt;::take_split (16 samples, 0.12%)</title><rect x="99.1229%" y="389" width="0.1220%" height="15" fill="rgb(211,161,38)" fg:x="12997" fg:w="16"/><text x="99.3729%" y="399.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (7 samples, 0.05%)</title><rect x="99.1916%" y="373" width="0.0534%" height="15" fill="rgb(219,138,40)" fg:x="13006" fg:w="7"/><text x="99.4416%" y="383.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="99.2297%" y="357" width="0.0153%" height="15" fill="rgb(241,228,46)" fg:x="13011" fg:w="2"/><text x="99.4797%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.2678%" y="421" width="0.0229%" height="15" fill="rgb(223,209,38)" fg:x="13016" fg:w="3"/><text x="99.5178%" y="431.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.02%)</title><rect x="99.2678%" y="405" width="0.0229%" height="15" fill="rgb(236,164,45)" fg:x="13016" fg:w="3"/><text x="99.5178%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.2678%" y="389" width="0.0229%" height="15" fill="rgb(231,15,5)" fg:x="13016" fg:w="3"/><text x="99.5178%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (2 samples, 0.02%)</title><rect x="99.3212%" y="405" width="0.0153%" height="15" fill="rgb(252,35,15)" fg:x="13023" fg:w="2"/><text x="99.5712%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (11,376 samples, 86.76%)</title><rect x="12.5915%" y="453" width="86.7602%" height="15" fill="rgb(248,181,18)" fg:x="1651" fg:w="11376"/><text x="12.8415%" y="463.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::character::complete::char::{{closure}} (14 samples, 0.11%)</title><rect x="99.2450%" y="437" width="0.1068%" height="15" fill="rgb(233,39,42)" fg:x="13013" fg:w="14"/><text x="99.4950%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as nom::traits::Slice&lt;R&gt;&gt;::slice (8 samples, 0.06%)</title><rect x="99.2907%" y="421" width="0.0610%" height="15" fill="rgb(238,110,33)" fg:x="13019" fg:w="8"/><text x="99.5407%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 0.02%)</title><rect x="99.3365%" y="405" width="0.0153%" height="15" fill="rgb(233,195,10)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.3365%" y="389" width="0.0153%" height="15" fill="rgb(254,105,3)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="399.50"></text></g><g><title>&lt;memchr::memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.3365%" y="373" width="0.0153%" height="15" fill="rgb(221,225,9)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="383.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="99.3365%" y="357" width="0.0153%" height="15" fill="rgb(224,227,45)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="367.50"></text></g><g><title>memchr::memchr::memchr::imp (2 samples, 0.02%)</title><rect x="99.3365%" y="341" width="0.0153%" height="15" fill="rgb(229,198,43)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="351.50"></text></g><g><title>memchr::memchr::x86::memchr (2 samples, 0.02%)</title><rect x="99.3365%" y="325" width="0.0153%" height="15" fill="rgb(206,209,35)" fg:x="13025" fg:w="2"/><text x="99.5865%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.07%)</title><rect x="99.3594%" y="437" width="0.0686%" height="15" fill="rgb(245,195,53)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.07%)</title><rect x="99.3594%" y="421" width="0.0686%" height="15" fill="rgb(240,92,26)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.07%)</title><rect x="99.3594%" y="405" width="0.0686%" height="15" fill="rgb(207,40,23)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.07%)</title><rect x="99.3594%" y="389" width="0.0686%" height="15" fill="rgb(223,111,35)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.07%)</title><rect x="99.3594%" y="373" width="0.0686%" height="15" fill="rgb(229,147,28)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="383.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.07%)</title><rect x="99.3594%" y="357" width="0.0686%" height="15" fill="rgb(211,29,28)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="367.50"></text></g><g><title>realloc (9 samples, 0.07%)</title><rect x="99.3594%" y="341" width="0.0686%" height="15" fill="rgb(228,72,33)" fg:x="13028" fg:w="9"/><text x="99.6094%" y="351.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="99.3822%" y="325" width="0.0458%" height="15" fill="rgb(205,214,31)" fg:x="13031" fg:w="6"/><text x="99.6322%" y="335.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="99.3899%" y="309" width="0.0381%" height="15" fill="rgb(224,111,15)" fg:x="13032" fg:w="5"/><text x="99.6399%" y="319.50"></text></g><g><title>nom::multi::separated_list0::{{closure}} (11,398 samples, 86.93%)</title><rect x="12.5076%" y="469" width="86.9280%" height="15" fill="rgb(253,21,26)" fg:x="1640" fg:w="11398"/><text x="12.7576%" y="479.50">nom::multi::separated_list0::{{closure}}</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.08%)</title><rect x="99.3517%" y="453" width="0.0839%" height="15" fill="rgb(245,139,43)" fg:x="13027" fg:w="11"/><text x="99.6017%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="99.4433%" y="389" width="0.0153%" height="15" fill="rgb(252,170,7)" fg:x="13039" fg:w="2"/><text x="99.6933%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="99.4433%" y="373" width="0.0153%" height="15" fill="rgb(231,118,14)" fg:x="13039" fg:w="2"/><text x="99.6933%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="99.4433%" y="357" width="0.0153%" height="15" fill="rgb(238,83,0)" fg:x="13039" fg:w="2"/><text x="99.6933%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="99.4433%" y="341" width="0.0153%" height="15" fill="rgb(221,39,39)" fg:x="13039" fg:w="2"/><text x="99.6933%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="99.4433%" y="421" width="0.0381%" height="15" fill="rgb(222,119,46)" fg:x="13039" fg:w="5"/><text x="99.6933%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="99.4433%" y="405" width="0.0381%" height="15" fill="rgb(222,165,49)" fg:x="13039" fg:w="5"/><text x="99.6933%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="99.4585%" y="389" width="0.0229%" height="15" fill="rgb(219,113,52)" fg:x="13041" fg:w="3"/><text x="99.7085%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.02%)</title><rect x="99.4585%" y="373" width="0.0229%" height="15" fill="rgb(214,7,15)" fg:x="13041" fg:w="3"/><text x="99.7085%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.4585%" y="357" width="0.0229%" height="15" fill="rgb(235,32,4)" fg:x="13041" fg:w="3"/><text x="99.7085%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.4585%" y="341" width="0.0229%" height="15" fill="rgb(238,90,54)" fg:x="13041" fg:w="3"/><text x="99.7085%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.4585%" y="325" width="0.0229%" height="15" fill="rgb(213,208,19)" fg:x="13041" fg:w="3"/><text x="99.7085%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.02%)</title><rect x="99.4661%" y="309" width="0.0153%" height="15" fill="rgb(233,156,4)" fg:x="13042" fg:w="2"/><text x="99.7161%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="99.4661%" y="293" width="0.0153%" height="15" fill="rgb(207,194,5)" fg:x="13042" fg:w="2"/><text x="99.7161%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.03%)</title><rect x="99.5043%" y="373" width="0.0305%" height="15" fill="rgb(206,111,30)" fg:x="13047" fg:w="4"/><text x="99.7543%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (17 samples, 0.13%)</title><rect x="99.4356%" y="469" width="0.1297%" height="15" fill="rgb(243,70,54)" fg:x="13038" fg:w="17"/><text x="99.6856%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (17 samples, 0.13%)</title><rect x="99.4356%" y="453" width="0.1297%" height="15" fill="rgb(242,28,8)" fg:x="13038" fg:w="17"/><text x="99.6856%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.13%)</title><rect x="99.4356%" y="437" width="0.1297%" height="15" fill="rgb(219,106,18)" fg:x="13038" fg:w="17"/><text x="99.6856%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.08%)</title><rect x="99.4814%" y="421" width="0.0839%" height="15" fill="rgb(244,222,10)" fg:x="13044" fg:w="11"/><text x="99.7314%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.08%)</title><rect x="99.4814%" y="405" width="0.0839%" height="15" fill="rgb(236,179,52)" fg:x="13044" fg:w="11"/><text x="99.7314%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.08%)</title><rect x="99.4814%" y="389" width="0.0839%" height="15" fill="rgb(213,23,39)" fg:x="13044" fg:w="11"/><text x="99.7314%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.02%)</title><rect x="99.5424%" y="373" width="0.0229%" height="15" fill="rgb(238,48,10)" fg:x="13052" fg:w="3"/><text x="99.7924%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.02%)</title><rect x="99.5424%" y="357" width="0.0229%" height="15" fill="rgb(251,196,23)" fg:x="13052" fg:w="3"/><text x="99.7924%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="99.5424%" y="341" width="0.0229%" height="15" fill="rgb(250,152,24)" fg:x="13052" fg:w="3"/><text x="99.7924%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="99.6187%" y="341" width="0.0153%" height="15" fill="rgb(209,150,17)" fg:x="13062" fg:w="2"/><text x="99.8687%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="99.6034%" y="405" width="0.0381%" height="15" fill="rgb(234,202,34)" fg:x="13060" fg:w="5"/><text x="99.8534%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="99.6034%" y="389" width="0.0381%" height="15" fill="rgb(253,148,53)" fg:x="13060" fg:w="5"/><text x="99.8534%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="99.6034%" y="373" width="0.0381%" height="15" fill="rgb(218,129,16)" fg:x="13060" fg:w="5"/><text x="99.8534%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="99.6110%" y="357" width="0.0305%" height="15" fill="rgb(216,85,19)" fg:x="13061" fg:w="4"/><text x="99.8610%" y="367.50"></text></g><g><title>hashbrown::map::make_insert_hash (11 samples, 0.08%)</title><rect x="99.5882%" y="437" width="0.0839%" height="15" fill="rgb(235,228,7)" fg:x="13058" fg:w="11"/><text x="99.8382%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.08%)</title><rect x="99.5882%" y="421" width="0.0839%" height="15" fill="rgb(245,175,0)" fg:x="13058" fg:w="11"/><text x="99.8382%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="99.6492%" y="405" width="0.0229%" height="15" fill="rgb(208,168,36)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="99.6492%" y="389" width="0.0229%" height="15" fill="rgb(246,171,24)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.02%)</title><rect x="99.6492%" y="373" width="0.0229%" height="15" fill="rgb(215,142,24)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.6492%" y="357" width="0.0229%" height="15" fill="rgb(250,187,7)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.6492%" y="341" width="0.0229%" height="15" fill="rgb(228,66,33)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.02%)</title><rect x="99.6492%" y="325" width="0.0229%" height="15" fill="rgb(234,215,21)" fg:x="13066" fg:w="3"/><text x="99.8992%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.02%)</title><rect x="99.6568%" y="309" width="0.0153%" height="15" fill="rgb(222,191,20)" fg:x="13067" fg:w="2"/><text x="99.9068%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="99.6568%" y="293" width="0.0153%" height="15" fill="rgb(245,79,54)" fg:x="13067" fg:w="2"/><text x="99.9068%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.02%)</title><rect x="99.6721%" y="389" width="0.0153%" height="15" fill="rgb(240,10,37)" fg:x="13069" fg:w="2"/><text x="99.9221%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="99.6873%" y="389" width="0.0153%" height="15" fill="rgb(214,192,32)" fg:x="13071" fg:w="2"/><text x="99.9373%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="99.6873%" y="373" width="0.0153%" height="15" fill="rgb(209,36,54)" fg:x="13071" fg:w="2"/><text x="99.9373%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="99.6873%" y="357" width="0.0153%" height="15" fill="rgb(220,10,11)" fg:x="13071" fg:w="2"/><text x="99.9373%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5 samples, 0.04%)</title><rect x="99.6721%" y="437" width="0.0381%" height="15" fill="rgb(221,106,17)" fg:x="13069" fg:w="5"/><text x="99.9221%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="99.6721%" y="421" width="0.0381%" height="15" fill="rgb(251,142,44)" fg:x="13069" fg:w="5"/><text x="99.9221%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.04%)</title><rect x="99.6721%" y="405" width="0.0381%" height="15" fill="rgb(238,13,15)" fg:x="13069" fg:w="5"/><text x="99.9221%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="99.7178%" y="421" width="0.0153%" height="15" fill="rgb(208,107,27)" fg:x="13075" fg:w="2"/><text x="99.9678%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.02%)</title><rect x="99.7178%" y="405" width="0.0153%" height="15" fill="rgb(205,136,37)" fg:x="13075" fg:w="2"/><text x="99.9678%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="99.7178%" y="389" width="0.0153%" height="15" fill="rgb(250,205,27)" fg:x="13075" fg:w="2"/><text x="99.9678%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="99.7483%" y="357" width="0.0229%" height="15" fill="rgb(210,80,43)" fg:x="13079" fg:w="3"/><text x="99.9983%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.7865%" y="293" width="0.0229%" height="15" fill="rgb(247,160,36)" fg:x="13084" fg:w="3"/><text x="100.0365%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.7865%" y="277" width="0.0229%" height="15" fill="rgb(234,13,49)" fg:x="13084" fg:w="3"/><text x="100.0365%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="99.7865%" y="261" width="0.0229%" height="15" fill="rgb(234,122,0)" fg:x="13084" fg:w="3"/><text x="100.0365%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (6 samples, 0.05%)</title><rect x="99.7788%" y="357" width="0.0458%" height="15" fill="rgb(207,146,38)" fg:x="13083" fg:w="6"/><text x="100.0288%" y="367.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (6 samples, 0.05%)</title><rect x="99.7788%" y="341" width="0.0458%" height="15" fill="rgb(207,177,25)" fg:x="13083" fg:w="6"/><text x="100.0288%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="99.7788%" y="325" width="0.0458%" height="15" fill="rgb(211,178,42)" fg:x="13083" fg:w="6"/><text x="100.0288%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="99.7788%" y="309" width="0.0458%" height="15" fill="rgb(230,69,54)" fg:x="13083" fg:w="6"/><text x="100.0288%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="99.8093%" y="293" width="0.0153%" height="15" fill="rgb(214,135,41)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="99.8093%" y="277" width="0.0153%" height="15" fill="rgb(237,67,25)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.02%)</title><rect x="99.8093%" y="261" width="0.0153%" height="15" fill="rgb(222,189,50)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.02%)</title><rect x="99.8093%" y="245" width="0.0153%" height="15" fill="rgb(245,148,34)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.02%)</title><rect x="99.8093%" y="229" width="0.0153%" height="15" fill="rgb(222,29,6)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.02%)</title><rect x="99.8093%" y="213" width="0.0153%" height="15" fill="rgb(221,189,43)" fg:x="13087" fg:w="2"/><text x="100.0593%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.02%)</title><rect x="99.8246%" y="357" width="0.0153%" height="15" fill="rgb(207,36,27)" fg:x="13089" fg:w="2"/><text x="100.0746%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.02%)</title><rect x="99.8246%" y="341" width="0.0153%" height="15" fill="rgb(217,90,24)" fg:x="13089" fg:w="2"/><text x="100.0746%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16 samples, 0.12%)</title><rect x="99.7331%" y="421" width="0.1220%" height="15" fill="rgb(224,66,35)" fg:x="13077" fg:w="16"/><text x="99.9831%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.12%)</title><rect x="99.7331%" y="405" width="0.1220%" height="15" fill="rgb(221,13,50)" fg:x="13077" fg:w="16"/><text x="99.9831%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (15 samples, 0.11%)</title><rect x="99.7407%" y="389" width="0.1144%" height="15" fill="rgb(236,68,49)" fg:x="13078" fg:w="15"/><text x="99.9907%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (15 samples, 0.11%)</title><rect x="99.7407%" y="373" width="0.1144%" height="15" fill="rgb(229,146,28)" fg:x="13078" fg:w="15"/><text x="99.9907%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.02%)</title><rect x="99.8398%" y="357" width="0.0153%" height="15" fill="rgb(225,31,38)" fg:x="13091" fg:w="2"/><text x="100.0898%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.02%)</title><rect x="99.8398%" y="341" width="0.0153%" height="15" fill="rgb(250,208,3)" fg:x="13091" fg:w="2"/><text x="100.0898%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (7 samples, 0.05%)</title><rect x="99.8551%" y="421" width="0.0534%" height="15" fill="rgb(246,54,23)" fg:x="13093" fg:w="7"/><text x="100.1051%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (46 samples, 0.35%)</title><rect x="99.5653%" y="469" width="0.3508%" height="15" fill="rgb(243,76,11)" fg:x="13055" fg:w="46"/><text x="99.8153%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (46 samples, 0.35%)</title><rect x="99.5653%" y="453" width="0.3508%" height="15" fill="rgb(245,21,50)" fg:x="13055" fg:w="46"/><text x="99.8153%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.21%)</title><rect x="99.7102%" y="437" width="0.2059%" height="15" fill="rgb(228,9,43)" fg:x="13074" fg:w="27"/><text x="99.9602%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.02%)</title><rect x="99.9314%" y="373" width="0.0153%" height="15" fill="rgb(208,100,47)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.02%)</title><rect x="99.9314%" y="357" width="0.0153%" height="15" fill="rgb(232,26,8)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.02%)</title><rect x="99.9314%" y="341" width="0.0153%" height="15" fill="rgb(216,166,38)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="99.9314%" y="325" width="0.0153%" height="15" fill="rgb(251,202,51)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="99.9314%" y="309" width="0.0153%" height="15" fill="rgb(254,216,34)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="99.9314%" y="293" width="0.0153%" height="15" fill="rgb(251,32,27)" fg:x="13103" fg:w="2"/><text x="100.1814%" y="303.50"></text></g><g><title>_start (13,105 samples, 99.95%)</title><rect x="0.0076%" y="773" width="99.9466%" height="15" fill="rgb(208,127,28)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="783.50">_start</text></g><g><title>__libc_start_main (13,105 samples, 99.95%)</title><rect x="0.0076%" y="757" width="99.9466%" height="15" fill="rgb(224,137,22)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (13,105 samples, 99.95%)</title><rect x="0.0076%" y="741" width="99.9466%" height="15" fill="rgb(254,70,32)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="751.50">[libc.so.6]</text></g><g><title>main (13,105 samples, 99.95%)</title><rect x="0.0076%" y="725" width="99.9466%" height="15" fill="rgb(229,75,37)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (13,105 samples, 99.95%)</title><rect x="0.0076%" y="709" width="99.9466%" height="15" fill="rgb(252,64,23)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (13,105 samples, 99.95%)</title><rect x="0.0076%" y="693" width="99.9466%" height="15" fill="rgb(232,162,48)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,105 samples, 99.95%)</title><rect x="0.0076%" y="677" width="99.9466%" height="15" fill="rgb(246,160,12)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,105 samples, 99.95%)</title><rect x="0.0076%" y="661" width="99.9466%" height="15" fill="rgb(247,166,0)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (13,105 samples, 99.95%)</title><rect x="0.0076%" y="645" width="99.9466%" height="15" fill="rgb(249,219,21)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="655.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (13,105 samples, 99.95%)</title><rect x="0.0076%" y="629" width="99.9466%" height="15" fill="rgb(205,209,3)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,105 samples, 99.95%)</title><rect x="0.0076%" y="613" width="99.9466%" height="15" fill="rgb(243,44,1)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,105 samples, 99.95%)</title><rect x="0.0076%" y="597" width="99.9466%" height="15" fill="rgb(206,159,16)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13,105 samples, 99.95%)</title><rect x="0.0076%" y="581" width="99.9466%" height="15" fill="rgb(244,77,30)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (13,105 samples, 99.95%)</title><rect x="0.0076%" y="565" width="99.9466%" height="15" fill="rgb(218,69,12)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="575.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,105 samples, 99.95%)</title><rect x="0.0076%" y="549" width="99.9466%" height="15" fill="rgb(212,87,7)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,105 samples, 99.95%)</title><rect x="0.0076%" y="533" width="99.9466%" height="15" fill="rgb(245,114,25)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>parse::main (13,105 samples, 99.95%)</title><rect x="0.0076%" y="517" width="99.9466%" height="15" fill="rgb(210,61,42)" fg:x="1" fg:w="13105"/><text x="0.2576%" y="527.50">parse::main</text></g><g><title>hl7_parser::message::Message::parse (11,873 samples, 90.55%)</title><rect x="9.4036%" y="501" width="90.5506%" height="15" fill="rgb(211,52,33)" fg:x="1233" fg:w="11873"/><text x="9.6536%" y="511.50">hl7_parser::message::Message::parse</text></g><g><title>hl7_parser::parser::parse_message (11,872 samples, 90.54%)</title><rect x="9.4112%" y="485" width="90.5430%" height="15" fill="rgb(234,58,33)" fg:x="1234" fg:w="11872"/><text x="9.6612%" y="495.50">hl7_parser::parser::parse_message</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (5 samples, 0.04%)</title><rect x="99.9161%" y="469" width="0.0381%" height="15" fill="rgb(220,115,36)" fg:x="13101" fg:w="5"/><text x="100.1661%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.04%)</title><rect x="99.9161%" y="453" width="0.0381%" height="15" fill="rgb(243,153,54)" fg:x="13101" fg:w="5"/><text x="100.1661%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.03%)</title><rect x="99.9237%" y="437" width="0.0305%" height="15" fill="rgb(251,47,18)" fg:x="13102" fg:w="4"/><text x="100.1737%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.02%)</title><rect x="99.9314%" y="421" width="0.0229%" height="15" fill="rgb(242,102,42)" fg:x="13103" fg:w="3"/><text x="100.1814%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.02%)</title><rect x="99.9314%" y="405" width="0.0229%" height="15" fill="rgb(234,31,38)" fg:x="13103" fg:w="3"/><text x="100.1814%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.02%)</title><rect x="99.9314%" y="389" width="0.0229%" height="15" fill="rgb(221,117,51)" fg:x="13103" fg:w="3"/><text x="100.1814%" y="399.50"></text></g><g><title>parse (13,107 samples, 99.96%)</title><rect x="0.0000%" y="789" width="99.9619%" height="15" fill="rgb(212,20,18)" fg:x="0" fg:w="13107"/><text x="0.2500%" y="799.50">parse</text></g><g><title>all (13,112 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(245,133,36)" fg:x="0" fg:w="13112"/><text x="0.2500%" y="815.50"></text></g><g><title>perf-exec (5 samples, 0.04%)</title><rect x="99.9619%" y="789" width="0.0381%" height="15" fill="rgb(212,6,19)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="99.9619%" y="773" width="0.0381%" height="15" fill="rgb(218,1,36)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="783.50"></text></g><g><title>do_syscall_64 (5 samples, 0.04%)</title><rect x="99.9619%" y="757" width="0.0381%" height="15" fill="rgb(246,84,54)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="767.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.04%)</title><rect x="99.9619%" y="741" width="0.0381%" height="15" fill="rgb(242,110,6)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="751.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.04%)</title><rect x="99.9619%" y="725" width="0.0381%" height="15" fill="rgb(214,47,5)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="735.50"></text></g><g><title>bprm_execve (5 samples, 0.04%)</title><rect x="99.9619%" y="709" width="0.0381%" height="15" fill="rgb(218,159,25)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="719.50"></text></g><g><title>load_elf_binary (5 samples, 0.04%)</title><rect x="99.9619%" y="693" width="0.0381%" height="15" fill="rgb(215,211,28)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="703.50"></text></g><g><title>begin_new_exec (5 samples, 0.04%)</title><rect x="99.9619%" y="677" width="0.0381%" height="15" fill="rgb(238,59,32)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="687.50"></text></g><g><title>perf_event_comm (5 samples, 0.04%)</title><rect x="99.9619%" y="661" width="0.0381%" height="15" fill="rgb(226,82,3)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="671.50"></text></g><g><title>perf_iterate_sb (5 samples, 0.04%)</title><rect x="99.9619%" y="645" width="0.0381%" height="15" fill="rgb(240,164,32)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="655.50"></text></g><g><title>perf_iterate_ctx (5 samples, 0.04%)</title><rect x="99.9619%" y="629" width="0.0381%" height="15" fill="rgb(232,46,7)" fg:x="13107" fg:w="5"/><text x="100.2119%" y="639.50"></text></g></svg></svg>